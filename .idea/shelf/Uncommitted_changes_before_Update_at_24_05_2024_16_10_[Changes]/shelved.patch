Index: src/main/java/network/client/gui/GameSceneController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package network.client.gui;\r\n\r\nimport com.google.gson.*;\r\nimport javafx.application.Platform;\r\nimport javafx.geometry.Insets;\r\nimport javafx.geometry.Pos;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Alert;\r\nimport javafx.scene.control.Button;\r\nimport javafx.scene.control.Label;\r\nimport javafx.scene.control.ScrollPane;\r\nimport javafx.scene.image.Image;\r\nimport javafx.scene.image.ImageView;\r\nimport javafx.scene.image.PixelReader;\r\nimport javafx.scene.image.WritableImage;\r\nimport javafx.scene.layout.*;\r\nimport javafx.scene.paint.Color;\r\nimport javafx.stage.Stage;\r\nimport view.ClientView;\r\n\r\nimport java.io.*;\r\nimport java.nio.file.Path;\r\nimport java.nio.file.Paths;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport java.net.Socket;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Objects;\r\n\r\npublic class GameSceneController {\r\n    private StackPane root = new StackPane();\r\n    private static final Object syncObject = new Object();\r\n    private Stage primaryStage;\r\n    private PrintWriter out;\r\n    private Socket socket;\r\n    private BufferedReader in;\r\n    private String typeHandCard1 = null;\r\n    private String typeHandCard2 = null;\r\n    private String typeHandCard3 = null;\r\n    private String idHandCard1 = null;\r\n    private String idHandCard2 = null;\r\n    private String idHandCard3 = null;\r\n    private String idTopCardResourceDeck;\r\n    private String idTopCardGoldDeck;\r\n    private Button playCard = new Button(\"Play Card\");\r\n    private Button flipCardToBack = new Button(\"Flip Card to back\");\r\n    private Button flipCardToFront = new Button(\"Flip Card to front\");\r\n    private Button drawCard = new Button(\"Draw card\");\r\n    private Button seeYourSpecificSeeds = new Button(\"See your seeds\");\r\n    private Button seeOtherPlayersBoards = new Button(\"See other players boards\");\r\n    private Button seeYourPoints = new Button(\"See your points\");\r\n    Button showObjective = new Button(\"Show Objective\");\r\n    private Button endTurn = new Button(\"End turn\");\r\n    private Button quit = new Button(\"Quit\");\r\n    private Boolean haveToDraw = false;\r\n    private Boolean haveToPlay = true;\r\n    private String chosenDeckForDrawingNewCard = null;\r\n    private String wellOrDeck = \"notSelected\";\r\n    private double heightWellCards = 80;\r\n    private double widthWellCards = 110;\r\n    private Integer indexCardToPlace = 100;\r\n    private Integer indexCardToBePlacedOn = 100;\r\n    private Integer indexCardPlayedFromHand = 9999999;\r\n    private Integer indexCardFromWellSelected = 89989898;\r\n    private String cornerSelected = null;\r\n    private Image wellCardSelected = null;\r\n    private String idWellCardSelected = null;\r\n    private Controller controller = null;\r\n    private String currentPlayerNickname;\r\n    private ClientView clientView;\r\n    private BoardPointsScene boardPointsScene;\r\n    private boolean isCurrentPlayerTurn = false;\r\n    private ScrollPane cardsOntheBoardScrollPane;\r\n    private GridPane gameBoard;\r\n    GridPane buttonContainer = new GridPane();\r\n    Label chosenCardToPlace = new Label();\r\n    Label chosenCardToBePlacedOn = new Label();\r\n    Label chosenCorner = new Label();\r\n    Label chosenDeckOrWell = new Label();\r\n    private List<CardView> allCardViews = new ArrayList<>();\r\n    private static CardView clickedCardView;\r\n    private Map<CardView, Integer> cardIndices = new HashMap<>();\r\n    private int nextCardIndex = 0; //\r\n    private String pathHandCard1;\r\n    private String pathHandCard2;\r\n    private String pathHandCard3;\r\n    private String pathChosen;\r\n    private GridPane gridPaneForWellCards;\r\n    String firstCommonId;\r\n    String secondCommonId;\r\n    String secretId;\r\n    ShowObjectiveScene objectiveScene;\r\n    private boolean cardOnHerBack=false;\r\n    private String pathFlipped;\r\n    private Image initCardImage;\r\n    private ImageView handCard1View;\r\n    private ImageView handCard2View;\r\n    private ImageView handCard3View;\r\n    private Image handCard1;\r\n    private Image handCard2;\r\n    private Image handCard3;\r\n    private String indexForGold=null;\r\n    private Color targetColor = Color.web(\"#351F16\");\r\n\r\n    public void initData(Stage primaryStage, PrintWriter out, Socket socket, BufferedReader in, ClientView clientView, String currentPlayerNickname) throws IOException {\r\n        this.primaryStage = primaryStage;\r\n        this.out = new PrintWriter(socket.getOutputStream(), true);\r\n        this.socket = socket;\r\n        this.in = in;\r\n        this.currentPlayerNickname = currentPlayerNickname;\r\n        System.out.println(\"Current player in initData is:\" + currentPlayerNickname);\r\n        this.clientView = clientView;\r\n        controller = new Controller(in, out);\r\n        isCurrentPlayerTurn = clientView.getUserName().equals(currentPlayerNickname);\r\n    }\r\n\r\n    public synchronized void updateFirst() throws IOException {\r\n        synchronized (syncObject) {\r\n            initializeWell();\r\n            updatingResourceAndGoldDeck();\r\n            creatingPathForGameMethod();\r\n            SharedObjectsInGui.setTopCardResourceDeck(createNewPathForImages(SharedObjectsInGui.getPathResourceDeck()));\r\n            SharedObjectsInGui.setTopCardGoldDeck(createNewPathForImages(SharedObjectsInGui.getPathGoldDeck()));\r\n            out.println(\"firstCardResourceGui\");\r\n            idTopCardResourceDeck = in.readLine();\r\n            out.println(\"firstCardGoldGui\");\r\n            idTopCardGoldDeck = in.readLine();\r\n            creatingDeckAndGoldDeckView();\r\n            creatingWell();\r\n            creatingImagesForTheWell();\r\n            creatingImagesViewForTheWell();\r\n            settingWellOnMouseClickedEvent();\r\n            settingDecksOnMouseClickedEvent();\r\n            playerDeck();\r\n            checkTypePlayerDeck();\r\n        }\r\n    }\r\n\r\n    public void startGame(String initCardId, int isFront) throws IOException {\r\n        Image backGroundImage = new Image(Objects.requireNonNull(getClass().getResourceAsStream(\"/ImmaginiCodex/sfondoGame.jpg\")));\r\n        BackgroundImage backgroundImage = new BackgroundImage(backGroundImage, BackgroundRepeat.NO_REPEAT, BackgroundRepeat.NO_REPEAT, BackgroundPosition.CENTER, BackgroundSize.DEFAULT);\r\n        Background background = new Background(backgroundImage);\r\n\r\n        pathHandCard1 = \"/ImmaginiCodex/CarteFront/\" + typeHandCard1 + \"/\" + idHandCard1 + \".png\";\r\n        pathHandCard2 = \"/ImmaginiCodex/CarteFront/\" + typeHandCard2 + \"/\" + idHandCard2 + \".png\";\r\n        pathHandCard3 = \"/ImmaginiCodex/CarteFront/\" + typeHandCard3 + \"/\" + idHandCard3 + \".png\";\r\n\r\n        handCard1 = new Image(Objects.requireNonNull(getClass().getResourceAsStream(pathHandCard1)));\r\n        handCard2 = new Image(Objects.requireNonNull(getClass().getResourceAsStream(pathHandCard2)));\r\n        handCard3 = new Image(Objects.requireNonNull(getClass().getResourceAsStream(pathHandCard3)));\r\n\r\n        handCard1View = new ImageView(handCard1);\r\n        setWidthAndHeight(handCard1View);\r\n\r\n        handCard2View = new ImageView(handCard2);\r\n        handCard2View.setFitWidth(widthWellCards);\r\n        handCard2View.setFitHeight(heightWellCards);\r\n\r\n        handCard3View = new ImageView(handCard3);\r\n        handCard3View.setFitWidth(widthWellCards);\r\n        handCard3View.setFitHeight(heightWellCards);\r\n\r\n        cardsOntheBoardScrollPane = new ScrollPane();\r\n        cardsOntheBoardScrollPane.setPrefSize(400.00, 400.00);\r\n        int boardDimension = 500;\r\n\r\n        gameBoard = new GridPane(boardDimension, boardDimension);\r\n        gameBoard.setBackground(background);\r\n        gameBoard.setHgap(0);\r\n        gameBoard.setVgap(0);\r\n        gameBoard.setAlignment(Pos.CENTER);\r\n\r\n        double windowedLength = root.getWidth();\r\n        double windowHeight = root.getHeight();\r\n\r\n        gameBoard.setPrefSize(windowedLength * 0.8, windowHeight * 0.8);\r\n        if(isFront==1)\r\n        {\r\n          initCardImage = new Image(Objects.requireNonNull(getClass().getResourceAsStream(\"/ImmaginiCodex/CarteFront/Init/\" + initCardId + \".png\")));\r\n        }\r\n        else {\r\n            initCardImage = new Image(Objects.requireNonNull(getClass().getResourceAsStream(\"/ImmaginiCodex/CarteBack/Init/\" + initCardId + \".png\")));\r\n        }\r\n\r\n        GridPane initCardDividedInNineRegions = subnettingEachImage(initCardImage, initCardId);\r\n\r\n        ImageView tlImageView = (ImageView) initCardDividedInNineRegions.getChildren().get(0);\r\n        ImageView tcImageView = (ImageView) initCardDividedInNineRegions.getChildren().get(1);\r\n        ImageView trImageView = (ImageView) initCardDividedInNineRegions.getChildren().get(2);\r\n        ImageView lcImageView = (ImageView) initCardDividedInNineRegions.getChildren().get(3);\r\n        ImageView ccImageView = (ImageView) initCardDividedInNineRegions.getChildren().get(4);\r\n        ImageView rcImageView = (ImageView) initCardDividedInNineRegions.getChildren().get(5);\r\n        ImageView blImageView = (ImageView) initCardDividedInNineRegions.getChildren().get(6);\r\n        ImageView bcImageView = (ImageView) initCardDividedInNineRegions.getChildren().get(7);\r\n        ImageView brImageView = (ImageView) initCardDividedInNineRegions.getChildren().get(8);\r\n\r\n        CardView tlCardView = new CardView(tlImageView, initCardId, \"TL\");\r\n        CardView tcCardView = new CardView(tcImageView, initCardId, \"TC\");\r\n        CardView trCardView = new CardView(trImageView, initCardId, \"TR\");\r\n        CardView lcCardView = new CardView(lcImageView, initCardId, \"LC\");\r\n        CardView ccCardView = new CardView(ccImageView, initCardId, \"CC\");\r\n        CardView rcCardView = new CardView(rcImageView, initCardId, \"RC\");\r\n        CardView blCardView = new CardView(blImageView, initCardId, \"BL\");\r\n        CardView bcCardView = new CardView(bcImageView, initCardId, \"BC\");\r\n        CardView brCardView = new CardView(brImageView, initCardId, \"BR\");\r\n\r\n        nextCardIndex++; //1 for initial card\r\n        //All the index of the same card has the same value\r\n        cardIndices.put(tlCardView, nextCardIndex);\r\n        System.out.println(\"Added TL CardView with index: \" + nextCardIndex);\r\n        cardIndices.put(tcCardView, nextCardIndex);\r\n        System.out.println(\"Added TC CardView with index: \" + nextCardIndex);\r\n        cardIndices.put(trCardView, nextCardIndex);\r\n        System.out.println(\"Added TR CardView with index: \" + nextCardIndex);\r\n        cardIndices.put(lcCardView, nextCardIndex);\r\n        System.out.println(\"Added LC CardView with index: \" + nextCardIndex);\r\n        cardIndices.put(ccCardView, nextCardIndex);\r\n        System.out.println(\"Added CC CardView with index: \" + nextCardIndex);\r\n        cardIndices.put(rcCardView, nextCardIndex);\r\n        System.out.println(\"Added RC CardView with index: \" + nextCardIndex);\r\n        cardIndices.put(blCardView, nextCardIndex);\r\n        System.out.println(\"Added BL CardView with index: \" + nextCardIndex);\r\n        cardIndices.put(bcCardView, nextCardIndex);\r\n        System.out.println(\"Added BC CardView with index: \" + nextCardIndex);\r\n        cardIndices.put(brCardView, nextCardIndex);\r\n        System.out.println(\"Added BR CardView with index: \" + nextCardIndex);\r\n\r\n\r\n        tlImageView.setPickOnBounds(true);\r\n        trImageView.setPickOnBounds(true);\r\n        blImageView.setPickOnBounds(true);\r\n        brImageView.setPickOnBounds(true);\r\n\r\n        gameBoard.add(tlImageView, boardDimension / 3, boardDimension / 3);\r\n        gameBoard.add(tcImageView, boardDimension / 3+1, boardDimension / 3);\r\n        gameBoard.add(trImageView, boardDimension / 3+2, boardDimension / 3);\r\n        gameBoard.add(lcImageView, boardDimension / 3, boardDimension / 3+1);\r\n        gameBoard.add(ccImageView, boardDimension / 3+1, boardDimension / 3+1);\r\n        gameBoard.add(rcImageView, boardDimension / 3+2, boardDimension / 3+1);\r\n        gameBoard.add(blImageView, boardDimension / 3, boardDimension / 3+2);\r\n        gameBoard.add(bcImageView, boardDimension / 3+1, boardDimension / 3+2);\r\n        gameBoard.add(brImageView, boardDimension / 3+2, boardDimension / 3+2);\r\n\r\n        cardsOntheBoardScrollPane.setContent(gameBoard);\r\n        BorderPane layout = new BorderPane();\r\n        layout.setCenter(cardsOntheBoardScrollPane);\r\n        layout.setStyle(\"-fx-background-color: #212121;\");\r\n\r\n\r\n        VBox vboxGame = new VBox();\r\n        vboxGame.setFillWidth(true);\r\n\r\n        Insets padding = new Insets(10, 10, 10, 10);\r\n        Insets paddingDecks = new Insets(100, 10, 10, 10);\r\n\r\n        HBox secondRow = new HBox();\r\n        HBox firstColumnOfSecondRow = new HBox();\r\n        firstColumnOfSecondRow.setPadding(padding);\r\n        firstColumnOfSecondRow.setSpacing(4);\r\n\r\n        Label wellText = new Label(\"                    WELL\");\r\n        Label wellText2 = new Label(\"CARDS\");\r\n        wellText.setStyle(\"-fx-font-weight: bold; -fx-text-fill: white; -fx-font-size: 14\");\r\n        wellText2.setStyle(\"-fx-font-weight: bold; -fx-text-fill: white; -fx-font-size: 14\");\r\n\r\n        //Initializing well cards\r\n\r\n        gridPaneForWellCards = new GridPane();\r\n        gridPaneForWellCards.setVgap(4.0);\r\n        gridPaneForWellCards.setHgap(4.0);\r\n        gridPaneForWellCards.setPadding(padding);\r\n        gridPaneForWellCards.add(SharedObjectsInGui.getWellCard1View(), 0, 0);\r\n        gridPaneForWellCards.add(SharedObjectsInGui.getWellCard2View(), 0, 1);\r\n        gridPaneForWellCards.add(SharedObjectsInGui.getWellCard3View(), 1, 0);\r\n        gridPaneForWellCards.add(SharedObjectsInGui.getWellCard4View(), 1, 1);\r\n        gridPaneForWellCards.add(wellText, 0, 2);\r\n        gridPaneForWellCards.add(wellText2, 1, 2);\r\n\r\n        HBox decks = new HBox();\r\n        Label decksText = new Label(\"      Resource Deck               Gold Deck\");\r\n        decksText.setStyle(\"-fx-font-weight: bold; -fx-text-fill: white\");\r\n\r\n        decks.setSpacing(4.0);\r\n        decks.setPadding(paddingDecks);\r\n        decks.getChildren().addAll(SharedObjectsInGui.getTopCardResourceDeckView(), SharedObjectsInGui.getTopCardGoldDeckView());\r\n\r\n        buttonContainer.setHgap(2);\r\n        buttonContainer.setVgap(2);\r\n        creatingButtons();\r\n        vboxGame.getChildren().addAll(gridPaneForWellCards, decks, decksText, buttonContainer);\r\n        buttonContainer.setDisable(true);\r\n\r\n        VBox secondColumnOfSecondRow = new VBox();\r\n\r\n        chosenCardToPlace.setStyle(\"-fx-text-fill: white;\");\r\n        chosenCardToBePlacedOn.setStyle(\"-fx-text-fill: white;\");\r\n        chosenCorner.setStyle(\"-fx-text-fill: white;\");\r\n        chosenDeckOrWell.setStyle(\"-fx-text-fill: white;\");\r\n\r\n        secondColumnOfSecondRow.getChildren().addAll(chosenCardToPlace, chosenCardToBePlacedOn, chosenCorner, chosenDeckOrWell);\r\n        chosenDeckOrWell.setText(\"Drawing from: \" + wellOrDeck);\r\n\r\n        layout.setRight(vboxGame);\r\n        firstColumnOfSecondRow.getChildren().addAll(handCard1View, handCard2View, handCard3View);\r\n        secondRow.getChildren().addAll(firstColumnOfSecondRow, secondColumnOfSecondRow);\r\n        layout.setBottom(secondRow);\r\n        root.getChildren().add(layout);\r\n        Scene gameScene = new Scene(root, 430, 625);\r\n\r\n        Platform.runLater(() -> primaryStage.setScene(gameScene));\r\n\r\n        if (currentPlayerNickname.equals(clientView.getUserName())) {\r\n            isCurrentPlayerTurn = true;\r\n            waitUntilLastMessage();\r\n            setupGameActions();\r\n            buttonContainer.setDisable(false);\r\n        } else {\r\n            isCurrentPlayerTurn = false;\r\n            waitForTurn(handCard1View, handCard2View, handCard3View);\r\n        }\r\n\r\n    }\r\n\r\n    private void handleCardClick(CardView cardView) {\r\n        if (isCurrentPlayerTurn) {\r\n            setClickedCardView(cardView);\r\n            cornerSelected = cardView.getPosition();\r\n            Integer cardIndex = cardIndices.get(cardView);\r\n            System.out.println(\"Clicked CardView: \" + cardView);\r\n            System.out.println(\"Current cardIndices map:\");\r\n            for (Map.Entry<CardView, Integer> entry : cardIndices.entrySet()) {\r\n                System.out.println(\"Key: \" + entry.getKey() + \", Value: \" + entry.getValue());\r\n            }\r\n\r\n            if (cardIndex != null) {\r\n                indexCardToBePlacedOn = cardIndex;\r\n                System.out.println(\"Card Clicked: indexCardToBePlacedOn = \" + indexCardToBePlacedOn + \", cornerSelected = \" + cornerSelected);\r\n            } else {\r\n                System.out.println(\"Card Clicked: cardIndex not found, cornerSelected = \" + cornerSelected);\r\n            }\r\n            chosenCorner.setText(\"Corner: \" + cornerSelected);\r\n            chosenCardToBePlacedOn.setText(\"Place your card on: \" + indexCardToBePlacedOn);\r\n        } else {\r\n            showAlert(\"Not your turn\", \"It's not your turn yet.\");\r\n        }\r\n    }\r\n\r\n    private void setupGameActions() throws IOException {\r\n       enableOrDisableGameActions();\r\n       playCard.setOnAction(e -> {\r\n            if (isCurrentPlayerTurn) {\r\n                String canIPlaceTheGoldCard=null;\r\n                if (haveToPlay) {\r\n                    if(cornerSelected==null)\r\n                    {\r\n                        showAlert(\"Corner Missing\",\"Please select a corner before playing a card\");\r\n                    }\r\n\r\n                    if(indexForGold!=null && Integer.parseInt(indexForGold)>40  )\r\n                    {\r\n                        System.out.println(\"You chose to play a gold card\");\r\n                        out.println(\"goldGui\");\r\n                        try {\r\n                            canIPlaceTheGoldCard= in.readLine();\r\n                            System.out.println(\"Server response is: \" + canIPlaceTheGoldCard);\r\n                        } catch (IOException ex) {\r\n                            throw new RuntimeException(ex);\r\n                        }\r\n                        if(canIPlaceTheGoldCard.equals(\"NO\"))\r\n                        {\r\n                            showAlert(\"Gold Card NOt Placeable\", \"YOu can't place the gold card beacuse you don't have enough specific seeds\");\r\n                            indexForGold=null;\r\n                            indexCardToPlace=100;\r\n                            haveToDraw=false;\r\n                            return;\r\n                        }\r\n                    }\r\n                    if (cornerSelected!=null && indexCardToPlace < 4) {\r\n                        try {\r\n                            String isTheCardFlipped=null;\r\n                            String actualId=null;\r\n                            switch (indexCardToPlace) {\r\n                                case 0:\r\n                                    handCard1View.setImage(null);\r\n                                    actualId=idHandCard1;\r\n                                    isTheCardFlipped=handCard1View.getId();\r\n                                    break;\r\n                                case 1:\r\n\r\n                                    handCard2View.setImage(null);\r\n                                    actualId=idHandCard2;\r\n                                    isTheCardFlipped=handCard2View.getId();\r\n                                    break;\r\n                                case 2:\r\n\r\n                                    handCard3View.setImage(null);\r\n                                    actualId=idHandCard3;\r\n                                    isTheCardFlipped=handCard3View.getId();\r\n                                    break;\r\n                                default:\r\n                                    System.out.println(\"sono nullo\");\r\n                                    break;\r\n                            }\r\n                            System.out.println(\"Indice della carta che voglio piazzare è: \" +indexCardToPlace);\r\n                            controller.playCardClick(indexCardToBePlacedOn, indexCardToPlace, cornerSelected,isTheCardFlipped);\r\n                            indexCardPlayedFromHand = indexCardToPlace;\r\n                            switch (cornerSelected) {\r\n                                case \"TL\":\r\n                                    placingTopLeftCard(getClickedImageView().getImageView(), gameBoard, indexCardPlayedFromHand);\r\n                                    break;\r\n                                case \"TR\":\r\n                                    placingTopRightCard(getClickedImageView().getImageView(), gameBoard, indexCardPlayedFromHand);\r\n                                    break;\r\n                                case \"BL\":\r\n                                    placingBottomLeftCard(getClickedImageView().getImageView(), gameBoard, indexCardPlayedFromHand);\r\n                                    break;\r\n                                case \"BR\":\r\n                                    placingBottomRightCard(getClickedImageView().getImageView(), gameBoard, indexCardPlayedFromHand);\r\n                                    break;\r\n                                default:\r\n                                    break;\r\n                            }\r\n                            haveToDraw = true;\r\n                            handCard1View.setId(\"Front\");\r\n                            handCard2View.setId(\"Front\");\r\n                            handCard3View.setId(\"Front\");\r\n                            cornerSelected=null;\r\n                            indexCardToPlace=100;\r\n                        } catch (IOException exception) {\r\n                            throw new RuntimeException(exception);\r\n                        }\r\n                        haveToPlay = false;\r\n                    } else {\r\n                        showAlert(\"Action not allowed\", \"Choose the right cards.\");\r\n                    }\r\n                } else {\r\n                    showAlert(\"Action not allowed\", \"You have already played a card.\");\r\n                }\r\n            } else {\r\n                showAlert(\"Not your turn\", \"It's not your turn yet.\");\r\n            }\r\n        });\r\n\r\n        endTurn.setOnMouseClicked(e -> {\r\n            if (isCurrentPlayerTurn) {\r\n                if(!haveToDraw && !haveToPlay){\r\n                    try {\r\n                        savePath();\r\n                        String nextPlayerNickname = controller.endTurn();\r\n                        updateTurnState(nextPlayerNickname.equals(clientView.getUserName()));\r\n                        haveToPlay = true;\r\n                        waitForTurn(handCard1View, handCard2View, handCard3View);\r\n                    } catch (IOException ex) {\r\n                        throw new RuntimeException(ex);\r\n                    }\r\n                }\r\n                else if(haveToDraw){\r\n                    showAlert(\"HavetoDraw\", \"You have to draw a card first\");\r\n                }\r\n                else{\r\n                    showAlert(\"HavetoPlay\", \"You have to place a card first\");\r\n                }\r\n            } else {\r\n                showAlert(\"Not your turn\", \"It's not your turn yet.\");\r\n            }\r\n        });\r\n\r\n        drawCard.setOnAction(e -> {\r\n            if (isCurrentPlayerTurn) {\r\n                if (haveToDraw) {\r\n                    try {\r\n                        controller.drawCard(wellOrDeck, chosenDeckForDrawingNewCard, indexCardFromWellSelected);\r\n                        Image drawnCardImage = null;\r\n                        String idTopCard = null;\r\n\r\n                        if (wellOrDeck.equals(\"deck\")) {\r\n                            System.out.println(wellOrDeck);\r\n                            if (chosenDeckForDrawingNewCard.equals(\"resource\")) {\r\n                                drawnCardImage = createNewPathForImages(pathForResourceCardFront(idTopCardResourceDeck));\r\n                                idTopCard = idTopCardResourceDeck;\r\n                            } else if (chosenDeckForDrawingNewCard.equals(\"gold\")) {\r\n                                drawnCardImage = createNewPathForImages(pathForGoldCardFront(idTopCardGoldDeck));\r\n                                idTopCard = idTopCardGoldDeck;\r\n                            }\r\n                        } else if (wellOrDeck.equals(\"well\")) {\r\n                            System.out.println(wellOrDeck);\r\n                            drawnCardImage = wellCardSelected;\r\n                            idTopCard = idWellCardSelected;\r\n                        }\r\n                        System.out.println(idTopCard);\r\n                        if (drawnCardImage != null && idTopCard != null) {\r\n                            switch (indexCardPlayedFromHand) {\r\n                                case 0:\r\n                                    handCard1View.setImage(drawnCardImage);\r\n                                    pathHandCard1 = \"/ImmaginiCodex/CarteFront/\" + checkType(idTopCard) + \"/\" + idTopCard + \".png\";\r\n                                    idHandCard1 = idTopCard;\r\n                                    break;\r\n                                case 1:\r\n                                    handCard2View.setImage(drawnCardImage);\r\n                                    pathHandCard2 = \"/ImmaginiCodex/CarteFront/\" + checkType(idTopCard) + \"/\" + idTopCard + \".png\";\r\n                                    idHandCard2 = idTopCard;\r\n                                    break;\r\n                                case 2:\r\n                                    handCard3View.setImage(drawnCardImage);\r\n                                    pathHandCard3 = \"/ImmaginiCodex/CarteFront/\" + checkType(idTopCard) + \"/\" + idTopCard + \".png\";\r\n                                    idHandCard3 = idTopCard;\r\n                                    break;\r\n                            }\r\n                            System.out.println(\"idHandCard\" + (indexCardPlayedFromHand + 1) + \" = \" + idTopCard);\r\n\r\n                            initializeWell(); //firtwellid,secondwellid,....\r\n                            String newPath1= \"/ImmaginiCodex/CarteFront/Resource/\"+ SharedObjectsInGui.getIdCard1()+\".png\";\r\n                            Image newImage1= new Image(Objects.requireNonNull(getClass().getResourceAsStream(newPath1)));\r\n                            SharedObjectsInGui.getWellCard1View().setImage(newImage1);\r\n                            String newPath2= \"/ImmaginiCodex/CarteFront/Resource/\"+ SharedObjectsInGui.getIdCard2()+\".png\";\r\n                            Image newImage2= new Image(Objects.requireNonNull(getClass().getResourceAsStream(newPath2)));\r\n                            SharedObjectsInGui.getWellCard2View().setImage(newImage2);\r\n                            String newPath3= \"/ImmaginiCodex/CarteFront/Gold/\"+ SharedObjectsInGui.getIdCard3()+\".png\";\r\n                            Image newImage3= new Image(Objects.requireNonNull(getClass().getResourceAsStream(newPath3)));\r\n                            SharedObjectsInGui.getWellCard3View().setImage(newImage3);\r\n                            String newPath4= \"/ImmaginiCodex/CarteFront/Gold/\"+ SharedObjectsInGui.getIdCard4()+\".png\";\r\n                            Image newImage4= new Image(Objects.requireNonNull(getClass().getResourceAsStream(newPath4)));\r\n                            SharedObjectsInGui.getWellCard4View().setImage(newImage4);\r\n                            updateResourceDeckTopCard();\r\n                            updatedGoldDeckTopCard();\r\n                            haveToDraw = false;\r\n                        } else {\r\n                            showAlert(\"Action not allowed\", \"Yoh have to choose a card to draw\");\r\n                        }\r\n                    } catch (IOException ex) {\r\n                        throw new RuntimeException(ex);\r\n                    }\r\n                } else {\r\n                    showAlert(\"Action not allowed\", \"You can't draw any card now.\");\r\n                }\r\n            } else {\r\n                showAlert(\"Not your turn\", \"It's not your turn yet.\");\r\n            }\r\n        });\r\n\r\n        flipCardToBack.setOnAction(e -> {\r\n            if (isCurrentPlayerTurn) {\r\n                switch (indexCardToPlace) {\r\n                    case 0:\r\n                        handCard1View.setImage(flipToBackCard(idHandCard1));\r\n                        handCard1View.setId(\"Back\");\r\n                        break;\r\n                    case 1:\r\n                        handCard2View.setImage(flipToBackCard(idHandCard2));\r\n                        handCard2View.setId(\"Back\");\r\n                        break;\r\n                    case 2:\r\n                        handCard3View.setImage(flipToBackCard(idHandCard3));\r\n                        handCard3View.setId(\"Back\");\r\n                        break;\r\n                    default:\r\n                        showAlert(\"Invalid action\", \"You chose an unflippable card.\");\r\n                        break;\r\n                }\r\n            } else {\r\n                flipCardToBack.setDisable(true);\r\n                showAlert(\"Not your turn\", \"It's not your turn yet.\");\r\n            }\r\n        });\r\n\r\n        flipCardToFront.setOnAction(e -> {\r\n            if (isCurrentPlayerTurn) {\r\n                switch (indexCardToPlace) {\r\n                    case 0:\r\n                        handCard1View.setImage(flipCardToFront(idHandCard1));\r\n                        handCard1View.setId(\"Front\");\r\n                        break;\r\n                    case 1:\r\n                        handCard2View.setImage(flipCardToFront(idHandCard2));\r\n                        handCard2View.setId(\"Front\");\r\n                        break;\r\n                    case 2:\r\n                        handCard3View.setImage(flipCardToFront(idHandCard3));\r\n                        handCard3View.setId(\"Front\");\r\n                        break;\r\n                    default:\r\n                        showAlert(\"Invalid action\", \"You chose an unflippable card.\");\r\n                        break;\r\n                }\r\n            } else {\r\n                flipCardToFront.setDisable(true);\r\n                showAlert(\"Not your turn\", \"It's not your turn yet.\");\r\n            }\r\n        });\r\n\r\n        handCard1View.setOnMouseClicked(event -> {\r\n            if (isCurrentPlayerTurn) {\r\n                indexCardToPlace = 0;\r\n                chosenCardToPlace.setText(\"First card of your hand\");\r\n\r\n                if(handCard1View.getId()==null|| handCard1View.getId().equals(\"Front\"))\r\n                {\r\n                    pathChosen = pathHandCard1;\r\n                    System.out.println(\"Front\");\r\n                }\r\n                else{\r\n                    pathChosen=pathFlipped;\r\n                    System.out.println(pathChosen);\r\n                    System.out.println(\"Back\");\r\n                }\r\n                if(Integer.parseInt(idHandCard1)<41)\r\n                {\r\n                    System.out.println(\"ResourceCard\");\r\n                }\r\n                else {System.out.println(\"GoldCard\");\r\n                    indexForGold=idHandCard1;\r\n                }\r\n\r\n\r\n            } else {\r\n                showAlert(\"Not your turn\", \"It's not your turn yet.\");\r\n            }\r\n        });\r\n\r\n        handCard2View.setOnMouseClicked(event -> {\r\n            if (isCurrentPlayerTurn) {\r\n                indexCardToPlace = 1;\r\n                chosenCardToPlace.setText(\"Second card of your hand\");\r\n                pathChosen = pathHandCard2;\r\n                if(handCard2View.getId()==null|| handCard2View.getId().equals(\"Front\"))\r\n                {\r\n                    pathChosen = pathHandCard2;\r\n                    System.out.println(\"Front\");\r\n                }\r\n                else{\r\n                    pathChosen=pathFlipped;\r\n                    System.out.println(pathChosen);\r\n                    System.out.println(\"Back\");\r\n                }\r\n                if(Integer.parseInt(idHandCard2)<41)\r\n                {\r\n                    System.out.println(\"ResourceCard\");\r\n                }\r\n                else {System.out.println(\"GOldCard\");\r\n                    indexForGold=idHandCard2;\r\n                }\r\n            } else {\r\n                showAlert(\"Not your turn\", \"It's not your turn yet.\");\r\n            }\r\n        });\r\n\r\n        handCard3View.setOnMouseClicked(event -> {\r\n            if (isCurrentPlayerTurn) {\r\n                indexCardToPlace = 2;\r\n                chosenCardToPlace.setText(\"Third card of your hand\");\r\n                pathChosen = pathHandCard3;\r\n                if(handCard3View.getId()==null|| handCard3View.getId().equals(\"Front\"))\r\n                {\r\n                    pathChosen = pathHandCard3;\r\n                    System.out.println(\"Front\");\r\n                }\r\n                else{\r\n                    pathChosen=pathFlipped;\r\n                    System.out.println(pathChosen);\r\n                    System.out.println(\"Back\");\r\n                }\r\n                if(Integer.parseInt(idHandCard3)<41)\r\n                {\r\n                    System.out.println(\"ResourceCard\");\r\n                }\r\n                else {System.out.println(\"GoldCard\");\r\n                indexForGold=idHandCard3;\r\n                }\r\n            } else {\r\n                showAlert(\"Not your turn\", \"It's not your turn yet.\");\r\n            }\r\n        });\r\n\r\n        seeYourSpecificSeeds.setOnMouseClicked(e -> {\r\n            if (isCurrentPlayerTurn) {\r\n                try {\r\n                    String yourSeeds = controller.showSpecificSeed();\r\n                    showAlert(\"Your seeds at the moment\", yourSeeds);\r\n                } catch (IOException ex) {\r\n                    throw new RuntimeException(ex);\r\n                }\r\n            } else {\r\n                showAlert(\"Not your turn\", \"It's not your turn yet.\");\r\n            }\r\n        });\r\n\r\n        seeYourPoints.setOnMouseClicked(e -> {\r\n            if (isCurrentPlayerTurn) {\r\n                try {\r\n                    boardPointsScene = new BoardPointsScene(primaryStage, out, socket, in, clientView);\r\n                    boardPointsScene.popupBoardPoints();\r\n                } catch (IOException ex) {\r\n                    throw new RuntimeException(ex);\r\n                }\r\n            } else {\r\n                seeYourPoints.setDisable(true);\r\n                showAlert(\"Not your turn\", \"It's not your turn yet.\");\r\n            }\r\n        });\r\n\r\n        seeOtherPlayersBoards.setOnMouseClicked(e -> {\r\n            if (isCurrentPlayerTurn) {\r\n                showAlert(\"Action unavailable\", \"This action is currently not implemented.\");\r\n            } else {\r\n                showAlert(\"Not your turn\", \"It's not your turn yet.\");\r\n            }\r\n        });\r\n\r\n        showObjective.setOnMouseClicked(e -> {\r\n            if (isCurrentPlayerTurn) {\r\n                try {\r\n                    objectiveScene = new ShowObjectiveScene(primaryStage, out, socket, in);\r\n                    firstCommonId = controller.firstCommon();\r\n                    secondCommonId = controller.secondCommon();\r\n                    secretId = controller.secretCard();\r\n                    objectiveScene.popupObjectiveScene(firstCommonId, secondCommonId, secretId);\r\n\r\n                } catch (IOException ex) {\r\n                    throw new RuntimeException(ex);\r\n                }\r\n            } else {\r\n                showObjective.setDisable(true);\r\n                showAlert(\"Not your turn\", \"It's not your turn yet.\");\r\n            }\r\n        });\r\n\r\n        quit.setOnMouseClicked(e -> {\r\n            if (isCurrentPlayerTurn) {\r\n                if (haveToDraw) {\r\n                    showAlert(\"Quit\", \"You can't quit right now, draw any card.\");\r\n                } else {\r\n                    String nextPlayerNickname;\r\n                    try {\r\n                        nextPlayerNickname = controller.endTurn();\r\n                    } catch (IOException ex) {\r\n                        throw new RuntimeException(ex);\r\n                    }\r\n                    updateTurnState(nextPlayerNickname.equals(clientView.getUserName()));\r\n                    haveToPlay = true;\r\n                    try {\r\n                        controller.quit(primaryStage);\r\n                    } catch (IOException ex) {\r\n                        throw new RuntimeException(ex);\r\n                    }\r\n                }\r\n            } else {\r\n                try {\r\n                    controller.quit(primaryStage);\r\n                } catch (IOException ex) {\r\n                    throw new RuntimeException(ex);\r\n                }\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    private void waitForTurn(ImageView handCard1View, ImageView handCard2View, ImageView handCard3View) {\r\n        new Thread(() -> {\r\n            try {\r\n                controller.waitForTurn(clientView.getUserName(), primaryStage);\r\n                Platform.runLater(() -> {\r\n                    updateTurnState(true);\r\n                    try {\r\n                        System.out.println(\"In Gamescenecontroller\");\r\n                        System.out.println(in.readLine()); //Fine turno\r\n                        updateGUI();\r\n                        setupGameActions();\r\n\r\n\r\n                    } catch (IOException e) {\r\n                        e.printStackTrace();\r\n                    }\r\n                });\r\n            } catch (IOException e) {\r\n                e.printStackTrace();\r\n            }\r\n        }).start();\r\n    }\r\n\r\n    private void showAlert(String title, String message) {\r\n        Alert alert = new Alert(Alert.AlertType.INFORMATION);\r\n        alert.setTitle(title);\r\n        alert.setHeaderText(null);\r\n        alert.setContentText(message);\r\n        alert.showAndWait();\r\n    }\r\n\r\n    private void enableOrDisableGameActions() {\r\n\r\n        if(!isCurrentPlayerTurn){\r\n//            playCard.setDisable(true);\r\n//            drawCard.setDisable(true);\r\n//            flipCardToBack.setDisable(true);\r\n//            flipCardToFront.setDisable(true);\r\n//            seeYourSpecificSeeds.setDisable(true);\r\n//            seeOtherPlayersBoards.setDisable(true);\r\n//            showObjective.setDisable(true);\r\n//            seeYourPoints.setDisable(true);\r\n//            endTurn.setDisable(true);\r\n            buttonContainer.setDisable(true);\r\n        }\r\n        if(isCurrentPlayerTurn){\r\n            buttonContainer.setDisable(false);\r\n        }\r\n\r\n    }\r\n\r\n    private void updateTurnState(boolean isCurrentPlayerTurn) {\r\n        this.isCurrentPlayerTurn = isCurrentPlayerTurn;\r\n        enableOrDisableGameActions();\r\n    }\r\n\r\n    private Image flipToBackCard(String stringId) {\r\n        int id = Integer.parseInt(stringId);\r\n        if (id >= 1 && id <= 40) {\r\n            pathFlipped = \"/ImmaginiCodex/CarteBack/Resource/\" + id + \".png\";\r\n            return new Image(Objects.requireNonNull(getClass().getResourceAsStream(pathFlipped)));\r\n        } else if (id > 40 && id <= 80) {\r\n            pathFlipped = \"/ImmaginiCodex/CarteBack/Gold/\" + id + \".png\";\r\n            return new Image(Objects.requireNonNull(getClass().getResourceAsStream(pathFlipped)));\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private Image flipCardToFront(String stringId) {\r\n        int id = Integer.parseInt(stringId);\r\n        if (id >= 1 && id <= 40) {\r\n            pathFlipped = \"/ImmaginiCodex/CarteFront/Resource/\" + id + \".png\";\r\n            return new Image(Objects.requireNonNull(getClass().getResourceAsStream(pathFlipped)));\r\n        } else if (id > 40 && id <= 80) {\r\n             pathFlipped = \"/ImmaginiCodex/CarteFront/Gold/\" + id + \".png\";\r\n            return new Image(Objects.requireNonNull(getClass().getResourceAsStream(pathFlipped)));\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private boolean containsColor(Image cornerImage, Color targetColor){\r\n        PixelReader pixelReader = cornerImage.getPixelReader();\r\n        if(pixelReader == null){\r\n            return false;\r\n        }\r\n        int width = (int) cornerImage.getWidth();\r\n        int height = (int) cornerImage.getHeight();\r\n\r\n        for(int y = 0; y < height; y++){\r\n            for(int x = 0; x < width; x++){\r\n                Color color = pixelReader.getColor(x, y);\r\n                if(color.equals(targetColor)){\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public GridPane subnettingEachImage(Image image, String cardId) {\r\n        double width = image.getWidth() / 3;\r\n        double height = image.getHeight() / 3;\r\n        int heightInt = (int) height;\r\n        int widthInt = (int) width;\r\n        Image imageTL = new WritableImage(image.getPixelReader(), 0, 0, widthInt, heightInt);\r\n        Image imageTC = new WritableImage(image.getPixelReader(), widthInt, 0, widthInt, heightInt);\r\n        Image imageTR = new WritableImage(image.getPixelReader(), 2 * widthInt, 0, widthInt, heightInt);\r\n        Image imageLC = new WritableImage(image.getPixelReader(), 0, heightInt, widthInt, heightInt);\r\n        Image imageCC = new WritableImage(image.getPixelReader(), widthInt, heightInt, widthInt, heightInt);\r\n        Image imageRC = new WritableImage(image.getPixelReader(), 2 * widthInt, heightInt, widthInt, heightInt);\r\n        Image imageBL = new WritableImage(image.getPixelReader(), 0, 2 * heightInt, widthInt, heightInt);\r\n        Image imageBC = new WritableImage(image.getPixelReader(), widthInt, 2 * heightInt, widthInt, heightInt);\r\n        Image imageBR = new WritableImage(image.getPixelReader(), 2 * widthInt, 2 * heightInt, widthInt, heightInt);\r\n\r\n        ImageView imageViewTL = new ImageView(imageTL);\r\n        ImageView imageViewTC = new ImageView(imageTC);\r\n        ImageView imageViewTR = new ImageView(imageTR);\r\n        ImageView imageViewLC = new ImageView(imageLC);\r\n        ImageView imageViewCC = new ImageView(imageCC);\r\n        ImageView imageViewRC = new ImageView(imageRC);\r\n        ImageView imageViewBL = new ImageView(imageBL);\r\n        ImageView imageViewBC = new ImageView(imageBC);\r\n        ImageView imageViewBR = new ImageView(imageBR);\r\n\r\n        imageViewTL.setFitWidth(50);\r\n        imageViewTL.setPreserveRatio(true);\r\n        imageViewTC.setFitWidth(50);\r\n        imageViewTC.setPreserveRatio(true);\r\n        imageViewTR.setFitWidth(50);\r\n        imageViewTR.setPreserveRatio(true);\r\n        imageViewLC.setFitWidth(50);\r\n        imageViewLC.setPreserveRatio(true);\r\n        imageViewCC.setFitWidth(50);\r\n        imageViewCC.setPreserveRatio(true);\r\n        imageViewRC.setFitWidth(50);\r\n        imageViewRC.setPreserveRatio(true);\r\n        imageViewBL.setFitWidth(50);\r\n        imageViewBL.setPreserveRatio(true);\r\n        imageViewBC.setFitWidth(50);\r\n        imageViewBC.setPreserveRatio(true);\r\n        imageViewBR.setFitWidth(50);\r\n        imageViewBR.setPreserveRatio(true);\r\n\r\n        CardView tlCardView = new CardView(imageViewTL, cardId, \"TL\");\r\n        CardView tcCardView = new CardView(imageViewTC, cardId, \"TC\");\r\n        CardView trCardView = new CardView(imageViewTR, cardId, \"TR\");\r\n        CardView lcCardView = new CardView(imageViewLC, cardId, \"LC\");\r\n        CardView ccCardView = new CardView(imageViewCC, cardId, \"CC\");\r\n        CardView rcCardView = new CardView(imageViewRC, cardId, \"RC\");\r\n        CardView blCardView = new CardView(imageViewBL, cardId, \"BL\");\r\n        CardView bcCardView = new CardView(imageViewBC, cardId, \"BC\");\r\n        CardView brCardView = new CardView(imageViewBR, cardId, \"BR\");\r\n\r\n        allCardViews.add(tlCardView);\r\n        allCardViews.add(tcCardView);\r\n        allCardViews.add(trCardView);\r\n        allCardViews.add(lcCardView);\r\n        allCardViews.add(ccCardView);\r\n        allCardViews.add(rcCardView);\r\n        allCardViews.add(blCardView);\r\n        allCardViews.add(bcCardView);\r\n        allCardViews.add(brCardView);\r\n\r\n        imageViewTL.setOnMouseClicked(event -> handleCardClick(tlCardView));\r\n        imageViewTR.setOnMouseClicked(event -> handleCardClick(trCardView));\r\n        imageViewBL.setOnMouseClicked(event -> handleCardClick(blCardView));\r\n        imageViewBR.setOnMouseClicked(event -> handleCardClick(brCardView));\r\n\r\n        if(!containsColor(imageTL, targetColor)){\r\n            imageViewTL.setDisable(true);\r\n        }\r\n        if(!containsColor(imageTR, targetColor)){\r\n            imageViewTR.setDisable(true);\r\n        }\r\n        if(!containsColor(imageBL, targetColor)){\r\n            imageViewBL.setDisable(true);\r\n        }\r\n        if(!containsColor(imageBR, targetColor)){\r\n            imageViewBR.setDisable(true);\r\n        }\r\n\r\n        GridPane gridPane = new GridPane();\r\n        gridPane.setPadding(new Insets(0));\r\n        gridPane.setHgap(0);\r\n        gridPane.setVgap(0);\r\n\r\n        ColumnConstraints col1 = new ColumnConstraints();\r\n        col1.setPrefWidth(100); // Imposta la larghezza preferita della prima colonna\r\n        ColumnConstraints col2 = new ColumnConstraints();\r\n        col2.setPrefWidth(150); // Imposta la larghezza preferita della seconda colonna\r\n        ColumnConstraints col3 = new ColumnConstraints();\r\n        col3.setPrefWidth(200); // Imposta la larghezza preferita della terza colonna\r\n\r\n        // Aggiungere i constraints delle colonne alla GridPane\r\n        gridPane.getColumnConstraints().addAll(col1, col2, col3);\r\n\r\n        // Definire le dimensioni delle righe\r\n        RowConstraints row1 = new RowConstraints();\r\n        row1.setPrefHeight(100); // Imposta l'altezza preferita della prima riga\r\n        RowConstraints row2 = new RowConstraints();\r\n        row2.setPrefHeight(150); // Imposta l'altezza preferita della seconda riga\r\n        RowConstraints row3 = new RowConstraints();\r\n        row3.setPrefHeight(200); // Imposta l'altezza preferita della terza riga\r\n\r\n        // Aggiungere i constraints delle righe alla GridPane\r\n        gridPane.getRowConstraints().addAll(row1, row2, row3);\r\n\r\n\r\n\r\n        gridPane.add(imageViewTL, 0, 0);\r\n        gridPane.add(imageViewTC, 1, 0);\r\n        gridPane.add(imageViewTR, 2, 0);\r\n        gridPane.add(imageViewLC, 0,1);\r\n        gridPane.add(imageViewCC, 1,1);\r\n        gridPane.add(imageViewRC, 2, 1);\r\n        gridPane.add(imageViewBL, 0, 2);\r\n        gridPane.add(imageViewBC, 1, 2);\r\n        gridPane.add(imageViewBR, 2, 2);\r\n\r\n        return gridPane;\r\n    }\r\n\r\n    public void placingBottomRightCard(ImageView cardOnTheBoard, GridPane board, int id) {\r\n\r\n        int lastIndex=nextCardIndex;\r\n        nextCardIndex++;\r\n        Image newImage = new Image(Objects.requireNonNull(getClass().getResourceAsStream(pathChosen)));\r\n        System.out.println(pathChosen);\r\n        int x = getX(cardOnTheBoard);\r\n        int y = getY(cardOnTheBoard);\r\n        GridPane gridPanePlacingOn = subnettingEachImage(newImage, String.valueOf(id));\r\n\r\n        ImageView TL = (ImageView) gridPanePlacingOn.getChildren().get(0);\r\n        ImageView TC = (ImageView) gridPanePlacingOn.getChildren().get(1);\r\n        ImageView TR = (ImageView) gridPanePlacingOn.getChildren().get(2);\r\n        ImageView LC = (ImageView) gridPanePlacingOn.getChildren().get(3);\r\n        ImageView CC = (ImageView) gridPanePlacingOn.getChildren().get(4);\r\n        ImageView RC = (ImageView) gridPanePlacingOn.getChildren().get(5);\r\n        ImageView BL = (ImageView) gridPanePlacingOn.getChildren().get(6);\r\n        ImageView BC = (ImageView) gridPanePlacingOn.getChildren().get(7);\r\n        ImageView BR = (ImageView) gridPanePlacingOn.getChildren().get(8);\r\n\r\n        TL.setPickOnBounds(true);\r\n        TR.setPickOnBounds(true);\r\n        BL.setPickOnBounds(true);\r\n        BR.setPickOnBounds(true);\r\n\r\n        board.add(TL, y, x);\r\n        board.add(TC, (y + 1), x);\r\n        board.add(TR, (y + 2), x);\r\n\r\n        board.add(LC, y, (x + 1));\r\n        board.add(CC, (y + 1), (x + 1));\r\n        board.add(RC, (y + 2), (x + 1));\r\n\r\n        board.add(BL, y, (x + 2));\r\n        board.add(BC, (y + 1), (x + 2));\r\n        board.add(BR, (y + 2), (x + 2));\r\n\r\n        allCardViews.add(new CardView(TL, String.valueOf(id), \"TL\"));\r\n        allCardViews.add(new CardView(TC, String.valueOf(id), \"TC\"));\r\n        allCardViews.add(new CardView(TR, String.valueOf(id), \"TR\"));\r\n        allCardViews.add(new CardView(LC, String.valueOf(id), \"LC\"));\r\n        allCardViews.add(new CardView(CC, String.valueOf(id), \"CC\"));\r\n        allCardViews.add(new CardView(RC, String.valueOf(id), \"RC\"));\r\n        allCardViews.add(new CardView(BL, String.valueOf(id), \"BL\"));\r\n        allCardViews.add(new CardView(BC, String.valueOf(id), \"BC\"));\r\n        allCardViews.add(new CardView(BR, String.valueOf(id), \"BR\"));\r\n\r\n        cardIndices.put(new CardView(TL, String.valueOf(id), \"TL\"), nextCardIndex);\r\n        cardIndices.put(new CardView(TC, String.valueOf(id), \"TC\"), nextCardIndex);\r\n        cardIndices.put(new CardView(TR, String.valueOf(id), \"TR\"), nextCardIndex);\r\n        cardIndices.put(new CardView(LC, String.valueOf(id), \"LC\"), nextCardIndex);\r\n        cardIndices.put(new CardView(CC, String.valueOf(id), \"CC\"), nextCardIndex);\r\n        cardIndices.put(new CardView(RC, String.valueOf(id), \"RC\"), nextCardIndex);\r\n        cardIndices.put(new CardView(BL, String.valueOf(id), \"BL\"), nextCardIndex);\r\n        cardIndices.put(new CardView(BC, String.valueOf(id), \"BC\"), nextCardIndex);\r\n        cardIndices.put(new CardView(BR, String.valueOf(id), \"BR\"), nextCardIndex);\r\n        TL.setDisable(true);\r\n        for (CardView cardView : allCardViews) {\r\n            if (cardIndices.get(cardView) == lastIndex && cardView.getPosition().equals(\"BR\")) {\r\n                cardView.getImageView().setDisable(true);\r\n                break;\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    public void placingBottomLeftCard(ImageView cardOnTheBoard, GridPane board, int id) {\r\n        int lastIndex=nextCardIndex;\r\n        nextCardIndex++;\r\n        Image newImage = new Image(Objects.requireNonNull(getClass().getResourceAsStream(pathChosen)));\r\n        int x = getX(cardOnTheBoard);\r\n        int y = getY(cardOnTheBoard);\r\n        GridPane gridPanePlacingOn = subnettingEachImage(newImage, String.valueOf(id));\r\n\r\n        ImageView TL = (ImageView) gridPanePlacingOn.getChildren().get(0);\r\n        ImageView TC = (ImageView) gridPanePlacingOn.getChildren().get(1);\r\n        ImageView TR = (ImageView) gridPanePlacingOn.getChildren().get(2);\r\n        ImageView LC = (ImageView) gridPanePlacingOn.getChildren().get(3);\r\n        ImageView CC = (ImageView) gridPanePlacingOn.getChildren().get(4);\r\n        ImageView RC = (ImageView) gridPanePlacingOn.getChildren().get(5);\r\n        ImageView BL = (ImageView) gridPanePlacingOn.getChildren().get(6);\r\n        ImageView BC = (ImageView) gridPanePlacingOn.getChildren().get(7);\r\n        ImageView BR = (ImageView) gridPanePlacingOn.getChildren().get(8);\r\n\r\n        TL.setPickOnBounds(true);\r\n        TR.setPickOnBounds(true);\r\n        BL.setPickOnBounds(true);\r\n        BR.setPickOnBounds(true);\r\n\r\n        board.add(TL, (y - 2), x);\r\n        board.add(TC, (y - 1), x);\r\n        board.add(TR, y, x);\r\n\r\n        board.add(LC, (y - 2), (x + 1));\r\n        board.add(CC, (y - 1), (x + 1));\r\n        board.add(RC, y, (x + 1));\r\n\r\n        board.add(BL, (y - 2), (x + 2));\r\n        board.add(BC, (y - 1), (x + 2));\r\n        board.add(BR, y, (x + 2));\r\n\r\n        allCardViews.add(new CardView(TL, String.valueOf(id), \"TL\"));\r\n        allCardViews.add(new CardView(TC, String.valueOf(id), \"TC\"));\r\n        allCardViews.add(new CardView(TR, String.valueOf(id), \"TR\"));\r\n        allCardViews.add(new CardView(LC, String.valueOf(id), \"LC\"));\r\n        allCardViews.add(new CardView(CC, String.valueOf(id), \"CC\"));\r\n        allCardViews.add(new CardView(RC, String.valueOf(id), \"RC\"));\r\n        allCardViews.add(new CardView(BL, String.valueOf(id), \"BL\"));\r\n        allCardViews.add(new CardView(BC, String.valueOf(id), \"BC\"));\r\n        allCardViews.add(new CardView(BR, String.valueOf(id), \"BR\"));\r\n\r\n        cardIndices.put(new CardView(TL, String.valueOf(id), \"TL\"), nextCardIndex);\r\n        cardIndices.put(new CardView(TC, String.valueOf(id), \"TC\"), nextCardIndex);\r\n        cardIndices.put(new CardView(TR, String.valueOf(id), \"TR\"), nextCardIndex);\r\n        cardIndices.put(new CardView(LC, String.valueOf(id), \"LC\"), nextCardIndex);\r\n        cardIndices.put(new CardView(CC, String.valueOf(id), \"CC\"), nextCardIndex);\r\n        cardIndices.put(new CardView(RC, String.valueOf(id), \"RC\"), nextCardIndex);\r\n        cardIndices.put(new CardView(BL, String.valueOf(id), \"BL\"), nextCardIndex);\r\n        cardIndices.put(new CardView(BC, String.valueOf(id), \"BC\"), nextCardIndex);\r\n        cardIndices.put(new CardView(BR, String.valueOf(id), \"BR\"), nextCardIndex);\r\n        TR.setDisable(true);\r\n        for (CardView cardView : allCardViews) {\r\n            if (cardIndices.get(cardView) == lastIndex && cardView.getPosition().equals(\"BL\")) {\r\n                cardView.getImageView().setDisable(true);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    public void placingTopLeftCard(ImageView cardOnTheBoard, GridPane board, int id) {\r\n        int lastIndex=nextCardIndex;\r\n        nextCardIndex++;\r\n        Image newImage = new Image(Objects.requireNonNull(getClass().getResourceAsStream(pathChosen)));\r\n        int x = getX(cardOnTheBoard);\r\n        int y = getY(cardOnTheBoard);\r\n        GridPane gridPanePlacingOn = subnettingEachImage(newImage, String.valueOf(id));\r\n\r\n        ImageView TL = (ImageView) gridPanePlacingOn.getChildren().get(0);\r\n        ImageView TC = (ImageView) gridPanePlacingOn.getChildren().get(1);\r\n        ImageView TR = (ImageView) gridPanePlacingOn.getChildren().get(2);\r\n        ImageView LC = (ImageView) gridPanePlacingOn.getChildren().get(3);\r\n        ImageView CC = (ImageView) gridPanePlacingOn.getChildren().get(4);\r\n        ImageView RC = (ImageView) gridPanePlacingOn.getChildren().get(5);\r\n        ImageView BL = (ImageView) gridPanePlacingOn.getChildren().get(6);\r\n        ImageView BC = (ImageView) gridPanePlacingOn.getChildren().get(7);\r\n        ImageView BR = (ImageView) gridPanePlacingOn.getChildren().get(8);\r\n\r\n        TL.setPickOnBounds(true);\r\n        TR.setPickOnBounds(true);\r\n        BL.setPickOnBounds(true);\r\n        BR.setPickOnBounds(true);\r\n\r\n        board.add(TL, (y - 2), (x - 2));\r\n        board.add(TC, (y - 1), (x - 2));\r\n        board.add(TR, y, (x - 2));\r\n\r\n        board.add(LC, (y - 2), (x - 1));\r\n        board.add(CC, (y - 1), (x - 1));\r\n        board.add(RC, y, (x - 1));\r\n\r\n        board.add(BL, (y - 2), x);\r\n        board.add(BC, (y - 1), x);\r\n        board.add(BR, y, x);\r\n\r\n        allCardViews.add(new CardView(TL, String.valueOf(id), \"TL\"));\r\n        allCardViews.add(new CardView(TC, String.valueOf(id), \"TC\"));\r\n        allCardViews.add(new CardView(TR, String.valueOf(id), \"TR\"));\r\n        allCardViews.add(new CardView(LC, String.valueOf(id), \"LC\"));\r\n        allCardViews.add(new CardView(CC, String.valueOf(id), \"CC\"));\r\n        allCardViews.add(new CardView(RC, String.valueOf(id), \"RC\"));\r\n        allCardViews.add(new CardView(BL, String.valueOf(id), \"BL\"));\r\n        allCardViews.add(new CardView(BC, String.valueOf(id), \"BC\"));\r\n        allCardViews.add(new CardView(BR, String.valueOf(id), \"BR\"));\r\n\r\n        cardIndices.put(new CardView(TL, String.valueOf(id), \"TL\"), nextCardIndex);\r\n        cardIndices.put(new CardView(TC, String.valueOf(id), \"TC\"), nextCardIndex);\r\n        cardIndices.put(new CardView(TR, String.valueOf(id), \"TR\"), nextCardIndex);\r\n        cardIndices.put(new CardView(LC, String.valueOf(id), \"LC\"), nextCardIndex);\r\n        cardIndices.put(new CardView(CC, String.valueOf(id), \"CC\"), nextCardIndex);\r\n        cardIndices.put(new CardView(RC, String.valueOf(id), \"RC\"), nextCardIndex);\r\n        cardIndices.put(new CardView(BL, String.valueOf(id), \"BL\"), nextCardIndex);\r\n        cardIndices.put(new CardView(BC, String.valueOf(id), \"BC\"), nextCardIndex);\r\n        cardIndices.put(new CardView(BR, String.valueOf(id), \"BR\"), nextCardIndex);\r\n        BR.setDisable(true);\r\n        for (CardView cardView : allCardViews) {\r\n            if (cardIndices.get(cardView) == lastIndex && cardView.getPosition().equals(\"TL\")) {\r\n                cardView.getImageView().setDisable(true);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    public void placingTopRightCard(ImageView cardOnTheBoard, GridPane board, int id) {\r\n        int lastIndex=nextCardIndex;\r\n        nextCardIndex++;\r\n        Image newImage = new Image(Objects.requireNonNull(getClass().getResourceAsStream(pathChosen)));\r\n        int x = getX(cardOnTheBoard);\r\n        int y = getY(cardOnTheBoard);\r\n        GridPane gridPanePlacingOn = subnettingEachImage(newImage, String.valueOf(id));\r\n        ImageView TL = (ImageView) gridPanePlacingOn.getChildren().get(0);\r\n        ImageView TC = (ImageView) gridPanePlacingOn.getChildren().get(1);\r\n        ImageView TR = (ImageView) gridPanePlacingOn.getChildren().get(2);\r\n        ImageView LC = (ImageView) gridPanePlacingOn.getChildren().get(3);\r\n        ImageView CC = (ImageView) gridPanePlacingOn.getChildren().get(4);\r\n        ImageView RC = (ImageView) gridPanePlacingOn.getChildren().get(5);\r\n        ImageView BL = (ImageView) gridPanePlacingOn.getChildren().get(6);\r\n        ImageView BC = (ImageView) gridPanePlacingOn.getChildren().get(7);\r\n        ImageView BR = (ImageView) gridPanePlacingOn.getChildren().get(8);\r\n\r\n        TL.setPickOnBounds(true);\r\n        TR.setPickOnBounds(true);\r\n        BL.setPickOnBounds(true);\r\n        BR.setPickOnBounds(true);\r\n\r\n        board.add(TL, y, (x - 2));\r\n        board.add(TC, (y + 1), (x - 2));\r\n        board.add(TR, (y + 2), (x - 2));\r\n\r\n        board.add(LC, y, (x - 1));\r\n        board.add(CC, (y + 1), (x - 1));\r\n        board.add(RC, (y + 2), (x - 1));\r\n\r\n        board.add(BL, y, x);\r\n        board.add(BC, (y + 1), x);\r\n        board.add(BR, (y + 2), x);\r\n\r\n        allCardViews.add(new CardView(TL, String.valueOf(id), \"TL\"));\r\n        allCardViews.add(new CardView(TC, String.valueOf(id), \"TC\"));\r\n        allCardViews.add(new CardView(TR, String.valueOf(id), \"TR\"));\r\n        allCardViews.add(new CardView(LC, String.valueOf(id), \"LC\"));\r\n        allCardViews.add(new CardView(CC, String.valueOf(id), \"CC\"));\r\n        allCardViews.add(new CardView(RC, String.valueOf(id), \"RC\"));\r\n        allCardViews.add(new CardView(BL, String.valueOf(id), \"BL\"));\r\n        allCardViews.add(new CardView(BC, String.valueOf(id), \"BC\"));\r\n        allCardViews.add(new CardView(BR, String.valueOf(id), \"BR\"));\r\n\r\n        cardIndices.put(new CardView(TL, String.valueOf(id), \"TL\"), nextCardIndex);\r\n        cardIndices.put(new CardView(TC, String.valueOf(id), \"TC\"), nextCardIndex);\r\n        cardIndices.put(new CardView(TR, String.valueOf(id), \"TR\"), nextCardIndex);\r\n        cardIndices.put(new CardView(LC, String.valueOf(id), \"LC\"), nextCardIndex);\r\n        cardIndices.put(new CardView(CC, String.valueOf(id), \"CC\"), nextCardIndex);\r\n        cardIndices.put(new CardView(RC, String.valueOf(id), \"RC\"), nextCardIndex);\r\n        cardIndices.put(new CardView(BL, String.valueOf(id), \"BL\"), nextCardIndex);\r\n        cardIndices.put(new CardView(BC, String.valueOf(id), \"BC\"), nextCardIndex);\r\n        cardIndices.put(new CardView(BR, String.valueOf(id), \"BR\"), nextCardIndex);\r\n        BL.setDisable(true);\r\n        for (CardView cardView : allCardViews) {\r\n            if (cardIndices.get(cardView) == lastIndex && cardView.getPosition().equals(\"TR\")) {\r\n                cardView.getImageView().setDisable(true);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    public CardView getClickedImageView() {\r\n        return clickedCardView;\r\n    }\r\n\r\n    private synchronized void firstWellCard() throws IOException {\r\n        out.println(\"firstWellId\");\r\n        SharedObjectsInGui.setIdCard1(in.readLine());\r\n    }\r\n\r\n    private synchronized void secondWellCard() throws IOException {\r\n        out.println(\"secondWellId\");\r\n        SharedObjectsInGui.setIdCard2(in.readLine());\r\n    }\r\n\r\n    private synchronized void thirdWellCard() throws IOException {\r\n        out.println(\"thirdWellId\");\r\n        SharedObjectsInGui.setIdCard3(in.readLine());\r\n    }\r\n\r\n    private synchronized void fourthWellCard() throws IOException {\r\n        out.println(\"fourthWellId\");\r\n        SharedObjectsInGui.setIdCard4(in.readLine());\r\n    }\r\n\r\n    private synchronized void updatingResourceAndGoldDeck() throws IOException {\r\n        out.println(\"firstCardResourceGui\");\r\n        SharedObjectsInGui.setPathResourceDeck(in.readLine());\r\n        out.println(\"firstCardGoldGui\");\r\n        SharedObjectsInGui.setPathGoldDeck(in.readLine());\r\n    }\r\n\r\n    private void checkTypeWellCards() {\r\n        SharedObjectsInGui.setWellPathOne(createPathForFrontCards(SharedObjectsInGui.getIdCard1()));\r\n        SharedObjectsInGui.setWellPathSecond(createPathForFrontCards(SharedObjectsInGui.getIdCard2()));\r\n        SharedObjectsInGui.setWellPathThird(createPathForFrontCards(SharedObjectsInGui.getIdCard3()));\r\n        SharedObjectsInGui.setWellPathForth(createPathForFrontCards(SharedObjectsInGui.getIdCard4()));\r\n    }\r\n\r\n    private synchronized void playerDeck() throws IOException {\r\n        out.println(\"deckId\");\r\n        idHandCard1 = in.readLine();\r\n        System.out.println(\"first card of deck:\" + idHandCard1);\r\n        idHandCard2 = in.readLine();\r\n        System.out.println(\"Second card of deck:\" + idHandCard2);\r\n        idHandCard3 = in.readLine();\r\n        System.out.println(\"Third card of deck:\" + idHandCard3);\r\n    }\r\n\r\n    private synchronized void checkTypePlayerDeck() throws IOException {\r\n        typeHandCard1 = checkType(idHandCard1);\r\n        typeHandCard2 = checkType(idHandCard2);\r\n        typeHandCard3 = checkType(idHandCard3);\r\n        in.readLine();\r\n    }\r\n\r\n    private String checkType(String id) {\r\n        int intId = Integer.parseInt(id);\r\n        return intId > 0 && intId <= 40 ? \"Resource\" : \"Gold\";\r\n    }\r\n\r\n    private void creatingPathForGameMethod() {\r\n        SharedObjectsInGui.setPathResourceDeck(createPathForBackCards(SharedObjectsInGui.getPathResourceDeck()));\r\n        SharedObjectsInGui.setPathGoldDeck(createPathForBackCards(SharedObjectsInGui.getPathGoldDeck()));\r\n    }\r\n\r\n    private Image createNewPathForImages(String path) {\r\n        try {\r\n            return new Image(Objects.requireNonNull(getClass().getResourceAsStream(path)));\r\n        } catch (NullPointerException e) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    private void setWidthAndHeight(ImageView imageView) {\r\n        imageView.setFitWidth(widthWellCards);\r\n        imageView.setFitHeight(heightWellCards);\r\n    }\r\n\r\n    private void creatingDeckAndGoldDeckView() {\r\n        SharedObjectsInGui.setTopCardResourceDeckView(new ImageView(SharedObjectsInGui.getTopCardResourceDeck()));\r\n        SharedObjectsInGui.setTopCardGoldDeckView(new ImageView(SharedObjectsInGui.getTopCardGoldDeck()));\r\n        setWidthAndHeight(SharedObjectsInGui.getTopCardResourceDeckView());\r\n        setWidthAndHeight(SharedObjectsInGui.getTopCardGoldDeckView());\r\n    }\r\n\r\n    private void settingDecksOnMouseClickedEvent() {\r\n        SharedObjectsInGui.getTopCardResourceDeckView().setOnMouseClicked(e -> {\r\n            if (isCurrentPlayerTurn) {\r\n                chosenDeckForDrawingNewCard = \"resource\";\r\n                wellOrDeck = \"deck\";\r\n            } else {\r\n                showAlert(\"Not your turn\", \"It's not your turn yet.\");\r\n            }\r\n        });\r\n        SharedObjectsInGui.getTopCardGoldDeckView().setOnMouseClicked(e -> {\r\n            if (isCurrentPlayerTurn) {\r\n                chosenDeckForDrawingNewCard = \"gold\";\r\n                wellOrDeck = \"deck\";\r\n            } else {\r\n                showAlert(\"Not your turn\", \"It's not your turn yet.\");\r\n            }\r\n        });\r\n    }\r\n\r\n    private void creatingImagesForTheWell() {\r\n        SharedObjectsInGui.setWellCard1(createNewPathForImages(SharedObjectsInGui.getWellPathOne()));\r\n        SharedObjectsInGui.setWellCard2(createNewPathForImages(SharedObjectsInGui.getWellPathSecond()));\r\n        SharedObjectsInGui.setWellCard3(createNewPathForImages(SharedObjectsInGui.getWellPathThird()));\r\n        SharedObjectsInGui.setWellCard4(createNewPathForImages(SharedObjectsInGui.getWellPathForth()));\r\n    }\r\n\r\n    private void creatingImagesViewForTheWell() {\r\n        ImageView wellCard1View = new ImageView(SharedObjectsInGui.getWellCard1());\r\n        ImageView wellCard2View = new ImageView(SharedObjectsInGui.getWellCard2());\r\n        ImageView wellCard3View = new ImageView(SharedObjectsInGui.getWellCard3());\r\n        ImageView wellCard4View = new ImageView(SharedObjectsInGui.getWellCard4());\r\n        setWidthAndHeight(wellCard1View);\r\n        setWidthAndHeight(wellCard2View);\r\n        setWidthAndHeight(wellCard3View);\r\n        setWidthAndHeight(wellCard4View);\r\n        SharedObjectsInGui.setWellCard1View(wellCard1View);\r\n        SharedObjectsInGui.setWellCard2View(wellCard2View);\r\n        SharedObjectsInGui.setWellCard3View(wellCard3View);\r\n        SharedObjectsInGui.setWellCard4View(wellCard4View);\r\n    }\r\n\r\n\r\n    private void settingWellOnMouseClickedEvent() {\r\n        SharedObjectsInGui.getWellCard1View().setOnMouseClicked(event -> {\r\n            if (isCurrentPlayerTurn) {\r\n                wellOrDeck = \"well\";\r\n                wellCardSelected = SharedObjectsInGui.getWellCard1();\r\n                idWellCardSelected = SharedObjectsInGui.getIdCard1();\r\n                indexCardFromWellSelected = 0;\r\n            } else {\r\n                showAlert(\"Not your turn\", \"It's not your turn yet.\");\r\n            }\r\n        });\r\n        SharedObjectsInGui.getWellCard2View().setOnMouseClicked(event -> {\r\n            if (isCurrentPlayerTurn) {\r\n                wellOrDeck = \"well\";\r\n                wellCardSelected = SharedObjectsInGui.getWellCard2();\r\n                idWellCardSelected = SharedObjectsInGui.getIdCard2();\r\n                indexCardFromWellSelected = 1;\r\n            } else {\r\n                showAlert(\"Not your turn\", \"It's not your turn yet.\");\r\n            }\r\n        });\r\n        SharedObjectsInGui.getWellCard3View().setOnMouseClicked(event -> {\r\n            if (isCurrentPlayerTurn) {\r\n                wellOrDeck = \"well\";\r\n                wellCardSelected = SharedObjectsInGui.getWellCard3();\r\n                idWellCardSelected = SharedObjectsInGui.getIdCard3();\r\n                indexCardFromWellSelected = 2;\r\n            } else {\r\n                showAlert(\"Not your turn\", \"It's not your turn yet.\");\r\n            }\r\n        });\r\n        SharedObjectsInGui.getWellCard4View().setOnMouseClicked(event -> {\r\n            if (isCurrentPlayerTurn) {\r\n                wellOrDeck = \"well\";\r\n                wellCardSelected = SharedObjectsInGui.getWellCard4();\r\n                idWellCardSelected = SharedObjectsInGui.getIdCard4();\r\n                indexCardFromWellSelected = 3;\r\n            } else {\r\n                showAlert(\"Not your turn\", \"It's not your turn yet.\");\r\n            }\r\n        });\r\n    }\r\n\r\n    private String createPathForBackCards(String cardId) {\r\n        return Integer.parseInt(cardId) < 41 ? pathForResourceCardsBack(cardId) : pathForGoldCardBack(cardId);\r\n    }\r\n\r\n    private String createPathForFrontCards(String cardId) {\r\n        return Integer.parseInt(cardId) < 41 ? pathForResourceCardFront(cardId) : pathForGoldCardFront(cardId);\r\n    }\r\n\r\n    private String pathForResourceCardFront(String cardId) {\r\n        return \"/ImmaginiCodex/CarteFront/Resource/\" + cardId + \".png\";\r\n    }\r\n\r\n    private String pathForGoldCardFront(String cardId) {\r\n        return \"/ImmaginiCodex/CarteFront/Gold/\" + cardId + \".png\";\r\n    }\r\n\r\n    private String pathForResourceCardsBack(String cardId) {\r\n        return \"/ImmaginiCodex/CarteBack/Resource/\" + cardId + \".png\";\r\n    }\r\n\r\n    private String pathForGoldCardBack(String cardId) {\r\n        return \"/ImmaginiCodex/CarteBack/Gold/\" + cardId + \".png\";\r\n    }\r\n\r\n    private void creatingWell() {\r\n        SharedObjectsInGui.setWellPathOne(createPathForFrontCards(SharedObjectsInGui.getIdCard1()));\r\n        SharedObjectsInGui.setWellPathSecond(createPathForFrontCards(SharedObjectsInGui.getIdCard2()));\r\n        SharedObjectsInGui.setWellPathThird(createPathForFrontCards(SharedObjectsInGui.getIdCard3()));\r\n        SharedObjectsInGui.setWellPathForth(createPathForFrontCards(SharedObjectsInGui.getIdCard4()));\r\n\r\n    }\r\n\r\n    private synchronized void initializeWell() throws IOException {\r\n        firstWellCard();\r\n        secondWellCard();\r\n        thirdWellCard();\r\n        fourthWellCard();\r\n        checkTypeWellCards();\r\n    }\r\n\r\n    private void updateResourceDeckTopCard() throws IOException {\r\n        out.println(\"firstCardResourceGui\");\r\n        String newTopCardResourceDeckId = in.readLine();\r\n        idTopCardResourceDeck=newTopCardResourceDeckId;\r\n        System.out.println(newTopCardResourceDeckId);\r\n        System.out.println(\"Sono qua e dovrei quittare\");\r\n        String newPathResource = \"/ImmaginiCodex/CarteBack/Resource/\" + newTopCardResourceDeckId + \".png\";\r\n        System.out.println(newPathResource);\r\n        Image newTopCardResourceDeckImage = new Image(Objects.requireNonNull(getClass().getResourceAsStream(newPathResource)));\r\n        SharedObjectsInGui.getTopCardResourceDeckView().setImage(newTopCardResourceDeckImage);\r\n        SharedObjectsInGui.setPathResourceDeck(newPathResource);\r\n        SharedObjectsInGui.setTopCardResourceDeck(newTopCardResourceDeckImage);\r\n    }\r\n\r\n    private void updatedGoldDeckTopCard() throws IOException {\r\n        out.println(\"firstCardGoldGui\");\r\n        String newTopCardGoldDeckId = in.readLine();\r\n        idTopCardGoldDeck=newTopCardGoldDeckId;\r\n        System.out.println(newTopCardGoldDeckId);\r\n        String newPathGold = \"/ImmaginiCodex/CarteBack/Gold/\" + newTopCardGoldDeckId + \".png\";\r\n        Image newTopCardGoldImage = new Image(Objects.requireNonNull(getClass().getResourceAsStream(newPathGold)));\r\n        SharedObjectsInGui.getTopCardGoldDeckView().setImage(newTopCardGoldImage);\r\n        SharedObjectsInGui.setPathGoldDeck(newPathGold);\r\n        SharedObjectsInGui.setTopCardGoldDeck(newTopCardGoldImage);\r\n    }\r\n\r\n\r\n    public int getX(ImageView img) {\r\n        return GridPane.getRowIndex(img);\r\n    }\r\n\r\n    public int getY(ImageView img) {\r\n        return GridPane.getColumnIndex(img);\r\n    }\r\n\r\n    private void creatingButtons() {\r\n        buttonContainer.add(playCard, 0, 0);\r\n        buttonContainer.add(drawCard, 1, 0);\r\n        buttonContainer.add(flipCardToFront, 0, 1);\r\n        buttonContainer.add(flipCardToBack, 1, 1);\r\n        buttonContainer.add(seeYourPoints, 0, 2);\r\n        buttonContainer.add(seeYourSpecificSeeds, 1, 2);\r\n        buttonContainer.add(showObjective, 0, 3);\r\n        buttonContainer.add(endTurn, 1, 3);\r\n        buttonContainer.add(quit, 0, 4);\r\n        double buttonsWidth = 120.00;\r\n        for (var node : buttonContainer.getChildren()) {\r\n            if (node instanceof Button) {\r\n                node.setStyle(\"-fx-background-color: #333333; -fx-text-fill: white; -fx-font-weight: bold;\");\r\n                ((Button) node).setPrefWidth(buttonsWidth);\r\n            }\r\n        }\r\n    }\r\n\r\n    public void setClickedCardView(CardView cardView) {\r\n        GameSceneController.clickedCardView = cardView;\r\n    }\r\n\r\n\r\n    private void updateGUI() throws IOException {\r\n        load();\r\n        System.out.println(SharedObjectsInGui.getIdCard1());\r\n        System.out.println(SharedObjectsInGui.getIdCard2());\r\n        System.out.println(SharedObjectsInGui.getIdCard3());\r\n        System.out.println(SharedObjectsInGui.getIdCard4());\r\n        System.out.println(\"Carta 1 del deck\" + idHandCard1);\r\n        System.out.println(\"Carta 2 del deck\" + idHandCard2);\r\n        System.out.println(\"Carta 3 del deck\" + idHandCard3);\r\n        newPathAfterUpdate();\r\n        updateResourceDeckTopCard();\r\n        updatedGoldDeckTopCard();\r\n        haveToDraw = true;\r\n        handCard1View.setId(\"Front\");\r\n        handCard2View.setId(\"Front\");\r\n        handCard3View.setId(\"Front\");\r\n        cornerSelected=null;\r\n        indexCardToPlace=100;\r\n        playerDeck();\r\n        checkTypePlayerDeck();\r\n        pathHandCard1 = \"/ImmaginiCodex/CarteFront/\" + typeHandCard1 + \"/\" + idHandCard1 + \".png\";\r\n        System.out.println(pathHandCard1);\r\n        pathHandCard2 = \"/ImmaginiCodex/CarteFront/\" + typeHandCard2 + \"/\" + idHandCard2 + \".png\";\r\n        System.out.println(pathHandCard2);\r\n        pathHandCard3 = \"/ImmaginiCodex/CarteFront/\" + typeHandCard3 + \"/\" + idHandCard3 + \".png\";\r\n        System.out.println(pathHandCard3);\r\n        handCard1 = new Image(Objects.requireNonNull(getClass().getResourceAsStream(pathHandCard1)));\r\n        handCard2 = new Image(Objects.requireNonNull(getClass().getResourceAsStream(pathHandCard2)));\r\n        handCard3 = new Image(Objects.requireNonNull(getClass().getResourceAsStream(pathHandCard3)));\r\n        handCard1View.setImage(handCard1);\r\n        handCard2View.setImage(handCard2);\r\n        handCard3View.setImage(handCard3);\r\n    }\r\n\r\n    private void newPathAfterUpdate(){\r\n        String Path1= \"/ImmaginiCodex/CarteFront/Resource/\" + SharedObjectsInGui.getIdCard1() +\".png\";\r\n        SharedObjectsInGui.setWellCard1(new Image(Objects.requireNonNull(getClass().getResourceAsStream(Path1))));\r\n        SharedObjectsInGui.getWellCard1View().setImage(SharedObjectsInGui.getWellCard1());\r\n        System.out.println(Path1);\r\n\r\n        String Path2= \"/ImmaginiCodex/CarteFront/Resource/\" + SharedObjectsInGui.getIdCard2() +\".png\";\r\n        SharedObjectsInGui.setWellCard2(new Image(Objects.requireNonNull(getClass().getResourceAsStream(Path2))));\r\n        SharedObjectsInGui.getWellCard2View().setImage(SharedObjectsInGui.getWellCard2());\r\n        System.out.println(Path2);\r\n\r\n        String Path3= \"/ImmaginiCodex/CarteFront/Gold/\" + SharedObjectsInGui.getIdCard3() +\".png\";\r\n        SharedObjectsInGui.setWellCard3(new Image(Objects.requireNonNull(getClass().getResourceAsStream(Path3))));\r\n        SharedObjectsInGui.getWellCard3View().setImage(SharedObjectsInGui.getWellCard3());\r\n\r\n        String Path4= \"/ImmaginiCodex/CarteFront/Gold/\" + SharedObjectsInGui.getIdCard4() +\".png\";\r\n        SharedObjectsInGui.setWellCard4(new Image(Objects.requireNonNull(getClass().getResourceAsStream(Path4))));\r\n        SharedObjectsInGui.getWellCard4View().setImage(SharedObjectsInGui.getWellCard4());\r\n    }\r\n\r\n    private void waitUntilLastMessage() throws IOException {\r\n        String messageFromServer = in.readLine();\r\n        while (!messageFromServer.equals(\"STARTGUI\")) {\r\n            System.out.println(\"Server says \" + messageFromServer);\r\n            messageFromServer = in.readLine();\r\n            if(messageFromServer.equals(\"One client decided to quit, so the game will end for every player.\")){\r\n                try{\r\n                    controller.quit(primaryStage);\r\n                    out.close();\r\n                    in.close();\r\n                }catch (Exception e) {\r\n                    e.printStackTrace();\r\n                }\r\n            }\r\n        }\r\n        System.out.println(\"Game finally starting!\");\r\n    }\r\n\r\n    public void saveElementsInGui(Path path) {\r\n        JsonObject sharedElementsObject = new JsonObject();\r\n        sharedElementsObject.add(\"idTopResourceCardDeck\", new JsonPrimitive(idTopCardResourceDeck));\r\n        sharedElementsObject.add(\"idTopGoldCardDeck\", new JsonPrimitive(idTopCardGoldDeck));\r\n        sharedElementsObject.add(\"idCard1\", new JsonPrimitive(SharedObjectsInGui.getIdCard1()));\r\n        sharedElementsObject.add(\"idCard2\", new JsonPrimitive(SharedObjectsInGui.getIdCard2()));\r\n        sharedElementsObject.add(\"idCard3\", new JsonPrimitive(SharedObjectsInGui.getIdCard3()));\r\n        sharedElementsObject.add(\"idCard4\", new JsonPrimitive(SharedObjectsInGui.getIdCard4()));\r\n        try (FileWriter file = new FileWriter(path.toFile())) {\r\n            Gson gson = new Gson();\r\n            gson.toJson(sharedElementsObject, file);\r\n            System.out.println(\"File saved successfully.\");\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    /*\r\n    * Method to load SharedObjectVariables from json file in order to correctly update attributes\r\n    * */\r\n\r\n    public void loadElementsFromGui(Path path) {\r\n        try (FileReader reader = new FileReader(path.toFile())) {\r\n            JsonObject jsonObject = JsonParser.parseReader(reader).getAsJsonObject();\r\n            idTopCardResourceDeck = jsonObject.get(\"idTopResourceCardDeck\").getAsString();\r\n            idTopCardGoldDeck = jsonObject.get(\"idTopGoldCardDeck\").getAsString();\r\n            SharedObjectsInGui.setIdCard1(jsonObject.get(\"idCard1\").getAsString());\r\n            SharedObjectsInGui.setIdCard2(jsonObject.get(\"idCard2\").getAsString());\r\n            SharedObjectsInGui.setIdCard3(jsonObject.get(\"idCard3\").getAsString());\r\n            SharedObjectsInGui.setIdCard4(jsonObject.get(\"idCard4\").getAsString());\r\n            System.out.println(\"File loaded successfully.\");\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public void load(){\r\n        loadElementsFromGui(getDefaultGuiPath());\r\n    }\r\n    public void savePath(){\r\n        saveElementsInGui(getDefaultGuiPath());\r\n    }\r\n    private Path getDefaultGuiPath() {\r\n        String home = (\"src/main/resources/sharedElementsInGui.json\");\r\n        return Paths.get(home);\r\n    }\r\n    private boolean checkGoldCardRequirements(String goldCardId) throws IOException {\r\n        // Retrieve the requirements for the specific gold card\r\n        out.println(\"getGoldCardRequirements\");\r\n        //out.println(goldCardId);\r\n        String requirements = in.readLine(); // Assuming the server sends requirements as a JSON string\r\n\r\n        JsonObject requirementsJson = JsonParser.parseString(requirements).getAsJsonObject();\r\n\r\n        // Retrieve the current attributes from the board\r\n        out.println(\"getCurrentAttributes\");\r\n        String currentAttributes = in.readLine(); // Assuming the server sends current attributes as a JSON string\r\n\r\n        JsonObject currentAttributesJson = JsonParser.parseString(currentAttributes).getAsJsonObject();\r\n\r\n        // Check if all required attributes are met\r\n        for (Map.Entry<String, JsonElement> entry : requirementsJson.entrySet()) {\r\n            String attribute = entry.getKey();\r\n            int requiredValue = entry.getValue().getAsInt();\r\n            int currentValue = currentAttributesJson.has(attribute) ? currentAttributesJson.get(attribute).getAsInt() : 0;\r\n\r\n            if (currentValue < requiredValue) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/network/client/gui/GameSceneController.java b/src/main/java/network/client/gui/GameSceneController.java
--- a/src/main/java/network/client/gui/GameSceneController.java	(revision 694dd7a72fe16e1679553f6447a3811103ffc332)
+++ b/src/main/java/network/client/gui/GameSceneController.java	(date 1716559530554)
@@ -376,7 +376,7 @@
                             return;
                         }
                     }
-                    if (cornerSelected!=null && indexCardToPlace < 4) {
+                    if (cornerSelected!=null && indexCardToPlace < 4 ) {
                         try {
                             String isTheCardFlipped=null;
                             String actualId=null;
@@ -766,8 +766,6 @@
                         System.out.println(in.readLine()); //Fine turno
                         updateGUI();
                         setupGameActions();
-
-
                     } catch (IOException e) {
                         e.printStackTrace();
                     }
@@ -1002,6 +1000,7 @@
         BL.setPickOnBounds(true);
         BR.setPickOnBounds(true);
 
+
         board.add(TL, y, x);
         board.add(TC, (y + 1), x);
         board.add(TR, (y + 2), x);
Index: src/main/resources/HostAndPort.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\r\n  \"hostandport\": [\r\n    {\r\n      \"hostName\": \"192.168.1.2\",\r\n      \"portNumber\": 1234\r\n    }\r\n  ]\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/HostAndPort.json b/src/main/resources/HostAndPort.json
--- a/src/main/resources/HostAndPort.json	(revision 694dd7a72fe16e1679553f6447a3811103ffc332)
+++ b/src/main/resources/HostAndPort.json	(date 1716559646357)
@@ -1,7 +1,7 @@
 {
   "hostandport": [
     {
-      "hostName": "192.168.1.2",
+      "hostName": "localhost",
       "portNumber": 1234
     }
   ]
Index: src/main/java/server/ServerConnection.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package server;\r\nimport exceptions.OperationCancelledException;\r\nimport model.game.*;\r\nimport view.ClientView;\r\n\r\nimport java.io.*;\r\nimport java.net.Socket;\r\nimport java.net.SocketException;\r\nimport java.util.Objects;\r\n\r\n\r\npublic class ServerConnection implements Runnable {\r\n    private static int index=0;\r\n    private Socket socket;\r\n    private ClientView clientView;\r\n    private final BufferedReader in;\r\n    private final BufferedReader stdin;\r\n    private final PrintWriter out;\r\n    private final Player player;\r\n    private String currentPlayer= null;\r\n    private boolean isConnectionClosed= false;\r\n    private boolean isTheWhileActive=false;\r\n    private boolean hasTheServerCrashed=false;\r\n    private boolean endGameForWinningPlayer = false;\r\n    private boolean lastTurn = false;\r\n    private String winningPlayer = null;\r\n    private StringBuilder printFinal =new StringBuilder();\r\n    private boolean gameOverNotForWinningPlayer =false;\r\n\r\n\r\n    public ServerConnection(Socket server,ClientView clientView ) throws IOException {\r\n            this.clientView=clientView;\r\n            this.socket = server;\r\n            this.in= new BufferedReader(new InputStreamReader(socket.getInputStream()));    //receiving server data\r\n            this.out= new PrintWriter(socket.getOutputStream(), true);\r\n            this.stdin= new BufferedReader(new InputStreamReader(System.in));\r\n            this.player=new Player(null,0,null,null );\r\n    }\r\n\r\n@Override\r\n    public void run() {\r\n    String command;\r\n        try {\r\n            //socket.setSoTimeout(5000); // Imposta il timeout a 5 secondi\r\n            System.out.println(\"Welcome! I'm the server, please type anything to start the conversation!\\n\");\r\n            while (!isTheWhileActive) {\r\n                try {                                                       //il client type a message\r\n                    if (clientView.getUserName() == null) {                 //If client hasn't made the login yet, he has to log first.\r\n                        System.out.print(\">\");\r\n                        command = stdin.readLine();\r\n                        sendMessageToServer(command);\r\n                        loginPlayer(player);                                  //Actual Login\r\n                        System.out.println(in.readLine()); //All clients connected\r\n                        assigningSecretCard();                                      //Choosing the secret Card\r\n                        takingTheInitialCard();                                     //Taking the initial Card\r\n                        String waitingAllClientsTOChooseInitialcard= in.readLine();//Allclienti scelsero\r\n                        System.out.println(waitingAllClientsTOChooseInitialcard);\r\n                        System.out.println(\"Login phase ended!\");\r\n                        currentPlayer = in.readLine();                      //who is the current player?\r\n                        if (\"You are the first client\".equals(in.readLine())) {\r\n                            System.out.println(\"You are the first client! Initializing game...\");\r\n                        }\r\n                    } else {\r\n                        while (!isTheWhileActive){\r\n                            if(isConnectionClosed){\r\n                                    isTheWhileActive=true;\r\n                                }\r\n                            else{\r\n                                waitUntilItsYourTurn();\r\n                                makeYourMoves();\r\n                            }\r\n                        }\r\n                    }\r\n                } catch (IOException e) {\r\n                    System.out.println(\"Timeout: server crashed\");\r\n                    hasTheServerCrashed=true;\r\n                    isTheWhileActive=true;\r\n                }\r\n            }\r\n            if(hasTheServerCrashed)\r\n            {\r\n                in.close();\r\n                out.close();\r\n                socket.close();\r\n                System.out.println(\"Connection with server has been closed, thank you for playing Codex!\");\r\n            }\r\n            else{\r\n                try {\r\n                        exitFromGame();\r\n                        in.close();\r\n                        out.close();\r\n                        socket.close();\r\n                        System.out.println(\"Connection with server has been closed, thank you for playing Codex!\");\r\n                    } catch (IOException e) {\r\n                        e.printStackTrace();\r\n                    }\r\n            }\r\n\r\n        } catch (InterruptedException e) {\r\n            throw new RuntimeException(e);\r\n        } catch (SocketException e) {\r\n            System.out.println(\"Timeout: il server non ha risposto entro 5 secondi.\");\r\n            // Gestire la chiusura della connessione o altre azioni necessarie\r\n            // Chiudi la socket e esci dal thread, se necessario\r\n            isTheWhileActive = true; // Uscire dal ciclo principale\r\n        } catch (IOException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n}\r\n\r\n\r\n\r\n    private void waitUntilItsYourTurn() throws IOException {\r\n        while(!clientView.getUserName().equals(getCurrentPlayer()))\r\n        {\r\n            String waitForCall= in.readLine();\r\n            if(waitForCall.equals(clientView.getUserName())){\r\n                setCurrentPlayer(waitForCall);\r\n                System.out.println(getCurrentPlayer());\r\n                in.readLine(); //\"endturn\"\r\n            }else if(waitForCall.equals(\"You smashed 20 points!! now everybody got one last turn\")){\r\n                lastTurn = true;\r\n                winningPlayer = in.readLine();\r\n            }else if(waitForCall.equals(\"END OF GAME!\")){\r\n                printFinal.append(in.readLine());\r\n\r\n            }\r\n            else if(waitForCall.equals(\"quit\"))\r\n            {\r\n                in.close();\r\n                out.close();\r\n                socket.close();\r\n                System.out.println(\"Connection with server has been closed, thank you for playing Codex!\");\r\n            }\r\n            else {\r\n                System.out.println(\"Current Player is still deciding what's his next move...\");}\r\n        }\r\n}\r\n\r\n    private void makeYourMoves() throws IOException {\r\n        if(!player.isThePlayerDeckStarted())\r\n        {\r\n            player.setThePlayerDeckStarted(true);\r\n            showCards();\r\n        }\r\n        if(endGameForWinningPlayer){\r\n            System.out.println(\"------------\\nEND GAME\\n------------\");\r\n            in.readLine();\r\n            System.out.println(in.readLine());\r\n            quit();\r\n            return;\r\n        }if (gameOverNotForWinningPlayer) {\r\n            System.out.println(\"------------\\nEND GAME\\n------------\\n\"+printFinal);\r\n            quit();\r\n            return;\r\n        }else if (lastTurn && !gameOverNotForWinningPlayer && !player.isHasThePlayerAlreadyPLacedACard()) {\r\n            System.out.println(\"-----------------------------------------------------------\\n\" + winningPlayer + \" has reached 20Pts! This is the last turn!\\n-----------------------------------------------------------\");\r\n        }\r\n        System.out.println(\"It's your turn!\");\r\n        System.out.println(\"What do you want to do?\");\r\n        System.out.println(\"Please type help if you want to see which moves you can make.\");\r\n        String command= stdin.readLine().toLowerCase();\r\n        if((command.equals(\"playcard\") || command.equals(\"1\")) && player.isHasThePlayerAlreadyPLacedACard()) {\r\n            System.out.println(\"You already placed and drew a card!\");\r\n            return;\r\n        }\r\n        else if((command.equals(\"endturn\") || command.equals(\"7\")) && !player.isHasThePlayerAlreadyPLacedACard()) {\r\n            System.out.println(\"You have to place a card first\");\r\n            return;\r\n        }\r\n        else if((command.equals(\"endturn\") || command.equals(\"7\")) && lastTurn) {\r\n            gameOverNotForWinningPlayer = true;\r\n        }/*else if((command.equals(\"endgame\") || command.equals(\"7\") || command.equals(\"playcard\") || command.equals(\"1\")) && endGame) {\r\n            System.out.println(\"the command is no longer available. Print 'showboard' or 'quit'\");\r\n        }*/\r\n        actionsInput(command);\r\n    }\r\n\r\n\r\n\r\n    private void actionsInput(String userInput) throws IOException { //GAME STARTED\r\n        try {\r\n            switch (userInput) {\r\n                case \"help\"-> printHelp();\r\n                case \"actions\" -> printActions();\r\n                case \"showdeck\", \"0\" -> showCards();\r\n                case \"playcard\", \"1\" -> playCardFromYourDeck();\r\n                case \"common\", \"2\" -> visualizeCommonObjective();\r\n                case \"secret\", \"3\" -> visualizeSecretObjective();\r\n                case \"board\", \"4\" -> showBoard();\r\n                case \"points\", \"5\" -> showPoints();\r\n                case \"showwell\", \"6\" -> showWell();\r\n                case \"endturn\", \"7\" -> runEndTurn();//run\r\n                case \"allboards\", \"8\" -> showEachPlayerBoard();\r\n                case \"yourseeds\", \"9\" -> showYourSpecificSeed();\r\n                case \"allseed\", \"10\" -> showAllSpecificSeed();\r\n                case \"allpoints\", \"11\" -> showAllPoints();\r\n                case \"quit\", \"12\" -> quit();\r\n                default -> \r\n                    System.out.println(\"This command is not supported. Press 'help' for a list of all available commands.\");\r\n                    \r\n            }\r\n        } catch (OperationCancelledException exception) {\r\n            System.out.println(exception.getMessage());\r\n        }\r\n    }\r\n\r\n    private void showAllPoints() throws IOException {\r\n        sendMessageToServer(\"showAllPoints\");\r\n        String messageFromServer = in.readLine();\r\n        do{\r\n            System.out.println(messageFromServer);\r\n            messageFromServer = in.readLine();\r\n        }while (!messageFromServer.equals(\"exit\"));\r\n    }\r\n\r\n    private void showCards() throws IOException {\r\n        sendMessageToServer(\"showYourCardDeck\");\r\n        System.out.println(\"Your deck:\" );\r\n        System.out.println(\"--------------------------------------------------------------------------------------\");\r\n        receivingPrintingUpdatingCards();\r\n        System.out.println(\"--------------------------------------------------------------------------------------\");\r\n    }\r\n\r\n    private void receivingPrintingUpdatingCards() throws IOException {\r\n        String firstCard = in.readLine(); //Reading all three cards\r\n        String secondCard = in.readLine();\r\n        String thirdCard = in.readLine();\r\n        in.readLine();//spazio\r\n        updatingView(firstCard, secondCard, thirdCard);\r\n        for (String s : player.getClientView().getPlayerStringCards()) {\r\n            System.out.println(s);\r\n        }\r\n    }\r\n\r\n    private void showEachPlayerBoard() throws IOException {\r\n        sendMessageToServer(\"showEachPlayerBoard\");\r\n        System.out.println(\"You decided to print all players boards!\");\r\n        String messageFromServer = in.readLine();\r\n        do{\r\n            System.out.println(messageFromServer);\r\n            messageFromServer = in.readLine();\r\n        }while (!messageFromServer.equals(\"exit\"));\r\n        System.out.println(\"All Boards Printed!\");\r\n    }\r\n\r\n    private void showYourSpecificSeed() throws IOException {\r\n        sendMessageToServer(\"showYourSpecificSeed\");\r\n        System.out.println(\"Your specific seeds: \");\r\n        String yourseeds= in.readLine();\r\n        System.out.println(yourseeds);\r\n    }\r\n\r\n    private void showAllSpecificSeed() throws IOException {\r\n        sendMessageToServer(\"showAllSpecificSeed\");\r\n        String messageFromServer = in.readLine();\r\n        do{\r\n            System.out.println(messageFromServer);\r\n            messageFromServer = in.readLine();\r\n        }while (!messageFromServer.equals(\"exit\"));\r\n    }\r\n\r\n    private void updatingView(String firstCard, String secondCard, String thirdCard){\r\n        String[] carte = {firstCard, secondCard, thirdCard};\r\n        if(player.getClientView().getPlayerStringCards().isEmpty()) {\r\n            for (int i = 0; i < 3; i++){\r\n                player.getClientView().getPlayerStringCards().add(carte[i]);\r\n            }\r\n            return;\r\n        }\r\n        boolean present = false;\r\n        for (int i = 0; i < 3; i++){\r\n            for (String viewCard : player.getClientView().getPlayerStringCards()){\r\n                if (carte[i].equals(viewCard)){present = true; break;}\r\n            }\r\n            if (!present){player.getClientView().getPlayerStringCards().add(carte[i]);}\r\n            present = false;\r\n        }\r\n    }\r\n\r\n    private void playCardFromYourDeck() throws IOException {\r\n        String messageFromServer, inputFromClient;\r\n        int size;\r\n        boolean check;\r\n\r\n        player.setHasThePlayerAlreadyPLacedACard(true);//player puo giocare una volta per turno\r\n        System.out.println(\"Play a card from your deck!\");\r\n        showBoard();\r\n        showYourSpecificSeed();\r\n        sendMessageToServer(\"playCard\");\r\n\r\n        //scelta carta dal mazzo\r\n        System.out.println(\"\\n------------------------------------------------------------------------------------------------\");\r\n        System.out.println(\"These are your deck cards: \");\r\n        System.out.println(player.getClientView().getPlayerStringCards().get(0));\r\n        System.out.println(player.getClientView().getPlayerStringCards().get(1));\r\n        System.out.println(player.getClientView().getPlayerStringCards().get(2));\r\n        System.out.println(\"------------------------------------------------------------------------------------------------\");\r\n        boolean turnedCardAlredy=false;\r\n        do {\r\n            System.out.println(\"Which card do you want to play on the board?\\n1-> first card\\n2-> second card\\n3-> third card\");\r\n            size = Integer.parseInt(controlInputFromUser(new String[]{\"1\", \"2\", \"3\"}));\r\n            out.println(size - 1); //Carta scelta dal deck del player, sto mandando al server\r\n            messageFromServer = in.readLine();//Gold Card not placeable oppure puoi procedere\r\n            if(messageFromServer.equals(\"Gold Card not placeable\")){\r\n                messageFromServer = in.readLine();\r\n                System.out.println(\"gold card requires: \" + messageFromServer);\r\n                messageFromServer = in.readLine();\r\n                System.out.println(\"you got: \" + messageFromServer);\r\n                System.out.println(\"You can:\\n1-> choose another card\\n2-> turn the card\");\r\n                inputFromClient =controlInputFromUser(new String[]{\"1\", \"2\"});\r\n                sendMessageToServer(inputFromClient);\r\n                if(inputFromClient.equals(\"2\")) {\r\n                    turnedCardAlredy = true;\r\n                    messageFromServer = \"puoi procedere\";\r\n                    in.readLine();//il ritorno della carta girata!\r\n                }\r\n            }\r\n        }while (!messageFromServer.equals(\"puoi procedere\"));\r\n        player.getClientView().getPlayerStringCards().remove(size-1);   //rimuovo dalla view la carta scelta\r\n\r\n        //scelta se girare la carta\r\n        if(!turnedCardAlredy) {\r\n            System.out.println(\"------------------------------------------------------------------------------------------------\");\r\n            System.out.println(\"Do you want to turn your card?\\n(Back of all cards has 4 empty corners and 1 attribute representing the specific seed of the card)\");\r\n            System.out.println(\"Please type\\n\" + \"1-> To TURN your card\\n\" + \"2-> To NOT TURN your card\");\r\n            inputFromClient = controlInputFromUser(new String[]{\"1\", \"2\"});\r\n            sendMessageToServer(inputFromClient);\r\n            if(inputFromClient.equals(\"1\")) in.readLine();//il ritorno della carta girata!\r\n        }\r\n\r\n        //carte sulla board\r\n        boolean rightCard;\r\n        String[] angoli;\r\n        String[] validInputs;\r\n        int numeroCarte;\r\n        do {\r\n            System.out.println(\"Your cards on the board: \");\r\n            for (String s : player.getClientView().getCardsOnTheBoard()) {\r\n                System.out.println(s);\r\n            }\r\n            System.out.println(\"\\nWhich card on the board do you want to place your card on?\");\r\n\r\n            //inizializzazione array input validi per la scelta della carta\r\n            numeroCarte = player.getClientView().getNumOfCardsOnTheBoard();\r\n            validInputs = new String[numeroCarte]; //se c'è solo la carta iniziale è pari ad 1\r\n            for (int j = 0; j < numeroCarte; j++) {\r\n                    validInputs[j] = String.valueOf(j + 1);\r\n            }\r\n            int cartaSceltaBoard = Integer.parseInt(controlInputFromUser(validInputs));//mi serve dopo questa variabile!!\r\n            out.println(cartaSceltaBoard - 1);\r\n\r\n            //avaiableCorners\r\n            angoli = new String[]{\"TL\", \"TR\", \"BR\", \"BL\"};\r\n            validInputs = new String[4];\r\n            check = false;\r\n            size = 0;\r\n            messageFromServer = in.readLine();\r\n            do {\r\n                for (String corner : angoli) {\r\n                    if (!check && messageFromServer.equals(corner)) {\r\n                        validInputs[size] = messageFromServer;\r\n                        size++;\r\n                        check = true;\r\n                    }\r\n                }\r\n                if (!check) System.out.println(messageFromServer);\r\n                check = false;\r\n                messageFromServer = in.readLine();\r\n            } while (!messageFromServer.equals(\"end\"));\r\n            if(size == 0) {\r\n                rightCard = false;\r\n                System.out.println(\"-----------------------------------------------------------\\nthe choosen Card has no free corners!! Chose another card!!\\n-----------------------------------------------------------\");\r\n                out.println(\"clean\");\r\n                //String guess =in.readLine();\r\n            }else rightCard = true;\r\n        }while(!rightCard);\r\n        System.out.print(\"Choose the corner you want to place the card on: \");\r\n        if(size<4){\r\n            angoli = new String[size];\r\n            for (int i=0; i<size; i++) {\r\n                angoli[i]=validInputs[i];\r\n            }\r\n            inputFromClient = controlInputFromUser(angoli);\r\n        }\r\n        else inputFromClient = controlInputFromUser(validInputs);\r\n        out.println(inputFromClient);\r\n\r\n        //final part\r\n        System.out.println(in.readLine()); //carta placed\r\n        //updating the view\r\n        String typeCard = in.readLine();\r\n        String isBack = in.readLine();\r\n        String cordinateTl = in.readLine();\r\n        player.getClientView().addCardOnTheBoard((numeroCarte+1)+\"->\"+typeCard+\": \"+cordinateTl+\" \"+ isBack);\r\n        player.getClientView().setNumOfCardsOnTheBoard(numeroCarte+1);\r\n\r\n        drawCard();                 //pescaggio\r\n        int points = status();      //punteggio\r\n        System.out.println();\r\n\r\n        //controllo se 20 punti\r\n        if(points>=20) {\r\n            System.out.println(in.readLine());\r\n            in.readLine();//winningPlayer\r\n            System.out.println(\"Your turn is over!\");\r\n            endGameForWinningPlayer = true;\r\n            runEndTurn();\r\n\r\n\r\n\r\n\r\n\r\n            /*System.out.println(in.readLine()); //all players have on last turn and then the game will end\r\n            player.setHasThePlayerAlreadyPLacedACard(false);\r\n            System.out.println(\"You chose to end your turn.\");\r\n            String answer= in.readLine();\r\n            System.out.println(\"Next player will be \" + answer);   //next player will be +...\r\n            setCurrentPlayer(answer);\r\n            String updatingCurrentPlayer= in.readLine(); //-> aggiornamento del currentPLayer\r\n            System.out.println(updatingCurrentPlayer);\r\n            cleanTheSocket();*/\r\n        }\r\n\r\n    }\r\n\r\n    private String controlInputFromUser(String[] elements) throws IOException {\r\n        String inputClient;\r\n        boolean found = false;\r\n        do {\r\n            inputClient = stdin.readLine().toUpperCase();\r\n            for (String element : elements) {\r\n                if (inputClient.equals(element.toUpperCase())) {\r\n                    found = true;\r\n                    break;\r\n                }\r\n            }\r\n            if (!found) {\r\n                System.out.println(\"Input errato! Riprova!\");\r\n            }\r\n        } while (!found);\r\n        return inputClient;\r\n    }\r\n\r\n    private int status() throws IOException {\r\n        sendMessageToServer(\"status\");\r\n        String points= in.readLine();\r\n        System.out.println(\"you got: \"+ points + \" points!\");\r\n        clientView.setPlayerScore(Integer.parseInt(points));\r\n        return Integer.parseInt(points);\r\n    }\r\n\r\n    private void visualizeCommonObjective() throws IOException {\r\n        sendMessageToServer(\"visualizeCommonObjectiveCards\");\r\n        System.out.println(\"Common Objective Cards are:\\n\");\r\n        System.out.println(in.readLine());//first common card\r\n        System.out.println(in.readLine());//second common card\r\n    }\r\n\r\n    private void visualizeSecretObjective() throws IOException {\r\n        sendMessageToServer(\"secret\");\r\n        System.out.println(\"You chose to visualize your secret card!\\n\");\r\n        String result= in.readLine();\r\n        System.out.println(result);\r\n        System.out.println(\"\\n\");\r\n        System.out.println(\"This is your objective card!\");\r\n    }\r\n\r\n    private void showBoard() throws IOException {\r\n        sendMessageToServer(\"showBoard\");\r\n        System.out.print(\"////////////////////////////////////////////////////// INIZIO BOARD ////////////////////////////////////////////////////////////// \\n\");\r\n        String result= in.readLine();\r\n        do{\r\n            System.out.println(result);\r\n            result= in.readLine();\r\n        }while (!result.equals(\"fine board\"));\r\n        System.out.println();\r\n        System.out.println(\"////////////////////////////////////////////////////// FINE BOARD ////////////////////////////////////////////////////////////////\");\r\n    }\r\n\r\n    private void showPoints() throws IOException {\r\n        sendMessageToServer(\"showPoints\");\r\n        System.out.println(\"You chose to visualize your points!\\n\");\r\n        String result= in.readLine();\r\n        clientView.setPlayerScore(Integer.parseInt(result));\r\n        System.out.println(\"At the moment your points are: \" + result);\r\n    }\r\n\r\n    private void showWell() throws IOException {\r\n        sendMessageToServer(\"showWell\");\r\n        System.out.println(\"Common Well:\\n------------------------------------------------------------------------------------------\");\r\n        System.out.println(in.readLine());//prima carta nel pozzo\r\n        System.out.println(in.readLine());//seconda carta nel pozzo\r\n        System.out.println(in.readLine());//terza carta nel pozzo\r\n        System.out.println(in.readLine());//quarta carta nel pozzo\r\n        in.readLine();//spazio\r\n        System.out.println(\"------------------------------------------------------------------------------------------\");\r\n\r\n    }\r\n\r\n    private void drawCard() throws IOException {\r\n        showWell();\r\n        sendMessageToServer(\"drawCard\");\r\n        System.out.println(\"You chose to draw a card!\\n\");\r\n        String drawnCard;\r\n        do {\r\n            System.out.println(\"\"\"\r\n                    Where do you want to draw the card from?\r\n                    1->deck\r\n                    2->well\"\"\");\r\n            drawnCard = stdin.readLine().toLowerCase();\r\n            if (drawnCard.equals(\"deck\") || drawnCard.equals(\"1\")) {\r\n                sendMessageToServer(\"deck\");\r\n                drawCardFromDeck();\r\n            }\r\n            else if (drawnCard.equals(\"well\") || drawnCard.equals(\"2\")) {\r\n                sendMessageToServer(\"well\");\r\n                drawCardFromWell();\r\n            }\r\n            else System.out.println(\"write 'deck' or 'well'\");\r\n        }while (!drawnCard.equals(\"well\") && !drawnCard.equals(\"deck\") && !drawnCard.equals(\"1\") && !drawnCard.equals(\"2\"));\r\n    }\r\n\r\n    private void drawCardFromDeck() throws IOException {\r\n        System.out.println(\"\"\"\r\n                Where do you want to draw your card from?\r\n                1->Resource\r\n                2->Gold\"\"\");\r\n        String drawnCard;\r\n        do{\r\n            drawnCard = stdin.readLine().toLowerCase();\r\n            if (drawnCard.equals(\"resource\") || drawnCard.equals(\"1\")) {\r\n                drawCardFromResourceDeck();\r\n            }\r\n            else if (drawnCard.equals(\"gold\") || drawnCard.equals(\"2\")) {\r\n                drawCardFromGoldDeck();\r\n            }\r\n            else System.out.println(\"Write 'resource' or 'gold'\");\r\n\r\n        }while (!drawnCard.equals(\"resource\") && !drawnCard.equals(\"gold\") && !drawnCard.equals(\"1\") && !drawnCard.equals(\"2\"));\r\n    }\r\n\r\n    private void drawCardFromResourceDeck() throws IOException {\r\n        sendMessageToServer(\"drawCardFromResourceDeck\");\r\n        System.out.println(in.readLine());\r\n        sendMessageToServer(\"showYourCardDeck\");\r\n        System.out.println(\"Your Deck:\" );\r\n        System.out.println(\"--------------------------------------------------------------------------------------\");\r\n        receivingPrintingUpdatingCards();\r\n        System.out.println(\"--------------------------------------------------------------------------------------\");\r\n    }\r\n\r\n    private void drawCardFromGoldDeck() throws IOException {\r\n        sendMessageToServer(\"drawCardFromGoldDeck\");\r\n        System.out.println(in.readLine());\r\n        sendMessageToServer(\"showYourCardDeck\");\r\n        System.out.println(\"Your Deck:\" );\r\n        System.out.println(\"--------------------------------------------------------------------------------------\");\r\n        receivingPrintingUpdatingCards();\r\n        System.out.println(\"--------------------------------------------------------------------------------------\");\r\n    }\r\n\r\n    private void drawCardFromWell() throws IOException {\r\n        sendMessageToServer(\"showWell\");\r\n        System.out.println(\"Which card from the well do you want to draw?\");\r\n        System.out.println(\"------------------------------------------------------------------------------------------\");\r\n        System.out.println(\"Select '0' for\"+in.readLine()); //cards in the well\r\n        System.out.println(\"Select '1' for\"+in.readLine());\r\n        System.out.println(\"Select '2' for\"+in.readLine());\r\n        System.out.println(\"Select '3' for\"+in.readLine());\r\n        in.readLine();//spazio\r\n        System.out.println(\"------------------------------------------------------------------------------------------\");\r\n        String selectedCard;\r\n        do{\r\n            selectedCard= readMessageFromUser();\r\n            if(wrongChoice(selectedCard)) {\r\n                System.out.println(\"Wrong choice, try again\");\r\n            }\r\n        }while(wrongChoice(selectedCard));\r\n        sendMessageToServer(selectedCard); //mando 0\r\n\r\n        //ora gestisco le risposte del server\r\n        String result = in.readLine();\r\n        if(result.equals(\"operation performed correctly\")) {\r\n            System.out.println(\"Operation 'Draw card from Well' performed correctly\");\r\n            sendMessageToServer(\"showYourCardDeck\");\r\n            System.out.println(\"Your Deck:\" );\r\n            System.out.println(\"--------------------------------------------------------------------------------------\");\r\n            receivingPrintingUpdatingCards();\r\n            System.out.println(\"--------------------------------------------------------------------------------------\");\r\n            showWell();\r\n        }\r\n        else{\r\n            System.out.println(\"Operation failed\");\r\n            System.out.println(\"Server says: \"+ result);\r\n            System.out.println(\"Your Deck:\" );\r\n            System.out.println(\"--------------------------------------------------------------------------------------\");\r\n            sendMessageToServer(\"showYourCardDeck\");\r\n            receivingPrintingUpdatingCards();\r\n            System.out.println(\"--------------------------------------------------------------------------------------\");\r\n            showWell();\r\n        }\r\n    }\r\n\r\n    private boolean wrongChoice(String selectedCard) {\r\n        int num = Integer.parseInt(selectedCard);\r\n        return num < 0 || num > 3;\r\n    }\r\n\r\n    private void quit() throws IOException {\r\n        sendMessageToServer(\"quit\");\r\n        System.out.println(\"You chose to quit Codex :c \\n\");\r\n        System.out.println(in.readLine()); //quit\r\n        isConnectionClosed=true;\r\n    }\r\n\r\n    private void runEndTurn() throws IOException {\r\n        sendMessageToServer(\"endTurn\");\r\n\r\n        if(!endGameForWinningPlayer){\r\n            player.setHasThePlayerAlreadyPLacedACard(false);\r\n            System.out.println(\"You chose to end your turn.\");\r\n        }\r\n        String answer= in.readLine();\r\n        System.out.println(\"Next player will be \" +answer);\r\n        setCurrentPlayer(answer);\r\n        String updatingCurrentPlayer= in.readLine(); //-> updating currentPLayer\r\n        System.out.println(updatingCurrentPlayer);\r\n        //clientView.update(player);\r\n        cleanTheSocket();\r\n    }\r\n\r\n    private void exitFromGame() throws IOException {\r\n        sendMessageToServer(\"endTurn\");\r\n        String answer= in.readLine();\r\n        setCurrentPlayer(answer);\r\n        if(answer.equals(\"All clients have quit\")){\r\n            System.out.println(\"All clients have quit\");\r\n        }\r\n        else{\r\n            System.out.println(\"Current player: \" + currentPlayer);\r\n            String updatingCurrentPlayer= in.readLine(); //-> updating currentPLayer\r\n            System.out.println(updatingCurrentPlayer);\r\n        }\r\n        cleanTheSocket();\r\n    }\r\n\r\n    public String getCurrentPlayer() {\r\n        return currentPlayer;\r\n    }\r\n\r\n    public synchronized void setCurrentPlayer(String currentPlayer) {\r\n        this.currentPlayer = currentPlayer;\r\n    }\r\n\r\n    private void takingTheInitialCard() throws IOException {                                                                            //DA FINIRE\r\n        boolean hasTheCardAlreadyBeenTurn= false;\r\n        String firstCard= in.readLine();\r\n        String FrontalCorners= in.readLine();\r\n        String BackCorners=in.readLine();\r\n        in.readLine(); //For gui purpose\r\n        System.out.println(\"server says: \" + firstCard);\r\n        System.out.println(FrontalCorners);\r\n        System.out.println(BackCorners);\r\n        int size;\r\n        System.out.println(\"Do you want to turn your card?\");\r\n        System.out.println(\"1-> To turn your card\\n2->to NOT turn your card\");\r\n        size = Integer.parseInt(controlInputFromUser(new String[]{\"1\", \"2\"}));\r\n        String isBack;\r\n        if (size==1) isBack= \"(back)\";\r\n        else isBack = \"(front)\";\r\n        out.println(size-1);\r\n        System.out.println(\"Initial Card correctly placed!\");\r\n        //aggiorno la view\r\n        player.getClientView().addCardOnTheBoard(\"1->Initial Card: (24 24) \" + isBack);\r\n    }\r\n\r\n    private synchronized void assigningSecretCard() throws IOException {\r\n        boolean isNumberCorrect=false;\r\n        String stringSecretCard= in.readLine(); //card\r\n        String stringSecondCard= in.readLine(); //card\r\n        in.readLine(); //id\r\n        in.readLine(); //id\r\n        System.out.println(\"Server says: your first objective card is\" + stringSecretCard);\r\n        System.out.println(\"Server says: your second objective card is\" + stringSecondCard);\r\n        while(!isNumberCorrect){\r\n        System.out.println(\"Choose the card you want to draw:\\n1-> First card\\n2-> Second card\");\r\n        String numberChosen= controlInputFromUser(new String[]{\"1\", \"2\"});\r\n        int size = Integer.parseInt(numberChosen);\r\n        if(size!=1 && size!=2){\r\n            System.out.println(\"Please choose your card correctly!\");\r\n        }\r\n        else {\r\n            System.out.println(\"Card chosen correctly\");\r\n            out.println(size);\r\n            isNumberCorrect=true;\r\n            }\r\n        }\r\n    }\r\n\r\n    private synchronized void loginPlayer(Player player) throws IOException, InterruptedException { //LOGIN METHOD\r\n        boolean isTheNameAlreadyTaken=false;\r\n        String serverResponse = in.readLine();\r\n        String loginName=null;\r\n        String correctLogin=null;\r\n        System.out.println(\"Server says: \" + serverResponse); //Inserisci il tuo nome per favore\r\n        System.out.print(\">\");\r\n        while(!isTheNameAlreadyTaken){\r\n            loginName = stdin.readLine();\r\n            sendMessageToServer(loginName);\r\n            correctLogin = in.readLine();\r\n            if((correctLogin).equals(\"Username already taken. Please choose another username:\"))\r\n            {\r\n                System.out.println(\"Username already taken. Please choose another username:\");\r\n                System.out.print(\">\");\r\n            }\r\n            else if((correctLogin).equals(\"Welcome back, \" + loginName + \"! Your data has been loaded.\"))\r\n            {\r\n                waitForGameStart();\r\n                return;\r\n            }\r\n            else isTheNameAlreadyTaken=true;\r\n        }\r\n\r\n        System.out.println(\"Server says: \" + correctLogin);     //Login succesfully done\r\n        player.getClientView().setUserName(loginName);\r\n        clientView.setUserName(loginName);                      //UPDATING CLIENT VIEW\r\n        synchronized (this)\r\n        {\r\n            clientView.setIndex(index);\r\n            index++;\r\n        }\r\n        synchronized (this){\r\n        chooseYourDotColor();\r\n        }\r\n        chooseNumberOfPlayers();\r\n    }\r\n\r\n    private void chooseYourDotColor() throws IOException {\r\n            String messageFromServer;\r\n            do {\r\n                messageFromServer = in.readLine();\r\n                System.out.println(\"Server says: \" + messageFromServer);\r\n                System.out.print(\">\");\r\n                String dotColor = stdin.readLine();\r\n                dotColor = dotColor.toUpperCase();\r\n                sendMessageToServer(dotColor);\r\n                messageFromServer = in.readLine();\r\n                System.out.println(messageFromServer);\r\n            }while (messageFromServer.equals(\"Chosen color not available!\"));\r\n    }\r\n\r\n    private synchronized void chooseNumberOfPlayers() throws IOException{\r\n        String serverMessage=in.readLine();\r\n        System.out.println(serverMessage);\r\n        if(serverMessage.equals(\"There's already someone online!Please wait\"))\r\n        {\r\n            System.out.println(\"There's already someone online!Please wait\");\r\n            String waitingClients= in.readLine();\r\n            System.out.println(\"Server says: \" + waitingClients);\r\n            return;\r\n        }\r\n        String numbersOfPlayers= controlInputFromUser(new String[]{\"2\", \"3\", \"4\"});\r\n        int size = Integer.parseInt(numbersOfPlayers);\r\n        out.println(size); //Sending number of players\r\n        System.out.println(\"Number of players are: \"+ size);\r\n        String serverAnswer = in.readLine();\r\n        System.out.println(\"Server says: \" + serverAnswer); //PLayers nuumber correctly chosen\r\n        String waitingClients= in.readLine();\r\n        System.out.println(\"Server says: \" + waitingClients); //You have to wait..\r\n        }\r\n\r\n    private synchronized void printHelp() throws IOException {\r\n        sendMessageToServer(\"help\");\r\n        String serviceString=in.readLine();\r\n        System.out.println(serviceString);\r\n        System.out.println(\r\n                \"\"\"\r\n                        Supported commands are:\\s\r\n                        - 'actions': display all currently allowed game actions\r\n                        \"\"\");\r\n    }\r\n\r\n    private void printActions() {\r\n        System.out.println(\r\n                \"\"\"\r\n                        Supported commands:\r\n                        - If you type-> 'showdeck / 0 ': display player's cards\r\n                        - If you type-> 'playcard /1': select the card you want to place from your hand\r\n                        - If you type->  'common /2': visualize the common objective cards\r\n                        - If you type->  'secret /3': visualize your secret objective card\r\n                        - If you type->  'board /4':print your board\r\n                        - If you type->  'points /5': show your points\r\n                        - If you type->  'showWell /6': you'll be displayed the well\r\n                        - If you type->  'endturn /7': end your turn\r\n                        - If you type->  'allboards /8': you'll be displayed your opponent boards\r\n                        - if you type ->  'yourseeds /9': you'll be displayed all the specific seed you have on your board\r\n                        - if you type ->  'allseed /10': you'll be displayed all your opponent specific seed\r\n                        - if you type ->  'allpoints /11': you'll be displayed your opponents' points\r\n                        - if you type ->  'quit /11': you'll quit the game\r\n                        \"\"\"\r\n        );\r\n    }\r\n\r\n    private void cleanTheSocket() {\r\n        out.flush();\r\n    }\r\n    public void sendMessageToServer(String message) {\r\n        out.println(message);\r\n    }\r\n    public String readMessageFromUser() throws IOException {\r\n        return stdin.readLine();\r\n    }\r\n    private void waitForGameStart() throws IOException {\r\n        String message;\r\n        while ((message = in.readLine()) != null) {\r\n            System.out.println(message);\r\n            if (message.equals(\"All players are connected, starting game...\")) {\r\n                waitUntilItsYourTurn();\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/server/ServerConnection.java b/src/main/java/server/ServerConnection.java
--- a/src/main/java/server/ServerConnection.java	(revision 694dd7a72fe16e1679553f6447a3811103ffc332)
+++ b/src/main/java/server/ServerConnection.java	(date 1716558344931)
@@ -41,7 +41,7 @@
     public void run() {
     String command;
         try {
-            //socket.setSoTimeout(5000); // Imposta il timeout a 5 secondi
+            socket.setSoTimeout(120000); // Imposta il timeout a 5 secondi
             System.out.println("Welcome! I'm the server, please type anything to start the conversation!\n");
             while (!isTheWhileActive) {
                 try {                                                       //il client type a message
Index: src/main/resources/sharedElementsInGui.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\"idTopResourceCardDeck\":\"12\",\"idTopGoldCardDeck\":\"59\",\"idCard1\":\"7\",\"idCard2\":\"13\",\"idCard3\":\"64\",\"idCard4\":\"67\"}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/sharedElementsInGui.json b/src/main/resources/sharedElementsInGui.json
--- a/src/main/resources/sharedElementsInGui.json	(revision 694dd7a72fe16e1679553f6447a3811103ffc332)
+++ b/src/main/resources/sharedElementsInGui.json	(date 1716558344960)
@@ -1,1 +1,1 @@
-{"idTopResourceCardDeck":"12","idTopGoldCardDeck":"59","idCard1":"7","idCard2":"13","idCard3":"64","idCard4":"67"}
\ No newline at end of file
+{"idTopResourceCardDeck":"29","idTopGoldCardDeck":"78","idCard1":"2","idCard2":"5","idCard3":"44","idCard4":"46"}
\ No newline at end of file
Index: src/main/resources/saveplayers.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/saveplayers.json b/src/main/resources/saveplayers.json
--- a/src/main/resources/saveplayers.json	(revision 694dd7a72fe16e1679553f6447a3811103ffc332)
+++ b/src/main/resources/saveplayers.json	(date 1716559690475)
@@ -1,91 +1,152 @@
 {
   "players": [
     {
-      "nickname": "alga",
+      "nickname": "a",
       "score": 1,
       "dot": 3,
       "player_deck": [
         {
-          "id": 24,
-          "type": "ANIMAL",
-          "value": 0,
+          "id": 18,
+          "type": "PLANT",
+          "value": 1,
           "TL": {
             "specificCornerSeed": "EMPTY",
             "x": 0,
             "y": 0,
-            "cardSeed": "ANIMAL",
+            "cardSeed": "PLANT",
             "isThisCornerFree": true
           },
           "TR": {
-            "specificCornerSeed": "ANIMAL",
+            "specificCornerSeed": "EMPTY",
             "x": 0,
             "y": 0,
-            "cardSeed": "ANIMAL",
+            "cardSeed": "PLANT",
             "isThisCornerFree": true
           },
           "BL": {
-            "specificCornerSeed": "NOTTOBEPLACEDON",
+            "specificCornerSeed": "PLANT",
             "x": 0,
             "y": 0,
-            "cardSeed": "ANIMAL",
+            "cardSeed": "PLANT",
             "isThisCornerFree": true
           },
           "BR": {
-            "specificCornerSeed": "ANIMAL",
+            "specificCornerSeed": "NOTTOBEPLACEDON",
             "x": 0,
             "y": 0,
-            "cardSeed": "ANIMAL",
+            "cardSeed": "PLANT",
             "isThisCornerFree": true
           },
           "TLBack": {
             "specificCornerSeed": "EMPTY",
             "x": 0,
             "y": 0,
-            "cardSeed": "ANIMAL",
+            "cardSeed": "PLANT",
             "isThisCornerFree": true
           },
           "TRBack": {
-            "specificCornerSeed": "ANIMAL",
+            "specificCornerSeed": "EMPTY",
             "x": 0,
             "y": 0,
-            "cardSeed": "ANIMAL",
+            "cardSeed": "PLANT",
             "isThisCornerFree": true
           },
           "BLBack": {
+            "specificCornerSeed": "PLANT",
+            "x": 0,
+            "y": 0,
+            "cardSeed": "PLANT",
+            "isThisCornerFree": true
+          },
+          "BRBack": {
             "specificCornerSeed": "NOTTOBEPLACEDON",
             "x": 0,
             "y": 0,
-            "cardSeed": "ANIMAL",
+            "cardSeed": "PLANT",
+            "isThisCornerFree": true
+          }
+        },
+        {
+          "id": 12,
+          "type": "PLANT",
+          "value": 0,
+          "TL": {
+            "specificCornerSeed": "PLANT",
+            "x": 0,
+            "y": 0,
+            "cardSeed": "PLANT",
+            "isThisCornerFree": true
+          },
+          "TR": {
+            "specificCornerSeed": "PLANT",
+            "x": 0,
+            "y": 0,
+            "cardSeed": "PLANT",
+            "isThisCornerFree": true
+          },
+          "BL": {
+            "specificCornerSeed": "NOTTOBEPLACEDON",
+            "x": 0,
+            "y": 0,
+            "cardSeed": "PLANT",
+            "isThisCornerFree": true
+          },
+          "BR": {
+            "specificCornerSeed": "EMPTY",
+            "x": 0,
+            "y": 0,
+            "cardSeed": "PLANT",
+            "isThisCornerFree": true
+          },
+          "TLBack": {
+            "specificCornerSeed": "PLANT",
+            "x": 0,
+            "y": 0,
+            "cardSeed": "PLANT",
+            "isThisCornerFree": true
+          },
+          "TRBack": {
+            "specificCornerSeed": "PLANT",
+            "x": 0,
+            "y": 0,
+            "cardSeed": "PLANT",
+            "isThisCornerFree": true
+          },
+          "BLBack": {
+            "specificCornerSeed": "NOTTOBEPLACEDON",
+            "x": 0,
+            "y": 0,
+            "cardSeed": "PLANT",
             "isThisCornerFree": true
           },
           "BRBack": {
-            "specificCornerSeed": "ANIMAL",
+            "specificCornerSeed": "EMPTY",
             "x": 0,
             "y": 0,
-            "cardSeed": "ANIMAL",
+            "cardSeed": "PLANT",
             "isThisCornerFree": true
           }
         },
         {
-          "id": 28,
+          "id": 65,
           "type": "ANIMAL",
-          "value": 1,
+          "value": 2,
           "TL": {
-            "specificCornerSeed": "NOTTOBEPLACEDON",
+            "specificCornerSeed": "EMPTY",
             "x": 0,
             "y": 0,
             "cardSeed": "ANIMAL",
             "isThisCornerFree": true
           },
           "TR": {
-            "specificCornerSeed": "EMPTY",
+            "specificCornerSeed": "NOTTOBEPLACEDON",
             "x": 0,
             "y": 0,
             "cardSeed": "ANIMAL",
             "isThisCornerFree": true
           },
           "BL": {
-            "specificCornerSeed": "ANIMAL",
+            "specificCornerSeed": "EMPTY",
             "x": 0,
             "y": 0,
             "cardSeed": "ANIMAL",
@@ -99,21 +160,21 @@
             "isThisCornerFree": true
           },
           "TLBack": {
-            "specificCornerSeed": "NOTTOBEPLACEDON",
+            "specificCornerSeed": "EMPTY",
             "x": 0,
             "y": 0,
             "cardSeed": "ANIMAL",
             "isThisCornerFree": true
           },
           "TRBack": {
-            "specificCornerSeed": "EMPTY",
+            "specificCornerSeed": "NOTTOBEPLACEDON",
             "x": 0,
             "y": 0,
             "cardSeed": "ANIMAL",
             "isThisCornerFree": true
           },
           "BLBack": {
-            "specificCornerSeed": "ANIMAL",
+            "specificCornerSeed": "EMPTY",
             "x": 0,
             "y": 0,
             "cardSeed": "ANIMAL",
@@ -125,18 +186,14 @@
             "y": 0,
             "cardSeed": "ANIMAL",
             "isThisCornerFree": true
-          }
-        },
-        {
-          "id": 49,
-          "specificSeedType": 3,
-          "value": 3,
-          "TopLeftCorner": " NOTTOBEPLACEDON",
-          "TopRightCorner": " PARCHMENT",
-          "BottomLeftCorner": " NOTTOBEPLACEDON",
-          "BottomRightCorner": " EMPTY",
-          "requirements": "[MUSHROOM, MUSHROOM, MUSHROOM]",
-          "multiplier": 10
+          },
+          "requirementsForPlacing": [
+            "ANIMAL",
+            "ANIMAL",
+            "ANIMAL",
+            "MUSHROOM"
+          ],
+          "multiplier": "NUMOFCOVEREDCORNERS"
         }
       ],
       "board": {
@@ -15246,103 +15303,103 @@
         ]
       },
       "secretChosenCard": {
-        "id": 94,
-        "value": 3,
+        "id": 87,
+        "value": 2,
         "TL": {
           "specificCornerSeed": "EMPTY",
           "x": 0,
           "y": 0,
-          "cardSeed": "INSECT",
+          "cardSeed": "MUSHROOM",
           "isThisCornerFree": true
         },
         "TR": {
           "specificCornerSeed": "EMPTY",
           "x": 0,
           "y": 0,
-          "cardSeed": "INSECT",
+          "cardSeed": "MUSHROOM",
           "isThisCornerFree": true
         },
         "BL": {
           "specificCornerSeed": "EMPTY",
           "x": 0,
           "y": 0,
-          "cardSeed": "INSECT",
+          "cardSeed": "MUSHROOM",
           "isThisCornerFree": true
         },
         "BR": {
           "specificCornerSeed": "EMPTY",
           "x": 0,
           "y": 0,
-          "cardSeed": "INSECT",
+          "cardSeed": "MUSHROOM",
           "isThisCornerFree": true
         },
         "numberOfWhenTheGameEnds": 3,
-        "objectiveSpecificTypeOfCard": "L"
+        "objectiveSpecificTypeOfCard": "STAIRS"
       }
     },
     {
-      "nickname": "beta",
+      "nickname": "b",
       "score": 1,
       "dot": 0,
       "player_deck": [
         {
-          "id": 19,
-          "type": "PLANT",
+          "id": 10,
+          "type": "MUSHROOM",
           "value": 1,
           "TL": {
-            "specificCornerSeed": "EMPTY",
+            "specificCornerSeed": "NOTTOBEPLACEDON",
             "x": 0,
             "y": 0,
-            "cardSeed": "PLANT",
+            "cardSeed": "MUSHROOM",
             "isThisCornerFree": true
           },
           "TR": {
             "specificCornerSeed": "EMPTY",
             "x": 0,
             "y": 0,
-            "cardSeed": "PLANT",
+            "cardSeed": "MUSHROOM",
             "isThisCornerFree": true
           },
           "BL": {
-            "specificCornerSeed": "NOTTOBEPLACEDON",
+            "specificCornerSeed": "MUSHROOM",
             "x": 0,
             "y": 0,
-            "cardSeed": "PLANT",
+            "cardSeed": "MUSHROOM",
             "isThisCornerFree": true
           },
           "BR": {
-            "specificCornerSeed": "PLANT",
+            "specificCornerSeed": "EMPTY",
             "x": 0,
             "y": 0,
-            "cardSeed": "PLANT",
+            "cardSeed": "MUSHROOM",
             "isThisCornerFree": true
           },
           "TLBack": {
-            "specificCornerSeed": "EMPTY",
+            "specificCornerSeed": "NOTTOBEPLACEDON",
             "x": 0,
             "y": 0,
-            "cardSeed": "PLANT",
+            "cardSeed": "MUSHROOM",
             "isThisCornerFree": true
           },
           "TRBack": {
             "specificCornerSeed": "EMPTY",
             "x": 0,
             "y": 0,
-            "cardSeed": "PLANT",
+            "cardSeed": "MUSHROOM",
             "isThisCornerFree": true
           },
           "BLBack": {
-            "specificCornerSeed": "NOTTOBEPLACEDON",
+            "specificCornerSeed": "MUSHROOM",
             "x": 0,
             "y": 0,
-            "cardSeed": "PLANT",
+            "cardSeed": "MUSHROOM",
             "isThisCornerFree": true
           },
           "BRBack": {
-            "specificCornerSeed": "PLANT",
+            "specificCornerSeed": "EMPTY",
             "x": 0,
             "y": 0,
-            "cardSeed": "PLANT",
+            "cardSeed": "MUSHROOM",
             "isThisCornerFree": true
           }
         },
@@ -15408,15 +15465,71 @@
           }
         },
         {
-          "id": 61,
-          "specificSeedType": 1,
+          "id": 63,
+          "type": "ANIMAL",
           "value": 1,
-          "TopLeftCorner": " INKWELL",
-          "TopRightCorner": " EMPTY",
-          "BottomLeftCorner": " EMPTY",
-          "BottomRightCorner": " NOTTOBEPLACEDON",
-          "requirements": "[ANIMAL, ANIMAL, INSECT]",
-          "multiplier": 4
+          "TL": {
+            "specificCornerSeed": "EMPTY",
+            "x": 0,
+            "y": 0,
+            "cardSeed": "ANIMAL",
+            "isThisCornerFree": true
+          },
+          "TR": {
+            "specificCornerSeed": "NOTTOBEPLACEDON",
+            "x": 0,
+            "y": 0,
+            "cardSeed": "ANIMAL",
+            "isThisCornerFree": true
+          },
+          "BL": {
+            "specificCornerSeed": "FEATHER",
+            "x": 0,
+            "y": 0,
+            "cardSeed": "ANIMAL",
+            "isThisCornerFree": true
+          },
+          "BR": {
+            "specificCornerSeed": "EMPTY",
+            "x": 0,
+            "y": 0,
+            "cardSeed": "ANIMAL",
+            "isThisCornerFree": true
+          },
+          "TLBack": {
+            "specificCornerSeed": "EMPTY",
+            "x": 0,
+            "y": 0,
+            "cardSeed": "ANIMAL",
+            "isThisCornerFree": true
+          },
+          "TRBack": {
+            "specificCornerSeed": "NOTTOBEPLACEDON",
+            "x": 0,
+            "y": 0,
+            "cardSeed": "ANIMAL",
+            "isThisCornerFree": true
+          },
+          "BLBack": {
+            "specificCornerSeed": "FEATHER",
+            "x": 0,
+            "y": 0,
+            "cardSeed": "ANIMAL",
+            "isThisCornerFree": true
+          },
+          "BRBack": {
+            "specificCornerSeed": "EMPTY",
+            "x": 0,
+            "y": 0,
+            "cardSeed": "ANIMAL",
+            "isThisCornerFree": true
+          },
+          "requirementsForPlacing": [
+            "ANIMAL",
+            "ANIMAL",
+            "MUSHROOM"
+          ],
+          "multiplier": "FEATHER"
         }
       ],
       "board": {
@@ -22823,7 +22936,7 @@
               "value": 1
             },
             {
-              "specificNodeSeed": "MUSHROOM",
+              "specificNodeSeed": "ANIMAL",
               "coordX": 24,
               "coordY": 25,
               "value": 1
@@ -23119,13 +23232,13 @@
               "value": 2
             },
             {
-              "specificNodeSeed": "PLANT",
+              "specificNodeSeed": "MUSHROOM",
               "coordX": 25,
               "coordY": 24,
               "value": 1
             },
             {
-              "specificNodeSeed": "ANIMAL",
+              "specificNodeSeed": "PLANT",
               "coordX": 25,
               "coordY": 25,
               "value": 1
@@ -30526,55 +30639,117 @@
         ]
       },
       "secretChosenCard": {
-        "id": 100,
+        "id": 88,
         "value": 2,
         "TL": {
           "specificCornerSeed": "EMPTY",
           "x": 0,
           "y": 0,
-          "cardSeed": "PARCHMENT",
+          "cardSeed": "PLANT",
           "isThisCornerFree": true
         },
         "TR": {
           "specificCornerSeed": "EMPTY",
           "x": 0,
           "y": 0,
-          "cardSeed": "PARCHMENT",
+          "cardSeed": "PLANT",
           "isThisCornerFree": true
         },
         "BL": {
           "specificCornerSeed": "EMPTY",
           "x": 0,
           "y": 0,
-          "cardSeed": "PARCHMENT",
+          "cardSeed": "PLANT",
           "isThisCornerFree": true
         },
         "BR": {
           "specificCornerSeed": "EMPTY",
           "x": 0,
           "y": 0,
-          "cardSeed": "PARCHMENT",
+          "cardSeed": "PLANT",
           "isThisCornerFree": true
         },
-        "numberOfWhenTheGameEnds": 2,
-        "objectiveSpecificTypeOfCard": "BIS"
+        "numberOfWhenTheGameEnds": 3,
+        "objectiveSpecificTypeOfCard": "STAIRS"
       }
     }
   ],
+  "currentPlayer": "b",
   "resourceDeck": [
     {
-      "id": 1,
+      "id": 15,
+      "type": "PLANT",
+      "value": 0,
+      "TL": {
+        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "PLANT",
+        "isThisCornerFree": true
+      },
+      "TR": {
+        "specificCornerSeed": "INSECT",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "PLANT",
+        "isThisCornerFree": true
+      },
+      "BL": {
+        "specificCornerSeed": "FEATHER",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "PLANT",
+        "isThisCornerFree": true
+      },
+      "BR": {
+        "specificCornerSeed": "PLANT",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "PLANT",
+        "isThisCornerFree": true
+      },
+      "TLBack": {
+        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "PLANT",
+        "isThisCornerFree": true
+      },
+      "TRBack": {
+        "specificCornerSeed": "INSECT",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "PLANT",
+        "isThisCornerFree": true
+      },
+      "BLBack": {
+        "specificCornerSeed": "FEATHER",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "PLANT",
+        "isThisCornerFree": true
+      },
+      "BRBack": {
+        "specificCornerSeed": "PLANT",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "PLANT",
+        "isThisCornerFree": true
+      }
+    },
+    {
+      "id": 3,
       "type": "MUSHROOM",
       "value": 0,
       "TL": {
-        "specificCornerSeed": "MUSHROOM",
+        "specificCornerSeed": "EMPTY",
         "x": 0,
         "y": 0,
         "cardSeed": "MUSHROOM",
         "isThisCornerFree": true
       },
       "TR": {
-        "specificCornerSeed": "EMPTY",
+        "specificCornerSeed": "NOTTOBEPLACEDON",
         "x": 0,
         "y": 0,
         "cardSeed": "MUSHROOM",
@@ -30588,21 +30763,21 @@
         "isThisCornerFree": true
       },
       "BR": {
-        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "specificCornerSeed": "MUSHROOM",
         "x": 0,
         "y": 0,
         "cardSeed": "MUSHROOM",
         "isThisCornerFree": true
       },
       "TLBack": {
-        "specificCornerSeed": "MUSHROOM",
+        "specificCornerSeed": "EMPTY",
         "x": 0,
         "y": 0,
         "cardSeed": "MUSHROOM",
         "isThisCornerFree": true
       },
       "TRBack": {
-        "specificCornerSeed": "EMPTY",
+        "specificCornerSeed": "NOTTOBEPLACEDON",
         "x": 0,
         "y": 0,
         "cardSeed": "MUSHROOM",
@@ -30616,10 +30791,132 @@
         "isThisCornerFree": true
       },
       "BRBack": {
+        "specificCornerSeed": "MUSHROOM",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "MUSHROOM",
+        "isThisCornerFree": true
+      }
+    },
+    {
+      "id": 36,
+      "type": "INSECT",
+      "value": 0,
+      "TL": {
+        "specificCornerSeed": "PARCHMENT",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "INSECT",
+        "isThisCornerFree": true
+      },
+      "TR": {
+        "specificCornerSeed": "INSECT",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "INSECT",
+        "isThisCornerFree": true
+      },
+      "BL": {
         "specificCornerSeed": "NOTTOBEPLACEDON",
         "x": 0,
         "y": 0,
-        "cardSeed": "MUSHROOM",
+        "cardSeed": "INSECT",
+        "isThisCornerFree": true
+      },
+      "BR": {
+        "specificCornerSeed": "MUSHROOM",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "INSECT",
+        "isThisCornerFree": true
+      },
+      "TLBack": {
+        "specificCornerSeed": "PARCHMENT",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "INSECT",
+        "isThisCornerFree": true
+      },
+      "TRBack": {
+        "specificCornerSeed": "INSECT",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "INSECT",
+        "isThisCornerFree": true
+      },
+      "BLBack": {
+        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "INSECT",
+        "isThisCornerFree": true
+      },
+      "BRBack": {
+        "specificCornerSeed": "MUSHROOM",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "INSECT",
+        "isThisCornerFree": true
+      }
+    },
+    {
+      "id": 38,
+      "type": "INSECT",
+      "value": 1,
+      "TL": {
+        "specificCornerSeed": "INSECT",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "INSECT",
+        "isThisCornerFree": true
+      },
+      "TR": {
+        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "INSECT",
+        "isThisCornerFree": true
+      },
+      "BL": {
+        "specificCornerSeed": "EMPTY",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "INSECT",
+        "isThisCornerFree": true
+      },
+      "BR": {
+        "specificCornerSeed": "EMPTY",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "INSECT",
+        "isThisCornerFree": true
+      },
+      "TLBack": {
+        "specificCornerSeed": "INSECT",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "INSECT",
+        "isThisCornerFree": true
+      },
+      "TRBack": {
+        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "INSECT",
+        "isThisCornerFree": true
+      },
+      "BLBack": {
+        "specificCornerSeed": "EMPTY",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "INSECT",
+        "isThisCornerFree": true
+      },
+      "BRBack": {
+        "specificCornerSeed": "EMPTY",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "INSECT",
         "isThisCornerFree": true
       }
     },
@@ -30685,9 +30982,70 @@
       }
     },
     {
-      "id": 9,
+      "id": 27,
+      "type": "ANIMAL",
+      "value": 0,
+      "TL": {
+        "specificCornerSeed": "FEATHER",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "ANIMAL",
+        "isThisCornerFree": true
+      },
+      "TR": {
+        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "ANIMAL",
+        "isThisCornerFree": true
+      },
+      "BL": {
+        "specificCornerSeed": "ANIMAL",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "ANIMAL",
+        "isThisCornerFree": true
+      },
+      "BR": {
+        "specificCornerSeed": "MUSHROOM",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "ANIMAL",
+        "isThisCornerFree": true
+      },
+      "TLBack": {
+        "specificCornerSeed": "FEATHER",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "ANIMAL",
+        "isThisCornerFree": true
+      },
+      "TRBack": {
+        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "ANIMAL",
+        "isThisCornerFree": true
+      },
+      "BLBack": {
+        "specificCornerSeed": "ANIMAL",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "ANIMAL",
+        "isThisCornerFree": true
+      },
+      "BRBack": {
+        "specificCornerSeed": "MUSHROOM",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "ANIMAL",
+        "isThisCornerFree": true
+      }
+    },
+    {
+      "id": 2,
       "type": "MUSHROOM",
-      "value": 1,
+      "value": 0,
       "TL": {
         "specificCornerSeed": "MUSHROOM",
         "x": 0,
@@ -30696,14 +31054,14 @@
         "isThisCornerFree": true
       },
       "TR": {
-        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "specificCornerSeed": "MUSHROOM",
         "x": 0,
         "y": 0,
         "cardSeed": "MUSHROOM",
         "isThisCornerFree": true
       },
       "BL": {
-        "specificCornerSeed": "EMPTY",
+        "specificCornerSeed": "NOTTOBEPLACEDON",
         "x": 0,
         "y": 0,
         "cardSeed": "MUSHROOM",
@@ -30724,14 +31082,14 @@
         "isThisCornerFree": true
       },
       "TRBack": {
-        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "specificCornerSeed": "MUSHROOM",
         "x": 0,
         "y": 0,
         "cardSeed": "MUSHROOM",
         "isThisCornerFree": true
       },
       "BLBack": {
-        "specificCornerSeed": "EMPTY",
+        "specificCornerSeed": "NOTTOBEPLACEDON",
         "x": 0,
         "y": 0,
         "cardSeed": "MUSHROOM",
@@ -30746,60 +31104,60 @@
       }
     },
     {
-      "id": 6,
+      "id": 7,
       "type": "MUSHROOM",
       "value": 0,
       "TL": {
-        "specificCornerSeed": "INKWELL",
+        "specificCornerSeed": "MUSHROOM",
         "x": 0,
         "y": 0,
         "cardSeed": "MUSHROOM",
         "isThisCornerFree": true
       },
       "TR": {
-        "specificCornerSeed": "MUSHROOM",
+        "specificCornerSeed": "INSECT",
         "x": 0,
         "y": 0,
         "cardSeed": "MUSHROOM",
         "isThisCornerFree": true
       },
       "BL": {
-        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "specificCornerSeed": "PARCHMENT",
         "x": 0,
         "y": 0,
         "cardSeed": "MUSHROOM",
         "isThisCornerFree": true
       },
       "BR": {
-        "specificCornerSeed": "ANIMAL",
+        "specificCornerSeed": "EMPTY",
         "x": 0,
         "y": 0,
         "cardSeed": "MUSHROOM",
         "isThisCornerFree": true
       },
       "TLBack": {
-        "specificCornerSeed": "INKWELL",
+        "specificCornerSeed": "MUSHROOM",
         "x": 0,
         "y": 0,
         "cardSeed": "MUSHROOM",
         "isThisCornerFree": true
       },
       "TRBack": {
-        "specificCornerSeed": "MUSHROOM",
+        "specificCornerSeed": "INSECT",
         "x": 0,
         "y": 0,
         "cardSeed": "MUSHROOM",
         "isThisCornerFree": true
       },
       "BLBack": {
-        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "specificCornerSeed": "PARCHMENT",
         "x": 0,
         "y": 0,
         "cardSeed": "MUSHROOM",
         "isThisCornerFree": true
       },
       "BRBack": {
-        "specificCornerSeed": "ANIMAL",
+        "specificCornerSeed": "EMPTY",
         "x": 0,
         "y": 0,
         "cardSeed": "MUSHROOM",
@@ -30807,72 +31165,72 @@
       }
     },
     {
-      "id": 33,
-      "type": "INSECT",
+      "id": 26,
+      "type": "ANIMAL",
       "value": 0,
       "TL": {
-        "specificCornerSeed": "INSECT",
+        "specificCornerSeed": "PLANT",
         "x": 0,
         "y": 0,
-        "cardSeed": "INSECT",
+        "cardSeed": "ANIMAL",
         "isThisCornerFree": true
       },
       "TR": {
-        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "specificCornerSeed": "ANIMAL",
         "x": 0,
         "y": 0,
-        "cardSeed": "INSECT",
+        "cardSeed": "ANIMAL",
         "isThisCornerFree": true
       },
       "BL": {
-        "specificCornerSeed": "INSECT",
+        "specificCornerSeed": "NOTTOBEPLACEDON",
         "x": 0,
         "y": 0,
-        "cardSeed": "INSECT",
+        "cardSeed": "ANIMAL",
         "isThisCornerFree": true
       },
       "BR": {
-        "specificCornerSeed": "EMPTY",
+        "specificCornerSeed": "PARCHMENT",
         "x": 0,
         "y": 0,
-        "cardSeed": "INSECT",
+        "cardSeed": "ANIMAL",
         "isThisCornerFree": true
       },
       "TLBack": {
-        "specificCornerSeed": "INSECT",
+        "specificCornerSeed": "PLANT",
         "x": 0,
         "y": 0,
-        "cardSeed": "INSECT",
+        "cardSeed": "ANIMAL",
         "isThisCornerFree": true
       },
       "TRBack": {
-        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "specificCornerSeed": "ANIMAL",
         "x": 0,
         "y": 0,
-        "cardSeed": "INSECT",
+        "cardSeed": "ANIMAL",
         "isThisCornerFree": true
       },
       "BLBack": {
-        "specificCornerSeed": "INSECT",
+        "specificCornerSeed": "NOTTOBEPLACEDON",
         "x": 0,
         "y": 0,
-        "cardSeed": "INSECT",
+        "cardSeed": "ANIMAL",
         "isThisCornerFree": true
       },
       "BRBack": {
-        "specificCornerSeed": "EMPTY",
+        "specificCornerSeed": "PARCHMENT",
         "x": 0,
         "y": 0,
-        "cardSeed": "INSECT",
+        "cardSeed": "ANIMAL",
         "isThisCornerFree": true
       }
     },
     {
-      "id": 30,
+      "id": 21,
       "type": "ANIMAL",
-      "value": 1,
+      "value": 0,
       "TL": {
-        "specificCornerSeed": "EMPTY",
+        "specificCornerSeed": "ANIMAL",
         "x": 0,
         "y": 0,
         "cardSeed": "ANIMAL",
@@ -30900,7 +31258,7 @@
         "isThisCornerFree": true
       },
       "TLBack": {
-        "specificCornerSeed": "EMPTY",
+        "specificCornerSeed": "ANIMAL",
         "x": 0,
         "y": 0,
         "cardSeed": "ANIMAL",
@@ -30929,72 +31287,72 @@
       }
     },
     {
-      "id": 32,
-      "type": "INSECT",
+      "id": 6,
+      "type": "MUSHROOM",
       "value": 0,
       "TL": {
-        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "specificCornerSeed": "INKWELL",
         "x": 0,
         "y": 0,
-        "cardSeed": "INSECT",
+        "cardSeed": "MUSHROOM",
         "isThisCornerFree": true
       },
       "TR": {
-        "specificCornerSeed": "EMPTY",
+        "specificCornerSeed": "MUSHROOM",
         "x": 0,
         "y": 0,
-        "cardSeed": "INSECT",
+        "cardSeed": "MUSHROOM",
         "isThisCornerFree": true
       },
       "BL": {
-        "specificCornerSeed": "INSECT",
+        "specificCornerSeed": "NOTTOBEPLACEDON",
         "x": 0,
         "y": 0,
-        "cardSeed": "INSECT",
+        "cardSeed": "MUSHROOM",
         "isThisCornerFree": true
       },
       "BR": {
-        "specificCornerSeed": "INSECT",
+        "specificCornerSeed": "ANIMAL",
         "x": 0,
         "y": 0,
-        "cardSeed": "INSECT",
+        "cardSeed": "MUSHROOM",
         "isThisCornerFree": true
       },
       "TLBack": {
-        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "specificCornerSeed": "INKWELL",
         "x": 0,
         "y": 0,
-        "cardSeed": "INSECT",
+        "cardSeed": "MUSHROOM",
         "isThisCornerFree": true
       },
       "TRBack": {
-        "specificCornerSeed": "EMPTY",
+        "specificCornerSeed": "MUSHROOM",
         "x": 0,
         "y": 0,
-        "cardSeed": "INSECT",
+        "cardSeed": "MUSHROOM",
         "isThisCornerFree": true
       },
       "BLBack": {
-        "specificCornerSeed": "INSECT",
+        "specificCornerSeed": "NOTTOBEPLACEDON",
         "x": 0,
         "y": 0,
-        "cardSeed": "INSECT",
+        "cardSeed": "MUSHROOM",
         "isThisCornerFree": true
       },
       "BRBack": {
-        "specificCornerSeed": "INSECT",
+        "specificCornerSeed": "ANIMAL",
         "x": 0,
         "y": 0,
-        "cardSeed": "INSECT",
+        "cardSeed": "MUSHROOM",
         "isThisCornerFree": true
       }
     },
     {
-      "id": 13,
+      "id": 17,
       "type": "PLANT",
       "value": 0,
       "TL": {
-        "specificCornerSeed": "EMPTY",
+        "specificCornerSeed": "PARCHMENT",
         "x": 0,
         "y": 0,
         "cardSeed": "PLANT",
@@ -31015,14 +31373,14 @@
         "isThisCornerFree": true
       },
       "BR": {
-        "specificCornerSeed": "PLANT",
+        "specificCornerSeed": "ANIMAL",
         "x": 0,
         "y": 0,
         "cardSeed": "PLANT",
         "isThisCornerFree": true
       },
       "TLBack": {
-        "specificCornerSeed": "EMPTY",
+        "specificCornerSeed": "PARCHMENT",
         "x": 0,
         "y": 0,
         "cardSeed": "PLANT",
@@ -31043,7 +31401,7 @@
         "isThisCornerFree": true
       },
       "BRBack": {
-        "specificCornerSeed": "PLANT",
+        "specificCornerSeed": "ANIMAL",
         "x": 0,
         "y": 0,
         "cardSeed": "PLANT",
@@ -31051,25 +31409,25 @@
       }
     },
     {
-      "id": 3,
+      "id": 5,
       "type": "MUSHROOM",
       "value": 0,
       "TL": {
-        "specificCornerSeed": "EMPTY",
+        "specificCornerSeed": "NOTTOBEPLACEDON",
         "x": 0,
         "y": 0,
         "cardSeed": "MUSHROOM",
         "isThisCornerFree": true
       },
       "TR": {
-        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "specificCornerSeed": "FEATHER",
         "x": 0,
         "y": 0,
         "cardSeed": "MUSHROOM",
         "isThisCornerFree": true
       },
       "BL": {
-        "specificCornerSeed": "MUSHROOM",
+        "specificCornerSeed": "PLANT",
         "x": 0,
         "y": 0,
         "cardSeed": "MUSHROOM",
@@ -31083,21 +31441,21 @@
         "isThisCornerFree": true
       },
       "TLBack": {
-        "specificCornerSeed": "EMPTY",
+        "specificCornerSeed": "NOTTOBEPLACEDON",
         "x": 0,
         "y": 0,
         "cardSeed": "MUSHROOM",
         "isThisCornerFree": true
       },
       "TRBack": {
-        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "specificCornerSeed": "FEATHER",
         "x": 0,
         "y": 0,
         "cardSeed": "MUSHROOM",
         "isThisCornerFree": true
       },
       "BLBack": {
-        "specificCornerSeed": "MUSHROOM",
+        "specificCornerSeed": "PLANT",
         "x": 0,
         "y": 0,
         "cardSeed": "MUSHROOM",
@@ -31112,7 +31470,68 @@
       }
     },
     {
-      "id": 2,
+      "id": 37,
+      "type": "INSECT",
+      "value": 0,
+      "TL": {
+        "specificCornerSeed": "INSECT",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "INSECT",
+        "isThisCornerFree": true
+      },
+      "TR": {
+        "specificCornerSeed": "PLANT",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "INSECT",
+        "isThisCornerFree": true
+      },
+      "BL": {
+        "specificCornerSeed": "INKWELL",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "INSECT",
+        "isThisCornerFree": true
+      },
+      "BR": {
+        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "INSECT",
+        "isThisCornerFree": true
+      },
+      "TLBack": {
+        "specificCornerSeed": "INSECT",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "INSECT",
+        "isThisCornerFree": true
+      },
+      "TRBack": {
+        "specificCornerSeed": "PLANT",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "INSECT",
+        "isThisCornerFree": true
+      },
+      "BLBack": {
+        "specificCornerSeed": "INKWELL",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "INSECT",
+        "isThisCornerFree": true
+      },
+      "BRBack": {
+        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "INSECT",
+        "isThisCornerFree": true
+      }
+    },
+    {
+      "id": 1,
       "type": "MUSHROOM",
       "value": 0,
       "TL": {
@@ -31123,21 +31542,21 @@
         "isThisCornerFree": true
       },
       "TR": {
-        "specificCornerSeed": "MUSHROOM",
+        "specificCornerSeed": "EMPTY",
         "x": 0,
         "y": 0,
         "cardSeed": "MUSHROOM",
         "isThisCornerFree": true
       },
       "BL": {
-        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "specificCornerSeed": "MUSHROOM",
         "x": 0,
         "y": 0,
         "cardSeed": "MUSHROOM",
         "isThisCornerFree": true
       },
       "BR": {
-        "specificCornerSeed": "EMPTY",
+        "specificCornerSeed": "NOTTOBEPLACEDON",
         "x": 0,
         "y": 0,
         "cardSeed": "MUSHROOM",
@@ -31151,40 +31570,223 @@
         "isThisCornerFree": true
       },
       "TRBack": {
+        "specificCornerSeed": "EMPTY",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "MUSHROOM",
+        "isThisCornerFree": true
+      },
+      "BLBack": {
         "specificCornerSeed": "MUSHROOM",
         "x": 0,
         "y": 0,
         "cardSeed": "MUSHROOM",
         "isThisCornerFree": true
       },
-      "BLBack": {
+      "BRBack": {
         "specificCornerSeed": "NOTTOBEPLACEDON",
         "x": 0,
         "y": 0,
         "cardSeed": "MUSHROOM",
         "isThisCornerFree": true
+      }
+    },
+    {
+      "id": 40,
+      "type": "INSECT",
+      "value": 1,
+      "TL": {
+        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "INSECT",
+        "isThisCornerFree": true
+      },
+      "TR": {
+        "specificCornerSeed": "INSECT",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "INSECT",
+        "isThisCornerFree": true
+      },
+      "BL": {
+        "specificCornerSeed": "EMPTY",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "INSECT",
+        "isThisCornerFree": true
+      },
+      "BR": {
+        "specificCornerSeed": "EMPTY",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "INSECT",
+        "isThisCornerFree": true
+      },
+      "TLBack": {
+        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "INSECT",
+        "isThisCornerFree": true
+      },
+      "TRBack": {
+        "specificCornerSeed": "INSECT",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "INSECT",
+        "isThisCornerFree": true
+      },
+      "BLBack": {
+        "specificCornerSeed": "EMPTY",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "INSECT",
+        "isThisCornerFree": true
       },
       "BRBack": {
         "specificCornerSeed": "EMPTY",
         "x": 0,
         "y": 0,
-        "cardSeed": "MUSHROOM",
+        "cardSeed": "INSECT",
         "isThisCornerFree": true
       }
     },
     {
-      "id": 8,
+      "id": 35,
+      "type": "INSECT",
+      "value": 0,
+      "TL": {
+        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "INSECT",
+        "isThisCornerFree": true
+      },
+      "TR": {
+        "specificCornerSeed": "FEATHER",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "INSECT",
+        "isThisCornerFree": true
+      },
+      "BL": {
+        "specificCornerSeed": "ANIMAL",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "INSECT",
+        "isThisCornerFree": true
+      },
+      "BR": {
+        "specificCornerSeed": "INSECT",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "INSECT",
+        "isThisCornerFree": true
+      },
+      "TLBack": {
+        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "INSECT",
+        "isThisCornerFree": true
+      },
+      "TRBack": {
+        "specificCornerSeed": "FEATHER",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "INSECT",
+        "isThisCornerFree": true
+      },
+      "BLBack": {
+        "specificCornerSeed": "ANIMAL",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "INSECT",
+        "isThisCornerFree": true
+      },
+      "BRBack": {
+        "specificCornerSeed": "INSECT",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "INSECT",
+        "isThisCornerFree": true
+      }
+    },
+    {
+      "id": 25,
+      "type": "ANIMAL",
+      "value": 0,
+      "TL": {
+        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "ANIMAL",
+        "isThisCornerFree": true
+      },
+      "TR": {
+        "specificCornerSeed": "INSECT",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "ANIMAL",
+        "isThisCornerFree": true
+      },
+      "BL": {
+        "specificCornerSeed": "INKWELL",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "ANIMAL",
+        "isThisCornerFree": true
+      },
+      "BR": {
+        "specificCornerSeed": "ANIMAL",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "ANIMAL",
+        "isThisCornerFree": true
+      },
+      "TLBack": {
+        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "ANIMAL",
+        "isThisCornerFree": true
+      },
+      "TRBack": {
+        "specificCornerSeed": "INSECT",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "ANIMAL",
+        "isThisCornerFree": true
+      },
+      "BLBack": {
+        "specificCornerSeed": "INKWELL",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "ANIMAL",
+        "isThisCornerFree": true
+      },
+      "BRBack": {
+        "specificCornerSeed": "ANIMAL",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "ANIMAL",
+        "isThisCornerFree": true
+      }
+    },
+    {
+      "id": 9,
       "type": "MUSHROOM",
       "value": 1,
       "TL": {
-        "specificCornerSeed": "EMPTY",
+        "specificCornerSeed": "MUSHROOM",
         "x": 0,
         "y": 0,
         "cardSeed": "MUSHROOM",
         "isThisCornerFree": true
       },
       "TR": {
-        "specificCornerSeed": "MUSHROOM",
+        "specificCornerSeed": "NOTTOBEPLACEDON",
         "x": 0,
         "y": 0,
         "cardSeed": "MUSHROOM",
@@ -31198,21 +31800,21 @@
         "isThisCornerFree": true
       },
       "BR": {
-        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "specificCornerSeed": "EMPTY",
         "x": 0,
         "y": 0,
         "cardSeed": "MUSHROOM",
         "isThisCornerFree": true
       },
       "TLBack": {
-        "specificCornerSeed": "EMPTY",
+        "specificCornerSeed": "MUSHROOM",
         "x": 0,
         "y": 0,
         "cardSeed": "MUSHROOM",
         "isThisCornerFree": true
       },
       "TRBack": {
-        "specificCornerSeed": "MUSHROOM",
+        "specificCornerSeed": "NOTTOBEPLACEDON",
         "x": 0,
         "y": 0,
         "cardSeed": "MUSHROOM",
@@ -31226,7 +31828,7 @@
         "isThisCornerFree": true
       },
       "BRBack": {
-        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "specificCornerSeed": "EMPTY",
         "x": 0,
         "y": 0,
         "cardSeed": "MUSHROOM",
@@ -31234,11 +31836,72 @@
       }
     },
     {
-      "id": 21,
+      "id": 34,
+      "type": "INSECT",
+      "value": 0,
+      "TL": {
+        "specificCornerSeed": "EMPTY",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "INSECT",
+        "isThisCornerFree": true
+      },
+      "TR": {
+        "specificCornerSeed": "INSECT",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "INSECT",
+        "isThisCornerFree": true
+      },
+      "BL": {
+        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "INSECT",
+        "isThisCornerFree": true
+      },
+      "BR": {
+        "specificCornerSeed": "INSECT",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "INSECT",
+        "isThisCornerFree": true
+      },
+      "TLBack": {
+        "specificCornerSeed": "EMPTY",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "INSECT",
+        "isThisCornerFree": true
+      },
+      "TRBack": {
+        "specificCornerSeed": "INSECT",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "INSECT",
+        "isThisCornerFree": true
+      },
+      "BLBack": {
+        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "INSECT",
+        "isThisCornerFree": true
+      },
+      "BRBack": {
+        "specificCornerSeed": "INSECT",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "INSECT",
+        "isThisCornerFree": true
+      }
+    },
+    {
+      "id": 30,
       "type": "ANIMAL",
-      "value": 0,
+      "value": 1,
       "TL": {
-        "specificCornerSeed": "ANIMAL",
+        "specificCornerSeed": "EMPTY",
         "x": 0,
         "y": 0,
         "cardSeed": "ANIMAL",
@@ -31266,7 +31929,7 @@
         "isThisCornerFree": true
       },
       "TLBack": {
-        "specificCornerSeed": "ANIMAL",
+        "specificCornerSeed": "EMPTY",
         "x": 0,
         "y": 0,
         "cardSeed": "ANIMAL",
@@ -31295,9 +31958,9 @@
       }
     },
     {
-      "id": 25,
+      "id": 28,
       "type": "ANIMAL",
-      "value": 0,
+      "value": 1,
       "TL": {
         "specificCornerSeed": "NOTTOBEPLACEDON",
         "x": 0,
@@ -31306,21 +31969,21 @@
         "isThisCornerFree": true
       },
       "TR": {
-        "specificCornerSeed": "INSECT",
+        "specificCornerSeed": "EMPTY",
         "x": 0,
         "y": 0,
         "cardSeed": "ANIMAL",
         "isThisCornerFree": true
       },
       "BL": {
-        "specificCornerSeed": "INKWELL",
+        "specificCornerSeed": "ANIMAL",
         "x": 0,
         "y": 0,
         "cardSeed": "ANIMAL",
         "isThisCornerFree": true
       },
       "BR": {
-        "specificCornerSeed": "ANIMAL",
+        "specificCornerSeed": "EMPTY",
         "x": 0,
         "y": 0,
         "cardSeed": "ANIMAL",
@@ -31334,21 +31997,21 @@
         "isThisCornerFree": true
       },
       "TRBack": {
-        "specificCornerSeed": "INSECT",
+        "specificCornerSeed": "EMPTY",
         "x": 0,
         "y": 0,
         "cardSeed": "ANIMAL",
         "isThisCornerFree": true
       },
       "BLBack": {
-        "specificCornerSeed": "INKWELL",
+        "specificCornerSeed": "ANIMAL",
         "x": 0,
         "y": 0,
         "cardSeed": "ANIMAL",
         "isThisCornerFree": true
       },
       "BRBack": {
-        "specificCornerSeed": "ANIMAL",
+        "specificCornerSeed": "EMPTY",
         "x": 0,
         "y": 0,
         "cardSeed": "ANIMAL",
@@ -31356,9 +32019,9 @@
       }
     },
     {
-      "id": 34,
+      "id": 39,
       "type": "INSECT",
-      "value": 0,
+      "value": 1,
       "TL": {
         "specificCornerSeed": "EMPTY",
         "x": 0,
@@ -31367,7 +32030,7 @@
         "isThisCornerFree": true
       },
       "TR": {
-        "specificCornerSeed": "INSECT",
+        "specificCornerSeed": "EMPTY",
         "x": 0,
         "y": 0,
         "cardSeed": "INSECT",
@@ -31395,7 +32058,7 @@
         "isThisCornerFree": true
       },
       "TRBack": {
-        "specificCornerSeed": "INSECT",
+        "specificCornerSeed": "EMPTY",
         "x": 0,
         "y": 0,
         "cardSeed": "INSECT",
@@ -31417,60 +32080,121 @@
       }
     },
     {
-      "id": 15,
+      "id": 33,
+      "type": "INSECT",
+      "value": 0,
+      "TL": {
+        "specificCornerSeed": "INSECT",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "INSECT",
+        "isThisCornerFree": true
+      },
+      "TR": {
+        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "INSECT",
+        "isThisCornerFree": true
+      },
+      "BL": {
+        "specificCornerSeed": "INSECT",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "INSECT",
+        "isThisCornerFree": true
+      },
+      "BR": {
+        "specificCornerSeed": "EMPTY",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "INSECT",
+        "isThisCornerFree": true
+      },
+      "TLBack": {
+        "specificCornerSeed": "INSECT",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "INSECT",
+        "isThisCornerFree": true
+      },
+      "TRBack": {
+        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "INSECT",
+        "isThisCornerFree": true
+      },
+      "BLBack": {
+        "specificCornerSeed": "INSECT",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "INSECT",
+        "isThisCornerFree": true
+      },
+      "BRBack": {
+        "specificCornerSeed": "EMPTY",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "INSECT",
+        "isThisCornerFree": true
+      }
+    },
+    {
+      "id": 16,
       "type": "PLANT",
       "value": 0,
       "TL": {
-        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "specificCornerSeed": "MUSHROOM",
         "x": 0,
         "y": 0,
         "cardSeed": "PLANT",
         "isThisCornerFree": true
       },
       "TR": {
-        "specificCornerSeed": "INSECT",
+        "specificCornerSeed": "PLANT",
         "x": 0,
         "y": 0,
         "cardSeed": "PLANT",
         "isThisCornerFree": true
       },
       "BL": {
-        "specificCornerSeed": "FEATHER",
+        "specificCornerSeed": "NOTTOBEPLACEDON",
         "x": 0,
         "y": 0,
         "cardSeed": "PLANT",
         "isThisCornerFree": true
       },
       "BR": {
-        "specificCornerSeed": "PLANT",
+        "specificCornerSeed": "INKWELL",
         "x": 0,
         "y": 0,
         "cardSeed": "PLANT",
         "isThisCornerFree": true
       },
       "TLBack": {
-        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "specificCornerSeed": "MUSHROOM",
         "x": 0,
         "y": 0,
         "cardSeed": "PLANT",
         "isThisCornerFree": true
       },
       "TRBack": {
-        "specificCornerSeed": "INSECT",
+        "specificCornerSeed": "PLANT",
         "x": 0,
         "y": 0,
         "cardSeed": "PLANT",
         "isThisCornerFree": true
       },
       "BLBack": {
-        "specificCornerSeed": "FEATHER",
+        "specificCornerSeed": "NOTTOBEPLACEDON",
         "x": 0,
         "y": 0,
         "cardSeed": "PLANT",
         "isThisCornerFree": true
       },
       "BRBack": {
-        "specificCornerSeed": "PLANT",
+        "specificCornerSeed": "INKWELL",
         "x": 0,
         "y": 0,
         "cardSeed": "PLANT",
@@ -31478,60 +32202,60 @@
       }
     },
     {
-      "id": 7,
+      "id": 8,
       "type": "MUSHROOM",
-      "value": 0,
+      "value": 1,
       "TL": {
-        "specificCornerSeed": "MUSHROOM",
+        "specificCornerSeed": "EMPTY",
         "x": 0,
         "y": 0,
         "cardSeed": "MUSHROOM",
         "isThisCornerFree": true
       },
       "TR": {
-        "specificCornerSeed": "INSECT",
+        "specificCornerSeed": "MUSHROOM",
         "x": 0,
         "y": 0,
         "cardSeed": "MUSHROOM",
         "isThisCornerFree": true
       },
       "BL": {
-        "specificCornerSeed": "PARCHMENT",
+        "specificCornerSeed": "EMPTY",
         "x": 0,
         "y": 0,
         "cardSeed": "MUSHROOM",
         "isThisCornerFree": true
       },
       "BR": {
-        "specificCornerSeed": "EMPTY",
+        "specificCornerSeed": "NOTTOBEPLACEDON",
         "x": 0,
         "y": 0,
         "cardSeed": "MUSHROOM",
         "isThisCornerFree": true
       },
       "TLBack": {
-        "specificCornerSeed": "MUSHROOM",
+        "specificCornerSeed": "EMPTY",
         "x": 0,
         "y": 0,
         "cardSeed": "MUSHROOM",
         "isThisCornerFree": true
       },
       "TRBack": {
-        "specificCornerSeed": "INSECT",
+        "specificCornerSeed": "MUSHROOM",
         "x": 0,
         "y": 0,
         "cardSeed": "MUSHROOM",
         "isThisCornerFree": true
       },
       "BLBack": {
-        "specificCornerSeed": "PARCHMENT",
+        "specificCornerSeed": "EMPTY",
         "x": 0,
         "y": 0,
         "cardSeed": "MUSHROOM",
         "isThisCornerFree": true
       },
       "BRBack": {
-        "specificCornerSeed": "EMPTY",
+        "specificCornerSeed": "NOTTOBEPLACEDON",
         "x": 0,
         "y": 0,
         "cardSeed": "MUSHROOM",
@@ -31539,133 +32263,194 @@
       }
     },
     {
-      "id": 10,
-      "type": "MUSHROOM",
-      "value": 1,
+      "id": 23,
+      "type": "ANIMAL",
+      "value": 0,
       "TL": {
-        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "specificCornerSeed": "ANIMAL",
         "x": 0,
         "y": 0,
-        "cardSeed": "MUSHROOM",
+        "cardSeed": "ANIMAL",
         "isThisCornerFree": true
       },
       "TR": {
-        "specificCornerSeed": "EMPTY",
+        "specificCornerSeed": "NOTTOBEPLACEDON",
         "x": 0,
         "y": 0,
-        "cardSeed": "MUSHROOM",
+        "cardSeed": "ANIMAL",
         "isThisCornerFree": true
       },
       "BL": {
-        "specificCornerSeed": "MUSHROOM",
+        "specificCornerSeed": "ANIMAL",
         "x": 0,
         "y": 0,
-        "cardSeed": "MUSHROOM",
+        "cardSeed": "ANIMAL",
         "isThisCornerFree": true
       },
       "BR": {
         "specificCornerSeed": "EMPTY",
         "x": 0,
         "y": 0,
-        "cardSeed": "MUSHROOM",
+        "cardSeed": "ANIMAL",
         "isThisCornerFree": true
       },
       "TLBack": {
+        "specificCornerSeed": "ANIMAL",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "ANIMAL",
+        "isThisCornerFree": true
+      },
+      "TRBack": {
         "specificCornerSeed": "NOTTOBEPLACEDON",
         "x": 0,
         "y": 0,
-        "cardSeed": "MUSHROOM",
+        "cardSeed": "ANIMAL",
+        "isThisCornerFree": true
+      },
+      "BLBack": {
+        "specificCornerSeed": "ANIMAL",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "ANIMAL",
+        "isThisCornerFree": true
+      },
+      "BRBack": {
+        "specificCornerSeed": "EMPTY",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "ANIMAL",
+        "isThisCornerFree": true
+      }
+    },
+    {
+      "id": 24,
+      "type": "ANIMAL",
+      "value": 0,
+      "TL": {
+        "specificCornerSeed": "EMPTY",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "ANIMAL",
+        "isThisCornerFree": true
+      },
+      "TR": {
+        "specificCornerSeed": "ANIMAL",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "ANIMAL",
+        "isThisCornerFree": true
+      },
+      "BL": {
+        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "ANIMAL",
         "isThisCornerFree": true
       },
-      "TRBack": {
+      "BR": {
+        "specificCornerSeed": "ANIMAL",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "ANIMAL",
+        "isThisCornerFree": true
+      },
+      "TLBack": {
         "specificCornerSeed": "EMPTY",
         "x": 0,
         "y": 0,
-        "cardSeed": "MUSHROOM",
+        "cardSeed": "ANIMAL",
+        "isThisCornerFree": true
+      },
+      "TRBack": {
+        "specificCornerSeed": "ANIMAL",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "ANIMAL",
         "isThisCornerFree": true
       },
       "BLBack": {
-        "specificCornerSeed": "MUSHROOM",
+        "specificCornerSeed": "NOTTOBEPLACEDON",
         "x": 0,
         "y": 0,
-        "cardSeed": "MUSHROOM",
+        "cardSeed": "ANIMAL",
         "isThisCornerFree": true
       },
       "BRBack": {
-        "specificCornerSeed": "EMPTY",
+        "specificCornerSeed": "ANIMAL",
         "x": 0,
         "y": 0,
-        "cardSeed": "MUSHROOM",
+        "cardSeed": "ANIMAL",
         "isThisCornerFree": true
       }
     },
     {
-      "id": 35,
-      "type": "INSECT",
+      "id": 22,
+      "type": "ANIMAL",
       "value": 0,
       "TL": {
         "specificCornerSeed": "NOTTOBEPLACEDON",
         "x": 0,
         "y": 0,
-        "cardSeed": "INSECT",
+        "cardSeed": "ANIMAL",
         "isThisCornerFree": true
       },
       "TR": {
-        "specificCornerSeed": "FEATHER",
+        "specificCornerSeed": "EMPTY",
         "x": 0,
         "y": 0,
-        "cardSeed": "INSECT",
+        "cardSeed": "ANIMAL",
         "isThisCornerFree": true
       },
       "BL": {
         "specificCornerSeed": "ANIMAL",
         "x": 0,
         "y": 0,
-        "cardSeed": "INSECT",
+        "cardSeed": "ANIMAL",
         "isThisCornerFree": true
       },
       "BR": {
-        "specificCornerSeed": "INSECT",
+        "specificCornerSeed": "ANIMAL",
         "x": 0,
         "y": 0,
-        "cardSeed": "INSECT",
+        "cardSeed": "ANIMAL",
         "isThisCornerFree": true
       },
       "TLBack": {
         "specificCornerSeed": "NOTTOBEPLACEDON",
         "x": 0,
         "y": 0,
-        "cardSeed": "INSECT",
+        "cardSeed": "ANIMAL",
         "isThisCornerFree": true
       },
       "TRBack": {
-        "specificCornerSeed": "FEATHER",
+        "specificCornerSeed": "EMPTY",
         "x": 0,
         "y": 0,
-        "cardSeed": "INSECT",
+        "cardSeed": "ANIMAL",
         "isThisCornerFree": true
       },
       "BLBack": {
         "specificCornerSeed": "ANIMAL",
         "x": 0,
         "y": 0,
-        "cardSeed": "INSECT",
+        "cardSeed": "ANIMAL",
         "isThisCornerFree": true
       },
       "BRBack": {
-        "specificCornerSeed": "INSECT",
+        "specificCornerSeed": "ANIMAL",
         "x": 0,
         "y": 0,
-        "cardSeed": "INSECT",
+        "cardSeed": "ANIMAL",
         "isThisCornerFree": true
       }
     },
     {
-      "id": 12,
+      "id": 20,
       "type": "PLANT",
-      "value": 0,
+      "value": 1,
       "TL": {
-        "specificCornerSeed": "PLANT",
+        "specificCornerSeed": "NOTTOBEPLACEDON",
         "x": 0,
         "y": 0,
         "cardSeed": "PLANT",
@@ -31679,7 +32464,7 @@
         "isThisCornerFree": true
       },
       "BL": {
-        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "specificCornerSeed": "EMPTY",
         "x": 0,
         "y": 0,
         "cardSeed": "PLANT",
@@ -31693,7 +32478,7 @@
         "isThisCornerFree": true
       },
       "TLBack": {
-        "specificCornerSeed": "PLANT",
+        "specificCornerSeed": "NOTTOBEPLACEDON",
         "x": 0,
         "y": 0,
         "cardSeed": "PLANT",
@@ -31707,7 +32492,7 @@
         "isThisCornerFree": true
       },
       "BLBack": {
-        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "specificCornerSeed": "EMPTY",
         "x": 0,
         "y": 0,
         "cardSeed": "PLANT",
@@ -31722,72 +32507,72 @@
       }
     },
     {
-      "id": 36,
-      "type": "INSECT",
+      "id": 14,
+      "type": "PLANT",
       "value": 0,
       "TL": {
-        "specificCornerSeed": "PARCHMENT",
+        "specificCornerSeed": "NOTTOBEPLACEDON",
         "x": 0,
         "y": 0,
-        "cardSeed": "INSECT",
+        "cardSeed": "PLANT",
         "isThisCornerFree": true
       },
       "TR": {
-        "specificCornerSeed": "INSECT",
+        "specificCornerSeed": "PLANT",
         "x": 0,
         "y": 0,
-        "cardSeed": "INSECT",
+        "cardSeed": "PLANT",
         "isThisCornerFree": true
       },
       "BL": {
-        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "specificCornerSeed": "EMPTY",
         "x": 0,
         "y": 0,
-        "cardSeed": "INSECT",
+        "cardSeed": "PLANT",
         "isThisCornerFree": true
       },
       "BR": {
-        "specificCornerSeed": "MUSHROOM",
+        "specificCornerSeed": "PLANT",
         "x": 0,
         "y": 0,
-        "cardSeed": "INSECT",
+        "cardSeed": "PLANT",
         "isThisCornerFree": true
       },
       "TLBack": {
-        "specificCornerSeed": "PARCHMENT",
+        "specificCornerSeed": "NOTTOBEPLACEDON",
         "x": 0,
         "y": 0,
-        "cardSeed": "INSECT",
+        "cardSeed": "PLANT",
         "isThisCornerFree": true
       },
       "TRBack": {
-        "specificCornerSeed": "INSECT",
+        "specificCornerSeed": "PLANT",
         "x": 0,
         "y": 0,
-        "cardSeed": "INSECT",
+        "cardSeed": "PLANT",
         "isThisCornerFree": true
       },
       "BLBack": {
-        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "specificCornerSeed": "EMPTY",
         "x": 0,
         "y": 0,
-        "cardSeed": "INSECT",
+        "cardSeed": "PLANT",
         "isThisCornerFree": true
       },
       "BRBack": {
-        "specificCornerSeed": "MUSHROOM",
+        "specificCornerSeed": "PLANT",
         "x": 0,
         "y": 0,
-        "cardSeed": "INSECT",
+        "cardSeed": "PLANT",
         "isThisCornerFree": true
       }
     },
     {
-      "id": 17,
+      "id": 13,
       "type": "PLANT",
       "value": 0,
       "TL": {
-        "specificCornerSeed": "PARCHMENT",
+        "specificCornerSeed": "EMPTY",
         "x": 0,
         "y": 0,
         "cardSeed": "PLANT",
@@ -31808,14 +32593,14 @@
         "isThisCornerFree": true
       },
       "BR": {
-        "specificCornerSeed": "ANIMAL",
+        "specificCornerSeed": "PLANT",
         "x": 0,
         "y": 0,
         "cardSeed": "PLANT",
         "isThisCornerFree": true
       },
       "TLBack": {
-        "specificCornerSeed": "PARCHMENT",
+        "specificCornerSeed": "EMPTY",
         "x": 0,
         "y": 0,
         "cardSeed": "PLANT",
@@ -31836,7 +32621,7 @@
         "isThisCornerFree": true
       },
       "BRBack": {
-        "specificCornerSeed": "ANIMAL",
+        "specificCornerSeed": "PLANT",
         "x": 0,
         "y": 0,
         "cardSeed": "PLANT",
@@ -31844,46 +32629,576 @@
       }
     },
     {
-      "id": 26,
-      "type": "ANIMAL",
+      "id": 11,
+      "type": "PLANT",
       "value": 0,
       "TL": {
         "specificCornerSeed": "PLANT",
         "x": 0,
         "y": 0,
+        "cardSeed": "PLANT",
+        "isThisCornerFree": true
+      },
+      "TR": {
+        "specificCornerSeed": "EMPTY",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "PLANT",
+        "isThisCornerFree": true
+      },
+      "BL": {
+        "specificCornerSeed": "PLANT",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "PLANT",
+        "isThisCornerFree": true
+      },
+      "BR": {
+        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "PLANT",
+        "isThisCornerFree": true
+      },
+      "TLBack": {
+        "specificCornerSeed": "PLANT",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "PLANT",
+        "isThisCornerFree": true
+      },
+      "TRBack": {
+        "specificCornerSeed": "EMPTY",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "PLANT",
+        "isThisCornerFree": true
+      },
+      "BLBack": {
+        "specificCornerSeed": "PLANT",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "PLANT",
+        "isThisCornerFree": true
+      },
+      "BRBack": {
+        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "PLANT",
+        "isThisCornerFree": true
+      }
+    },
+    {
+      "id": 19,
+      "type": "PLANT",
+      "value": 1,
+      "TL": {
+        "specificCornerSeed": "EMPTY",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "PLANT",
+        "isThisCornerFree": true
+      },
+      "TR": {
+        "specificCornerSeed": "EMPTY",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "PLANT",
+        "isThisCornerFree": true
+      },
+      "BL": {
+        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "PLANT",
+        "isThisCornerFree": true
+      },
+      "BR": {
+        "specificCornerSeed": "PLANT",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "PLANT",
+        "isThisCornerFree": true
+      },
+      "TLBack": {
+        "specificCornerSeed": "EMPTY",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "PLANT",
+        "isThisCornerFree": true
+      },
+      "TRBack": {
+        "specificCornerSeed": "EMPTY",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "PLANT",
+        "isThisCornerFree": true
+      },
+      "BLBack": {
+        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "PLANT",
+        "isThisCornerFree": true
+      },
+      "BRBack": {
+        "specificCornerSeed": "PLANT",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "PLANT",
+        "isThisCornerFree": true
+      }
+    }
+  ],
+  "goldDeck": [
+    {
+      "id": 48,
+      "type": "MUSHROOM",
+      "value": 3,
+      "TL": {
+        "specificCornerSeed": "FEATHER",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "MUSHROOM",
+        "isThisCornerFree": true
+      },
+      "TR": {
+        "specificCornerSeed": "EMPTY",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "MUSHROOM",
+        "isThisCornerFree": true
+      },
+      "BL": {
+        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "MUSHROOM",
+        "isThisCornerFree": true
+      },
+      "BR": {
+        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "MUSHROOM",
+        "isThisCornerFree": true
+      },
+      "TLBack": {
+        "specificCornerSeed": "FEATHER",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "MUSHROOM",
+        "isThisCornerFree": true
+      },
+      "TRBack": {
+        "specificCornerSeed": "EMPTY",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "MUSHROOM",
+        "isThisCornerFree": true
+      },
+      "BLBack": {
+        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "MUSHROOM",
+        "isThisCornerFree": true
+      },
+      "BRBack": {
+        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "MUSHROOM",
+        "isThisCornerFree": true
+      },
+      "requirementsForPlacing": [
+        "MUSHROOM",
+        "MUSHROOM",
+        "MUSHROOM"
+      ],
+      "multiplier": "MISSINGMULTIPLIER"
+    },
+    {
+      "id": 62,
+      "type": "ANIMAL",
+      "value": 1,
+      "TL": {
+        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "x": 0,
+        "y": 0,
         "cardSeed": "ANIMAL",
         "isThisCornerFree": true
       },
       "TR": {
-        "specificCornerSeed": "ANIMAL",
+        "specificCornerSeed": "EMPTY",
         "x": 0,
         "y": 0,
         "cardSeed": "ANIMAL",
         "isThisCornerFree": true
       },
       "BL": {
+        "specificCornerSeed": "EMPTY",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "ANIMAL",
+        "isThisCornerFree": true
+      },
+      "BR": {
+        "specificCornerSeed": "PARCHMENT",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "ANIMAL",
+        "isThisCornerFree": true
+      },
+      "TLBack": {
         "specificCornerSeed": "NOTTOBEPLACEDON",
         "x": 0,
         "y": 0,
         "cardSeed": "ANIMAL",
         "isThisCornerFree": true
       },
+      "TRBack": {
+        "specificCornerSeed": "EMPTY",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "ANIMAL",
+        "isThisCornerFree": true
+      },
+      "BLBack": {
+        "specificCornerSeed": "EMPTY",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "ANIMAL",
+        "isThisCornerFree": true
+      },
+      "BRBack": {
+        "specificCornerSeed": "PARCHMENT",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "ANIMAL",
+        "isThisCornerFree": true
+      },
+      "requirementsForPlacing": [
+        "ANIMAL",
+        "ANIMAL",
+        "PLANT"
+      ],
+      "multiplier": "PARCHMENT"
+    },
+    {
+      "id": 50,
+      "type": "MUSHROOM",
+      "value": 5,
+      "TL": {
+        "specificCornerSeed": "EMPTY",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "MUSHROOM",
+        "isThisCornerFree": true
+      },
+      "TR": {
+        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "MUSHROOM",
+        "isThisCornerFree": true
+      },
+      "BL": {
+        "specificCornerSeed": "EMPTY",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "MUSHROOM",
+        "isThisCornerFree": true
+      },
       "BR": {
+        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "MUSHROOM",
+        "isThisCornerFree": true
+      },
+      "TLBack": {
+        "specificCornerSeed": "EMPTY",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "MUSHROOM",
+        "isThisCornerFree": true
+      },
+      "TRBack": {
+        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "MUSHROOM",
+        "isThisCornerFree": true
+      },
+      "BLBack": {
+        "specificCornerSeed": "EMPTY",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "MUSHROOM",
+        "isThisCornerFree": true
+      },
+      "BRBack": {
+        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "MUSHROOM",
+        "isThisCornerFree": true
+      },
+      "requirementsForPlacing": [
+        "MUSHROOM",
+        "MUSHROOM",
+        "MUSHROOM",
+        "MUSHROOM",
+        "MUSHROOM"
+      ],
+      "multiplier": "MISSINGMULTIPLIER"
+    },
+    {
+      "id": 43,
+      "type": "MUSHROOM",
+      "value": 1,
+      "TL": {
+        "specificCornerSeed": "PARCHMENT",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "MUSHROOM",
+        "isThisCornerFree": true
+      },
+      "TR": {
+        "specificCornerSeed": "EMPTY",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "MUSHROOM",
+        "isThisCornerFree": true
+      },
+      "BL": {
+        "specificCornerSeed": "EMPTY",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "MUSHROOM",
+        "isThisCornerFree": true
+      },
+      "BR": {
+        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "MUSHROOM",
+        "isThisCornerFree": true
+      },
+      "TLBack": {
         "specificCornerSeed": "PARCHMENT",
         "x": 0,
         "y": 0,
+        "cardSeed": "MUSHROOM",
+        "isThisCornerFree": true
+      },
+      "TRBack": {
+        "specificCornerSeed": "EMPTY",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "MUSHROOM",
+        "isThisCornerFree": true
+      },
+      "BLBack": {
+        "specificCornerSeed": "EMPTY",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "MUSHROOM",
+        "isThisCornerFree": true
+      },
+      "BRBack": {
+        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "MUSHROOM",
+        "isThisCornerFree": true
+      },
+      "requirementsForPlacing": [
+        "MUSHROOM",
+        "MUSHROOM",
+        "INSECT"
+      ],
+      "multiplier": "PARCHMENT"
+    },
+    {
+      "id": 45,
+      "type": "MUSHROOM",
+      "value": 2,
+      "TL": {
+        "specificCornerSeed": "EMPTY",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "MUSHROOM",
+        "isThisCornerFree": true
+      },
+      "TR": {
+        "specificCornerSeed": "EMPTY",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "MUSHROOM",
+        "isThisCornerFree": true
+      },
+      "BL": {
+        "specificCornerSeed": "EMPTY",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "MUSHROOM",
+        "isThisCornerFree": true
+      },
+      "BR": {
+        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "MUSHROOM",
+        "isThisCornerFree": true
+      },
+      "TLBack": {
+        "specificCornerSeed": "EMPTY",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "MUSHROOM",
+        "isThisCornerFree": true
+      },
+      "TRBack": {
+        "specificCornerSeed": "EMPTY",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "MUSHROOM",
+        "isThisCornerFree": true
+      },
+      "BLBack": {
+        "specificCornerSeed": "EMPTY",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "MUSHROOM",
+        "isThisCornerFree": true
+      },
+      "BRBack": {
+        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "MUSHROOM",
+        "isThisCornerFree": true
+      },
+      "requirementsForPlacing": [
+        "MUSHROOM",
+        "MUSHROOM",
+        "MUSHROOM",
+        "PLANT"
+      ],
+      "multiplier": "NUMOFCOVEREDCORNERS"
+    },
+    {
+      "id": 55,
+      "type": "PLANT",
+      "value": 2,
+      "TL": {
+        "specificCornerSeed": "EMPTY",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "PLANT",
+        "isThisCornerFree": true
+      },
+      "TR": {
+        "specificCornerSeed": "EMPTY",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "PLANT",
+        "isThisCornerFree": true
+      },
+      "BL": {
+        "specificCornerSeed": "EMPTY",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "PLANT",
+        "isThisCornerFree": true
+      },
+      "BR": {
+        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "PLANT",
+        "isThisCornerFree": true
+      },
+      "TLBack": {
+        "specificCornerSeed": "EMPTY",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "PLANT",
+        "isThisCornerFree": true
+      },
+      "TRBack": {
+        "specificCornerSeed": "EMPTY",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "PLANT",
+        "isThisCornerFree": true
+      },
+      "BLBack": {
+        "specificCornerSeed": "EMPTY",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "PLANT",
+        "isThisCornerFree": true
+      },
+      "BRBack": {
+        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "PLANT",
+        "isThisCornerFree": true
+      },
+      "requirementsForPlacing": [
+        "PLANT",
+        "PLANT",
+        "PLANT",
+        "ANIMAL"
+      ],
+      "multiplier": "NUMOFCOVEREDCORNERS"
+    },
+    {
+      "id": 69,
+      "type": "ANIMAL",
+      "value": 3,
+      "TL": {
+        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "ANIMAL",
+        "isThisCornerFree": true
+      },
+      "TR": {
+        "specificCornerSeed": "EMPTY",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "ANIMAL",
+        "isThisCornerFree": true
+      },
+      "BL": {
+        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "ANIMAL",
+        "isThisCornerFree": true
+      },
+      "BR": {
+        "specificCornerSeed": "FEATHER",
+        "x": 0,
+        "y": 0,
         "cardSeed": "ANIMAL",
         "isThisCornerFree": true
       },
       "TLBack": {
-        "specificCornerSeed": "PLANT",
+        "specificCornerSeed": "NOTTOBEPLACEDON",
         "x": 0,
         "y": 0,
         "cardSeed": "ANIMAL",
         "isThisCornerFree": true
       },
       "TRBack": {
-        "specificCornerSeed": "ANIMAL",
+        "specificCornerSeed": "EMPTY",
         "x": 0,
         "y": 0,
         "cardSeed": "ANIMAL",
@@ -31897,26 +33212,101 @@
         "isThisCornerFree": true
       },
       "BRBack": {
-        "specificCornerSeed": "PARCHMENT",
+        "specificCornerSeed": "FEATHER",
         "x": 0,
         "y": 0,
         "cardSeed": "ANIMAL",
         "isThisCornerFree": true
-      }
+      },
+      "requirementsForPlacing": [
+        "ANIMAL",
+        "ANIMAL",
+        "ANIMAL"
+      ],
+      "multiplier": "MISSINGMULTIPLIER"
     },
     {
-      "id": 40,
+      "id": 80,
       "type": "INSECT",
-      "value": 1,
+      "value": 5,
       "TL": {
+        "specificCornerSeed": "EMPTY",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "INSECT",
+        "isThisCornerFree": true
+      },
+      "TR": {
+        "specificCornerSeed": "EMPTY",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "INSECT",
+        "isThisCornerFree": true
+      },
+      "BL": {
+        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "INSECT",
+        "isThisCornerFree": true
+      },
+      "BR": {
         "specificCornerSeed": "NOTTOBEPLACEDON",
         "x": 0,
         "y": 0,
         "cardSeed": "INSECT",
         "isThisCornerFree": true
       },
+      "TLBack": {
+        "specificCornerSeed": "EMPTY",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "INSECT",
+        "isThisCornerFree": true
+      },
+      "TRBack": {
+        "specificCornerSeed": "EMPTY",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "INSECT",
+        "isThisCornerFree": true
+      },
+      "BLBack": {
+        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "INSECT",
+        "isThisCornerFree": true
+      },
+      "BRBack": {
+        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "INSECT",
+        "isThisCornerFree": true
+      },
+      "requirementsForPlacing": [
+        "INSECT",
+        "INSECT",
+        "INSECT",
+        "INSECT",
+        "INSECT"
+      ],
+      "multiplier": "MISSINGMULTIPLIER"
+    },
+    {
+      "id": 75,
+      "type": "INSECT",
+      "value": 2,
+      "TL": {
+        "specificCornerSeed": "EMPTY",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "INSECT",
+        "isThisCornerFree": true
+      },
       "TR": {
-        "specificCornerSeed": "INSECT",
+        "specificCornerSeed": "EMPTY",
         "x": 0,
         "y": 0,
         "cardSeed": "INSECT",
@@ -31930,21 +33320,21 @@
         "isThisCornerFree": true
       },
       "BR": {
-        "specificCornerSeed": "EMPTY",
+        "specificCornerSeed": "NOTTOBEPLACEDON",
         "x": 0,
         "y": 0,
         "cardSeed": "INSECT",
         "isThisCornerFree": true
       },
       "TLBack": {
-        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "specificCornerSeed": "EMPTY",
         "x": 0,
         "y": 0,
         "cardSeed": "INSECT",
         "isThisCornerFree": true
       },
       "TRBack": {
-        "specificCornerSeed": "INSECT",
+        "specificCornerSeed": "EMPTY",
         "x": 0,
         "y": 0,
         "cardSeed": "INSECT",
@@ -31958,33 +33348,108 @@
         "isThisCornerFree": true
       },
       "BRBack": {
+        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "INSECT",
+        "isThisCornerFree": true
+      },
+      "requirementsForPlacing": [
+        "INSECT",
+        "INSECT",
+        "INSECT",
+        "PLANT"
+      ],
+      "multiplier": "NUMOFCOVEREDCORNERS"
+    },
+    {
+      "id": 44,
+      "type": "MUSHROOM",
+      "value": 2,
+      "TL": {
         "specificCornerSeed": "EMPTY",
         "x": 0,
         "y": 0,
-        "cardSeed": "INSECT",
+        "cardSeed": "MUSHROOM",
+        "isThisCornerFree": true
+      },
+      "TR": {
+        "specificCornerSeed": "EMPTY",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "MUSHROOM",
+        "isThisCornerFree": true
+      },
+      "BL": {
+        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "MUSHROOM",
+        "isThisCornerFree": true
+      },
+      "BR": {
+        "specificCornerSeed": "EMPTY",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "MUSHROOM",
+        "isThisCornerFree": true
+      },
+      "TLBack": {
+        "specificCornerSeed": "EMPTY",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "MUSHROOM",
+        "isThisCornerFree": true
+      },
+      "TRBack": {
+        "specificCornerSeed": "EMPTY",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "MUSHROOM",
+        "isThisCornerFree": true
+      },
+      "BLBack": {
+        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "MUSHROOM",
         "isThisCornerFree": true
-      }
+      },
+      "BRBack": {
+        "specificCornerSeed": "EMPTY",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "MUSHROOM",
+        "isThisCornerFree": true
+      },
+      "requirementsForPlacing": [
+        "MUSHROOM",
+        "MUSHROOM",
+        "MUSHROOM",
+        "ANIMAL"
+      ],
+      "multiplier": "NUMOFCOVEREDCORNERS"
     },
     {
-      "id": 23,
+      "id": 64,
       "type": "ANIMAL",
-      "value": 0,
+      "value": 2,
       "TL": {
-        "specificCornerSeed": "ANIMAL",
+        "specificCornerSeed": "EMPTY",
         "x": 0,
         "y": 0,
         "cardSeed": "ANIMAL",
         "isThisCornerFree": true
       },
       "TR": {
-        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "specificCornerSeed": "EMPTY",
         "x": 0,
         "y": 0,
         "cardSeed": "ANIMAL",
         "isThisCornerFree": true
       },
       "BL": {
-        "specificCornerSeed": "ANIMAL",
+        "specificCornerSeed": "NOTTOBEPLACEDON",
         "x": 0,
         "y": 0,
         "cardSeed": "ANIMAL",
@@ -31998,21 +33463,21 @@
         "isThisCornerFree": true
       },
       "TLBack": {
-        "specificCornerSeed": "ANIMAL",
+        "specificCornerSeed": "EMPTY",
         "x": 0,
         "y": 0,
         "cardSeed": "ANIMAL",
         "isThisCornerFree": true
       },
       "TRBack": {
-        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "specificCornerSeed": "EMPTY",
         "x": 0,
         "y": 0,
         "cardSeed": "ANIMAL",
         "isThisCornerFree": true
       },
       "BLBack": {
-        "specificCornerSeed": "ANIMAL",
+        "specificCornerSeed": "NOTTOBEPLACEDON",
         "x": 0,
         "y": 0,
         "cardSeed": "ANIMAL",
@@ -32024,14 +33489,88 @@
         "y": 0,
         "cardSeed": "ANIMAL",
         "isThisCornerFree": true
-      }
+      },
+      "requirementsForPlacing": [
+        "ANIMAL",
+        "ANIMAL",
+        "ANIMAL",
+        "INSECT"
+      ],
+      "multiplier": "NUMOFCOVEREDCORNERS"
     },
     {
-      "id": 11,
+      "id": 49,
+      "type": "MUSHROOM",
+      "value": 3,
+      "TL": {
+        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "MUSHROOM",
+        "isThisCornerFree": true
+      },
+      "TR": {
+        "specificCornerSeed": "PARCHMENT",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "MUSHROOM",
+        "isThisCornerFree": true
+      },
+      "BL": {
+        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "MUSHROOM",
+        "isThisCornerFree": true
+      },
+      "BR": {
+        "specificCornerSeed": "EMPTY",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "MUSHROOM",
+        "isThisCornerFree": true
+      },
+      "TLBack": {
+        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "MUSHROOM",
+        "isThisCornerFree": true
+      },
+      "TRBack": {
+        "specificCornerSeed": "PARCHMENT",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "MUSHROOM",
+        "isThisCornerFree": true
+      },
+      "BLBack": {
+        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "MUSHROOM",
+        "isThisCornerFree": true
+      },
+      "BRBack": {
+        "specificCornerSeed": "EMPTY",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "MUSHROOM",
+        "isThisCornerFree": true
+      },
+      "requirementsForPlacing": [
+        "MUSHROOM",
+        "MUSHROOM",
+        "MUSHROOM"
+      ],
+      "multiplier": "MISSINGMULTIPLIER"
+    },
+    {
+      "id": 60,
       "type": "PLANT",
-      "value": 0,
+      "value": 5,
       "TL": {
-        "specificCornerSeed": "PLANT",
+        "specificCornerSeed": "EMPTY",
         "x": 0,
         "y": 0,
         "cardSeed": "PLANT",
@@ -32045,7 +33584,7 @@
         "isThisCornerFree": true
       },
       "BL": {
-        "specificCornerSeed": "PLANT",
+        "specificCornerSeed": "NOTTOBEPLACEDON",
         "x": 0,
         "y": 0,
         "cardSeed": "PLANT",
@@ -32059,7 +33598,7 @@
         "isThisCornerFree": true
       },
       "TLBack": {
-        "specificCornerSeed": "PLANT",
+        "specificCornerSeed": "EMPTY",
         "x": 0,
         "y": 0,
         "cardSeed": "PLANT",
@@ -32073,7 +33612,7 @@
         "isThisCornerFree": true
       },
       "BLBack": {
-        "specificCornerSeed": "PLANT",
+        "specificCornerSeed": "NOTTOBEPLACEDON",
         "x": 0,
         "y": 0,
         "cardSeed": "PLANT",
@@ -32085,21 +33624,29 @@
         "y": 0,
         "cardSeed": "PLANT",
         "isThisCornerFree": true
-      }
+      },
+      "requirementsForPlacing": [
+        "PLANT",
+        "PLANT",
+        "PLANT",
+        "PLANT",
+        "PLANT"
+      ],
+      "multiplier": "MISSINGMULTIPLIER"
     },
     {
-      "id": 20,
+      "id": 51,
       "type": "PLANT",
       "value": 1,
       "TL": {
-        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "specificCornerSeed": "FEATHER",
         "x": 0,
         "y": 0,
         "cardSeed": "PLANT",
         "isThisCornerFree": true
       },
       "TR": {
-        "specificCornerSeed": "PLANT",
+        "specificCornerSeed": "EMPTY",
         "x": 0,
         "y": 0,
         "cardSeed": "PLANT",
@@ -32113,21 +33660,21 @@
         "isThisCornerFree": true
       },
       "BR": {
-        "specificCornerSeed": "EMPTY",
+        "specificCornerSeed": "NOTTOBEPLACEDON",
         "x": 0,
         "y": 0,
         "cardSeed": "PLANT",
         "isThisCornerFree": true
       },
       "TLBack": {
-        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "specificCornerSeed": "FEATHER",
         "x": 0,
         "y": 0,
         "cardSeed": "PLANT",
         "isThisCornerFree": true
       },
       "TRBack": {
-        "specificCornerSeed": "PLANT",
+        "specificCornerSeed": "EMPTY",
         "x": 0,
         "y": 0,
         "cardSeed": "PLANT",
@@ -32141,237 +33688,733 @@
         "isThisCornerFree": true
       },
       "BRBack": {
+        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "PLANT",
+        "isThisCornerFree": true
+      },
+      "requirementsForPlacing": [
+        "PLANT",
+        "PLANT",
+        "INSECT"
+      ],
+      "multiplier": "FEATHER"
+    },
+    {
+      "id": 67,
+      "type": "ANIMAL",
+      "value": 3,
+      "TL": {
+        "specificCornerSeed": "EMPTY",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "ANIMAL",
+        "isThisCornerFree": true
+      },
+      "TR": {
+        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "ANIMAL",
+        "isThisCornerFree": true
+      },
+      "BL": {
+        "specificCornerSeed": "PARCHMENT",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "ANIMAL",
+        "isThisCornerFree": true
+      },
+      "BR": {
+        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "ANIMAL",
+        "isThisCornerFree": true
+      },
+      "TLBack": {
+        "specificCornerSeed": "EMPTY",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "ANIMAL",
+        "isThisCornerFree": true
+      },
+      "TRBack": {
+        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "ANIMAL",
+        "isThisCornerFree": true
+      },
+      "BLBack": {
+        "specificCornerSeed": "PARCHMENT",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "ANIMAL",
+        "isThisCornerFree": true
+      },
+      "BRBack": {
+        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "ANIMAL",
+        "isThisCornerFree": true
+      },
+      "requirementsForPlacing": [
+        "ANIMAL",
+        "ANIMAL",
+        "ANIMAL"
+      ],
+      "multiplier": "MISSINGMULTIPLIER"
+    },
+    {
+      "id": 46,
+      "type": "MUSHROOM",
+      "value": 2,
+      "TL": {
+        "specificCornerSeed": "EMPTY",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "MUSHROOM",
+        "isThisCornerFree": true
+      },
+      "TR": {
+        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "MUSHROOM",
+        "isThisCornerFree": true
+      },
+      "BL": {
+        "specificCornerSeed": "EMPTY",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "MUSHROOM",
+        "isThisCornerFree": true
+      },
+      "BR": {
+        "specificCornerSeed": "EMPTY",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "MUSHROOM",
+        "isThisCornerFree": true
+      },
+      "TLBack": {
+        "specificCornerSeed": "EMPTY",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "MUSHROOM",
+        "isThisCornerFree": true
+      },
+      "TRBack": {
+        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "MUSHROOM",
+        "isThisCornerFree": true
+      },
+      "BLBack": {
+        "specificCornerSeed": "EMPTY",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "MUSHROOM",
+        "isThisCornerFree": true
+      },
+      "BRBack": {
+        "specificCornerSeed": "EMPTY",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "MUSHROOM",
+        "isThisCornerFree": true
+      },
+      "requirementsForPlacing": [
+        "MUSHROOM",
+        "MUSHROOM",
+        "MUSHROOM",
+        "INSECT"
+      ],
+      "multiplier": "NUMOFCOVEREDCORNERS"
+    },
+    {
+      "id": 61,
+      "type": "ANIMAL",
+      "value": 1,
+      "TL": {
+        "specificCornerSeed": "INKWELL",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "ANIMAL",
+        "isThisCornerFree": true
+      },
+      "TR": {
+        "specificCornerSeed": "EMPTY",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "ANIMAL",
+        "isThisCornerFree": true
+      },
+      "BL": {
+        "specificCornerSeed": "EMPTY",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "ANIMAL",
+        "isThisCornerFree": true
+      },
+      "BR": {
+        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "ANIMAL",
+        "isThisCornerFree": true
+      },
+      "TLBack": {
+        "specificCornerSeed": "INKWELL",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "ANIMAL",
+        "isThisCornerFree": true
+      },
+      "TRBack": {
+        "specificCornerSeed": "EMPTY",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "ANIMAL",
+        "isThisCornerFree": true
+      },
+      "BLBack": {
+        "specificCornerSeed": "EMPTY",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "ANIMAL",
+        "isThisCornerFree": true
+      },
+      "BRBack": {
+        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "ANIMAL",
+        "isThisCornerFree": true
+      },
+      "requirementsForPlacing": [
+        "ANIMAL",
+        "ANIMAL",
+        "INSECT"
+      ],
+      "multiplier": "INKWELL"
+    },
+    {
+      "id": 41,
+      "type": "MUSHROOM",
+      "value": 1,
+      "TL": {
+        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "MUSHROOM",
+        "isThisCornerFree": true
+      },
+      "TR": {
         "specificCornerSeed": "EMPTY",
         "x": 0,
         "y": 0,
-        "cardSeed": "PLANT",
+        "cardSeed": "MUSHROOM",
+        "isThisCornerFree": true
+      },
+      "BL": {
+        "specificCornerSeed": "EMPTY",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "MUSHROOM",
+        "isThisCornerFree": true
+      },
+      "BR": {
+        "specificCornerSeed": "FEATHER",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "MUSHROOM",
+        "isThisCornerFree": true
+      },
+      "TLBack": {
+        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "MUSHROOM",
+        "isThisCornerFree": true
+      },
+      "TRBack": {
+        "specificCornerSeed": "EMPTY",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "MUSHROOM",
+        "isThisCornerFree": true
+      },
+      "BLBack": {
+        "specificCornerSeed": "EMPTY",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "MUSHROOM",
+        "isThisCornerFree": true
+      },
+      "BRBack": {
+        "specificCornerSeed": "FEATHER",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "MUSHROOM",
+        "isThisCornerFree": true
+      },
+      "requirementsForPlacing": [
+        "MUSHROOM",
+        "MUSHROOM",
+        "ANIMAL"
+      ],
+      "multiplier": "FEATHER"
+    },
+    {
+      "id": 79,
+      "type": "INSECT",
+      "value": 3,
+      "TL": {
+        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "INSECT",
+        "isThisCornerFree": true
+      },
+      "TR": {
+        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "INSECT",
+        "isThisCornerFree": true
+      },
+      "BL": {
+        "specificCornerSeed": "FEATHER",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "INSECT",
+        "isThisCornerFree": true
+      },
+      "BR": {
+        "specificCornerSeed": "EMPTY",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "INSECT",
+        "isThisCornerFree": true
+      },
+      "TLBack": {
+        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "INSECT",
+        "isThisCornerFree": true
+      },
+      "TRBack": {
+        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "INSECT",
+        "isThisCornerFree": true
+      },
+      "BLBack": {
+        "specificCornerSeed": "FEATHER",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "INSECT",
+        "isThisCornerFree": true
+      },
+      "BRBack": {
+        "specificCornerSeed": "EMPTY",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "INSECT",
         "isThisCornerFree": true
-      }
+      },
+      "requirementsForPlacing": [
+        "INSECT",
+        "INSECT",
+        "INSECT"
+      ],
+      "multiplier": "MISSINGMULTIPLIER"
     },
     {
-      "id": 14,
+      "id": 53,
       "type": "PLANT",
-      "value": 0,
+      "value": 1,
       "TL": {
-        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "specificCornerSeed": "EMPTY",
         "x": 0,
         "y": 0,
         "cardSeed": "PLANT",
         "isThisCornerFree": true
       },
       "TR": {
-        "specificCornerSeed": "PLANT",
+        "specificCornerSeed": "NOTTOBEPLACEDON",
         "x": 0,
         "y": 0,
         "cardSeed": "PLANT",
         "isThisCornerFree": true
       },
       "BL": {
-        "specificCornerSeed": "EMPTY",
+        "specificCornerSeed": "INKWELL",
         "x": 0,
         "y": 0,
         "cardSeed": "PLANT",
         "isThisCornerFree": true
       },
       "BR": {
-        "specificCornerSeed": "PLANT",
+        "specificCornerSeed": "EMPTY",
         "x": 0,
         "y": 0,
         "cardSeed": "PLANT",
         "isThisCornerFree": true
       },
       "TLBack": {
-        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "specificCornerSeed": "EMPTY",
         "x": 0,
         "y": 0,
         "cardSeed": "PLANT",
         "isThisCornerFree": true
       },
       "TRBack": {
-        "specificCornerSeed": "PLANT",
+        "specificCornerSeed": "NOTTOBEPLACEDON",
         "x": 0,
         "y": 0,
         "cardSeed": "PLANT",
         "isThisCornerFree": true
       },
       "BLBack": {
-        "specificCornerSeed": "EMPTY",
+        "specificCornerSeed": "INKWELL",
         "x": 0,
         "y": 0,
         "cardSeed": "PLANT",
         "isThisCornerFree": true
       },
       "BRBack": {
-        "specificCornerSeed": "PLANT",
+        "specificCornerSeed": "EMPTY",
         "x": 0,
         "y": 0,
         "cardSeed": "PLANT",
         "isThisCornerFree": true
-      }
+      },
+      "requirementsForPlacing": [
+        "PLANT",
+        "PLANT",
+        "ANIMAL"
+      ],
+      "multiplier": "INKWELL"
     },
     {
-      "id": 31,
+      "id": 71,
       "type": "INSECT",
-      "value": 0,
+      "value": 1,
       "TL": {
-        "specificCornerSeed": "INSECT",
+        "specificCornerSeed": "EMPTY",
         "x": 0,
         "y": 0,
         "cardSeed": "INSECT",
         "isThisCornerFree": true
       },
       "TR": {
-        "specificCornerSeed": "INSECT",
+        "specificCornerSeed": "FEATHER",
         "x": 0,
         "y": 0,
         "cardSeed": "INSECT",
         "isThisCornerFree": true
       },
       "BL": {
-        "specificCornerSeed": "EMPTY",
+        "specificCornerSeed": "NOTTOBEPLACEDON",
         "x": 0,
         "y": 0,
         "cardSeed": "INSECT",
         "isThisCornerFree": true
       },
       "BR": {
-        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "specificCornerSeed": "EMPTY",
         "x": 0,
         "y": 0,
         "cardSeed": "INSECT",
         "isThisCornerFree": true
       },
       "TLBack": {
-        "specificCornerSeed": "INSECT",
+        "specificCornerSeed": "EMPTY",
         "x": 0,
         "y": 0,
         "cardSeed": "INSECT",
         "isThisCornerFree": true
       },
       "TRBack": {
-        "specificCornerSeed": "INSECT",
+        "specificCornerSeed": "FEATHER",
         "x": 0,
         "y": 0,
         "cardSeed": "INSECT",
         "isThisCornerFree": true
       },
       "BLBack": {
-        "specificCornerSeed": "EMPTY",
+        "specificCornerSeed": "NOTTOBEPLACEDON",
         "x": 0,
         "y": 0,
         "cardSeed": "INSECT",
         "isThisCornerFree": true
       },
       "BRBack": {
-        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "specificCornerSeed": "EMPTY",
         "x": 0,
         "y": 0,
         "cardSeed": "INSECT",
         "isThisCornerFree": true
-      }
+      },
+      "requirementsForPlacing": [
+        "INSECT",
+        "INSECT",
+        "PLANT"
+      ],
+      "multiplier": "FEATHER"
     },
     {
-      "id": 37,
+      "id": 76,
       "type": "INSECT",
-      "value": 0,
+      "value": 2,
       "TL": {
-        "specificCornerSeed": "INSECT",
+        "specificCornerSeed": "EMPTY",
         "x": 0,
         "y": 0,
         "cardSeed": "INSECT",
         "isThisCornerFree": true
       },
       "TR": {
-        "specificCornerSeed": "PLANT",
+        "specificCornerSeed": "NOTTOBEPLACEDON",
         "x": 0,
         "y": 0,
         "cardSeed": "INSECT",
         "isThisCornerFree": true
       },
       "BL": {
-        "specificCornerSeed": "INKWELL",
+        "specificCornerSeed": "EMPTY",
         "x": 0,
         "y": 0,
         "cardSeed": "INSECT",
         "isThisCornerFree": true
       },
       "BR": {
-        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "specificCornerSeed": "EMPTY",
         "x": 0,
         "y": 0,
         "cardSeed": "INSECT",
         "isThisCornerFree": true
       },
       "TLBack": {
-        "specificCornerSeed": "INSECT",
+        "specificCornerSeed": "EMPTY",
         "x": 0,
         "y": 0,
         "cardSeed": "INSECT",
         "isThisCornerFree": true
       },
       "TRBack": {
-        "specificCornerSeed": "PLANT",
+        "specificCornerSeed": "NOTTOBEPLACEDON",
         "x": 0,
         "y": 0,
         "cardSeed": "INSECT",
         "isThisCornerFree": true
       },
       "BLBack": {
-        "specificCornerSeed": "INKWELL",
+        "specificCornerSeed": "EMPTY",
         "x": 0,
         "y": 0,
         "cardSeed": "INSECT",
         "isThisCornerFree": true
       },
       "BRBack": {
-        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "specificCornerSeed": "EMPTY",
         "x": 0,
         "y": 0,
         "cardSeed": "INSECT",
         "isThisCornerFree": true
-      }
+      },
+      "requirementsForPlacing": [
+        "INSECT",
+        "INSECT",
+        "INSECT",
+        "MUSHROOM"
+      ],
+      "multiplier": "NUMOFCOVEREDCORNERS"
     },
     {
-      "id": 16,
+      "id": 56,
       "type": "PLANT",
-      "value": 0,
+      "value": 2,
       "TL": {
-        "specificCornerSeed": "MUSHROOM",
+        "specificCornerSeed": "EMPTY",
         "x": 0,
         "y": 0,
         "cardSeed": "PLANT",
         "isThisCornerFree": true
       },
       "TR": {
-        "specificCornerSeed": "PLANT",
+        "specificCornerSeed": "NOTTOBEPLACEDON",
         "x": 0,
         "y": 0,
         "cardSeed": "PLANT",
         "isThisCornerFree": true
       },
       "BL": {
+        "specificCornerSeed": "EMPTY",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "PLANT",
+        "isThisCornerFree": true
+      },
+      "BR": {
+        "specificCornerSeed": "EMPTY",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "PLANT",
+        "isThisCornerFree": true
+      },
+      "TLBack": {
+        "specificCornerSeed": "EMPTY",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "PLANT",
+        "isThisCornerFree": true
+      },
+      "TRBack": {
+        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "PLANT",
+        "isThisCornerFree": true
+      },
+      "BLBack": {
+        "specificCornerSeed": "EMPTY",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "PLANT",
+        "isThisCornerFree": true
+      },
+      "BRBack": {
+        "specificCornerSeed": "EMPTY",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "PLANT",
+        "isThisCornerFree": true
+      },
+      "requirementsForPlacing": [
+        "PLANT",
+        "PLANT",
+        "PLANT",
+        "MUSHROOM"
+      ],
+      "multiplier": "NUMOFCOVEREDCORNERS"
+    },
+    {
+      "id": 57,
+      "type": "PLANT",
+      "value": 3,
+      "TL": {
+        "specificCornerSeed": "EMPTY",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "PLANT",
+        "isThisCornerFree": true
+      },
+      "TR": {
         "specificCornerSeed": "NOTTOBEPLACEDON",
         "x": 0,
         "y": 0,
         "cardSeed": "PLANT",
         "isThisCornerFree": true
       },
+      "BL": {
+        "specificCornerSeed": "FEATHER",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "PLANT",
+        "isThisCornerFree": true
+      },
       "BR": {
-        "specificCornerSeed": "INKWELL",
+        "specificCornerSeed": "NOTTOBEPLACEDON",
         "x": 0,
         "y": 0,
         "cardSeed": "PLANT",
         "isThisCornerFree": true
       },
       "TLBack": {
-        "specificCornerSeed": "MUSHROOM",
+        "specificCornerSeed": "EMPTY",
         "x": 0,
         "y": 0,
         "cardSeed": "PLANT",
         "isThisCornerFree": true
       },
       "TRBack": {
-        "specificCornerSeed": "PLANT",
+        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "PLANT",
+        "isThisCornerFree": true
+      },
+      "BLBack": {
+        "specificCornerSeed": "FEATHER",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "PLANT",
+        "isThisCornerFree": true
+      },
+      "BRBack": {
+        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "PLANT",
+        "isThisCornerFree": true
+      },
+      "requirementsForPlacing": [
+        "PLANT",
+        "PLANT",
+        "PLANT"
+      ],
+      "multiplier": "MISSINGMULTIPLIER"
+    },
+    {
+      "id": 58,
+      "type": "PLANT",
+      "value": 3,
+      "TL": {
+        "specificCornerSeed": "PARCHMENT",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "PLANT",
+        "isThisCornerFree": true
+      },
+      "TR": {
+        "specificCornerSeed": "EMPTY",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "PLANT",
+        "isThisCornerFree": true
+      },
+      "BL": {
+        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "PLANT",
+        "isThisCornerFree": true
+      },
+      "BR": {
+        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "PLANT",
+        "isThisCornerFree": true
+      },
+      "TLBack": {
+        "specificCornerSeed": "PARCHMENT",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "PLANT",
+        "isThisCornerFree": true
+      },
+      "TRBack": {
+        "specificCornerSeed": "EMPTY",
         "x": 0,
         "y": 0,
         "cardSeed": "PLANT",
@@ -32385,38 +34428,316 @@
         "isThisCornerFree": true
       },
       "BRBack": {
-        "specificCornerSeed": "INKWELL",
+        "specificCornerSeed": "NOTTOBEPLACEDON",
         "x": 0,
         "y": 0,
         "cardSeed": "PLANT",
         "isThisCornerFree": true
-      }
+      },
+      "requirementsForPlacing": [
+        "PLANT",
+        "PLANT",
+        "PLANT"
+      ],
+      "multiplier": "MISSINGMULTIPLIER"
     },
     {
-      "id": 38,
+      "id": 70,
+      "type": "ANIMAL",
+      "value": 5,
+      "TL": {
+        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "ANIMAL",
+        "isThisCornerFree": true
+      },
+      "TR": {
+        "specificCornerSeed": "EMPTY",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "ANIMAL",
+        "isThisCornerFree": true
+      },
+      "BL": {
+        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "ANIMAL",
+        "isThisCornerFree": true
+      },
+      "BR": {
+        "specificCornerSeed": "EMPTY",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "ANIMAL",
+        "isThisCornerFree": true
+      },
+      "TLBack": {
+        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "ANIMAL",
+        "isThisCornerFree": true
+      },
+      "TRBack": {
+        "specificCornerSeed": "EMPTY",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "ANIMAL",
+        "isThisCornerFree": true
+      },
+      "BLBack": {
+        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "ANIMAL",
+        "isThisCornerFree": true
+      },
+      "BRBack": {
+        "specificCornerSeed": "EMPTY",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "ANIMAL",
+        "isThisCornerFree": true
+      },
+      "requirementsForPlacing": [
+        "ANIMAL",
+        "ANIMAL",
+        "ANIMAL",
+        "ANIMAL",
+        "ANIMAL"
+      ],
+      "multiplier": "MISSINGMULTIPLIER"
+    },
+    {
+      "id": 74,
       "type": "INSECT",
-      "value": 1,
+      "value": 2,
       "TL": {
-        "specificCornerSeed": "INSECT",
+        "specificCornerSeed": "EMPTY",
         "x": 0,
         "y": 0,
         "cardSeed": "INSECT",
         "isThisCornerFree": true
       },
       "TR": {
+        "specificCornerSeed": "EMPTY",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "INSECT",
+        "isThisCornerFree": true
+      },
+      "BL": {
         "specificCornerSeed": "NOTTOBEPLACEDON",
         "x": 0,
         "y": 0,
         "cardSeed": "INSECT",
         "isThisCornerFree": true
+      },
+      "BR": {
+        "specificCornerSeed": "EMPTY",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "INSECT",
+        "isThisCornerFree": true
+      },
+      "TLBack": {
+        "specificCornerSeed": "EMPTY",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "INSECT",
+        "isThisCornerFree": true
+      },
+      "TRBack": {
+        "specificCornerSeed": "EMPTY",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "INSECT",
+        "isThisCornerFree": true
+      },
+      "BLBack": {
+        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "INSECT",
+        "isThisCornerFree": true
+      },
+      "BRBack": {
+        "specificCornerSeed": "EMPTY",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "INSECT",
+        "isThisCornerFree": true
+      },
+      "requirementsForPlacing": [
+        "INSECT",
+        "INSECT",
+        "INSECT",
+        "ANIMAL"
+      ],
+      "multiplier": "NUMOFCOVEREDCORNERS"
+    },
+    {
+      "id": 54,
+      "type": "PLANT",
+      "value": 2,
+      "TL": {
+        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "PLANT",
+        "isThisCornerFree": true
+      },
+      "TR": {
+        "specificCornerSeed": "EMPTY",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "PLANT",
+        "isThisCornerFree": true
+      },
+      "BL": {
+        "specificCornerSeed": "EMPTY",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "PLANT",
+        "isThisCornerFree": true
+      },
+      "BR": {
+        "specificCornerSeed": "EMPTY",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "PLANT",
+        "isThisCornerFree": true
+      },
+      "TLBack": {
+        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "PLANT",
+        "isThisCornerFree": true
+      },
+      "TRBack": {
+        "specificCornerSeed": "EMPTY",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "PLANT",
+        "isThisCornerFree": true
+      },
+      "BLBack": {
+        "specificCornerSeed": "EMPTY",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "PLANT",
+        "isThisCornerFree": true
+      },
+      "BRBack": {
+        "specificCornerSeed": "EMPTY",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "PLANT",
+        "isThisCornerFree": true
+      },
+      "requirementsForPlacing": [
+        "PLANT",
+        "PLANT",
+        "PLANT",
+        "INSECT"
+      ],
+      "multiplier": "NUMOFCOVEREDCORNERS"
+    },
+    {
+      "id": 47,
+      "type": "MUSHROOM",
+      "value": 3,
+      "TL": {
+        "specificCornerSeed": "EMPTY",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "MUSHROOM",
+        "isThisCornerFree": true
+      },
+      "TR": {
+        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "MUSHROOM",
+        "isThisCornerFree": true
       },
       "BL": {
+        "specificCornerSeed": "INKWELL",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "MUSHROOM",
+        "isThisCornerFree": true
+      },
+      "BR": {
+        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "MUSHROOM",
+        "isThisCornerFree": true
+      },
+      "TLBack": {
+        "specificCornerSeed": "EMPTY",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "MUSHROOM",
+        "isThisCornerFree": true
+      },
+      "TRBack": {
+        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "MUSHROOM",
+        "isThisCornerFree": true
+      },
+      "BLBack": {
+        "specificCornerSeed": "INKWELL",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "MUSHROOM",
+        "isThisCornerFree": true
+      },
+      "BRBack": {
+        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "MUSHROOM",
+        "isThisCornerFree": true
+      },
+      "requirementsForPlacing": [
+        "MUSHROOM",
+        "MUSHROOM",
+        "MUSHROOM"
+      ],
+      "multiplier": "MISSINGMULTIPLIER"
+    },
+    {
+      "id": 72,
+      "type": "INSECT",
+      "value": 1,
+      "TL": {
         "specificCornerSeed": "EMPTY",
         "x": 0,
         "y": 0,
         "cardSeed": "INSECT",
         "isThisCornerFree": true
       },
+      "TR": {
+        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "INSECT",
+        "isThisCornerFree": true
+      },
+      "BL": {
+        "specificCornerSeed": "PARCHMENT",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "INSECT",
+        "isThisCornerFree": true
+      },
       "BR": {
         "specificCornerSeed": "EMPTY",
         "x": 0,
@@ -32425,7 +34746,7 @@
         "isThisCornerFree": true
       },
       "TLBack": {
-        "specificCornerSeed": "INSECT",
+        "specificCornerSeed": "EMPTY",
         "x": 0,
         "y": 0,
         "cardSeed": "INSECT",
@@ -32439,26 +34760,100 @@
         "isThisCornerFree": true
       },
       "BLBack": {
+        "specificCornerSeed": "PARCHMENT",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "INSECT",
+        "isThisCornerFree": true
+      },
+      "BRBack": {
         "specificCornerSeed": "EMPTY",
         "x": 0,
         "y": 0,
         "cardSeed": "INSECT",
         "isThisCornerFree": true
       },
+      "requirementsForPlacing": [
+        "INSECT",
+        "INSECT",
+        "ANIMAL"
+      ],
+      "multiplier": "PARCHMENT"
+    },
+    {
+      "id": 66,
+      "type": "ANIMAL",
+      "value": 2,
+      "TL": {
+        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "ANIMAL",
+        "isThisCornerFree": true
+      },
+      "TR": {
+        "specificCornerSeed": "EMPTY",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "ANIMAL",
+        "isThisCornerFree": true
+      },
+      "BL": {
+        "specificCornerSeed": "EMPTY",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "ANIMAL",
+        "isThisCornerFree": true
+      },
+      "BR": {
+        "specificCornerSeed": "EMPTY",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "ANIMAL",
+        "isThisCornerFree": true
+      },
+      "TLBack": {
+        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "ANIMAL",
+        "isThisCornerFree": true
+      },
+      "TRBack": {
+        "specificCornerSeed": "EMPTY",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "ANIMAL",
+        "isThisCornerFree": true
+      },
+      "BLBack": {
+        "specificCornerSeed": "EMPTY",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "ANIMAL",
+        "isThisCornerFree": true
+      },
       "BRBack": {
         "specificCornerSeed": "EMPTY",
         "x": 0,
         "y": 0,
-        "cardSeed": "INSECT",
+        "cardSeed": "ANIMAL",
         "isThisCornerFree": true
-      }
+      },
+      "requirementsForPlacing": [
+        "ANIMAL",
+        "ANIMAL",
+        "ANIMAL",
+        "PLANT"
+      ],
+      "multiplier": "NUMOFCOVEREDCORNERS"
     },
     {
-      "id": 39,
+      "id": 73,
       "type": "INSECT",
       "value": 1,
       "TL": {
-        "specificCornerSeed": "EMPTY",
+        "specificCornerSeed": "NOTTOBEPLACEDON",
         "x": 0,
         "y": 0,
         "cardSeed": "INSECT",
@@ -32472,21 +34867,21 @@
         "isThisCornerFree": true
       },
       "BL": {
-        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "specificCornerSeed": "EMPTY",
         "x": 0,
         "y": 0,
         "cardSeed": "INSECT",
         "isThisCornerFree": true
       },
       "BR": {
-        "specificCornerSeed": "INSECT",
+        "specificCornerSeed": "INKWELL",
         "x": 0,
         "y": 0,
         "cardSeed": "INSECT",
         "isThisCornerFree": true
       },
       "TLBack": {
-        "specificCornerSeed": "EMPTY",
+        "specificCornerSeed": "NOTTOBEPLACEDON",
         "x": 0,
         "y": 0,
         "cardSeed": "INSECT",
@@ -32500,539 +34895,293 @@
         "isThisCornerFree": true
       },
       "BLBack": {
-        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "specificCornerSeed": "EMPTY",
         "x": 0,
         "y": 0,
         "cardSeed": "INSECT",
         "isThisCornerFree": true
       },
       "BRBack": {
-        "specificCornerSeed": "INSECT",
+        "specificCornerSeed": "INKWELL",
         "x": 0,
         "y": 0,
         "cardSeed": "INSECT",
         "isThisCornerFree": true
-      }
+      },
+      "requirementsForPlacing": [
+        "INSECT",
+        "INSECT",
+        "MUSHROOM"
+      ],
+      "multiplier": "INKWELL"
     },
     {
-      "id": 5,
+      "id": 42,
       "type": "MUSHROOM",
-      "value": 0,
+      "value": 1,
       "TL": {
-        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "specificCornerSeed": "EMPTY",
         "x": 0,
         "y": 0,
         "cardSeed": "MUSHROOM",
         "isThisCornerFree": true
       },
       "TR": {
-        "specificCornerSeed": "FEATHER",
+        "specificCornerSeed": "INKWELL",
         "x": 0,
         "y": 0,
         "cardSeed": "MUSHROOM",
         "isThisCornerFree": true
       },
       "BL": {
-        "specificCornerSeed": "PLANT",
+        "specificCornerSeed": "NOTTOBEPLACEDON",
         "x": 0,
         "y": 0,
         "cardSeed": "MUSHROOM",
         "isThisCornerFree": true
       },
       "BR": {
-        "specificCornerSeed": "MUSHROOM",
+        "specificCornerSeed": "EMPTY",
         "x": 0,
         "y": 0,
         "cardSeed": "MUSHROOM",
         "isThisCornerFree": true
       },
       "TLBack": {
-        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "specificCornerSeed": "EMPTY",
         "x": 0,
         "y": 0,
         "cardSeed": "MUSHROOM",
         "isThisCornerFree": true
       },
       "TRBack": {
-        "specificCornerSeed": "FEATHER",
+        "specificCornerSeed": "INKWELL",
         "x": 0,
         "y": 0,
         "cardSeed": "MUSHROOM",
         "isThisCornerFree": true
       },
       "BLBack": {
-        "specificCornerSeed": "PLANT",
+        "specificCornerSeed": "NOTTOBEPLACEDON",
         "x": 0,
         "y": 0,
         "cardSeed": "MUSHROOM",
         "isThisCornerFree": true
       },
       "BRBack": {
-        "specificCornerSeed": "MUSHROOM",
+        "specificCornerSeed": "EMPTY",
         "x": 0,
         "y": 0,
         "cardSeed": "MUSHROOM",
         "isThisCornerFree": true
-      }
+      },
+      "requirementsForPlacing": [
+        "MUSHROOM",
+        "MUSHROOM",
+        "PLANT"
+      ],
+      "multiplier": "INKWELL"
     },
     {
-      "id": 18,
-      "type": "PLANT",
-      "value": 1,
+      "id": 78,
+      "type": "INSECT",
+      "value": 3,
       "TL": {
         "specificCornerSeed": "EMPTY",
         "x": 0,
         "y": 0,
-        "cardSeed": "PLANT",
+        "cardSeed": "INSECT",
         "isThisCornerFree": true
       },
       "TR": {
+        "specificCornerSeed": "PARCHMENT",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "INSECT",
+        "isThisCornerFree": true
+      },
+      "BL": {
+        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "INSECT",
+        "isThisCornerFree": true
+      },
+      "BR": {
+        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "INSECT",
+        "isThisCornerFree": true
+      },
+      "TLBack": {
         "specificCornerSeed": "EMPTY",
         "x": 0,
         "y": 0,
+        "cardSeed": "INSECT",
+        "isThisCornerFree": true
+      },
+      "TRBack": {
+        "specificCornerSeed": "PARCHMENT",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "INSECT",
+        "isThisCornerFree": true
+      },
+      "BLBack": {
+        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "INSECT",
+        "isThisCornerFree": true
+      },
+      "BRBack": {
+        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "INSECT",
+        "isThisCornerFree": true
+      },
+      "requirementsForPlacing": [
+        "INSECT",
+        "INSECT",
+        "INSECT"
+      ],
+      "multiplier": "MISSINGMULTIPLIER"
+    },
+    {
+      "id": 59,
+      "type": "PLANT",
+      "value": 3,
+      "TL": {
+        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "PLANT",
+        "isThisCornerFree": true
+      },
+      "TR": {
+        "specificCornerSeed": "INKWELL",
+        "x": 0,
+        "y": 0,
         "cardSeed": "PLANT",
         "isThisCornerFree": true
       },
       "BL": {
-        "specificCornerSeed": "PLANT",
+        "specificCornerSeed": "NOTTOBEPLACEDON",
         "x": 0,
         "y": 0,
         "cardSeed": "PLANT",
         "isThisCornerFree": true
       },
       "BR": {
-        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "specificCornerSeed": "EMPTY",
         "x": 0,
         "y": 0,
         "cardSeed": "PLANT",
         "isThisCornerFree": true
       },
       "TLBack": {
-        "specificCornerSeed": "EMPTY",
+        "specificCornerSeed": "NOTTOBEPLACEDON",
         "x": 0,
         "y": 0,
         "cardSeed": "PLANT",
         "isThisCornerFree": true
       },
       "TRBack": {
-        "specificCornerSeed": "EMPTY",
+        "specificCornerSeed": "INKWELL",
         "x": 0,
         "y": 0,
         "cardSeed": "PLANT",
         "isThisCornerFree": true
       },
       "BLBack": {
-        "specificCornerSeed": "PLANT",
+        "specificCornerSeed": "NOTTOBEPLACEDON",
         "x": 0,
         "y": 0,
         "cardSeed": "PLANT",
         "isThisCornerFree": true
       },
       "BRBack": {
-        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "specificCornerSeed": "EMPTY",
         "x": 0,
         "y": 0,
         "cardSeed": "PLANT",
         "isThisCornerFree": true
-      }
-    }
-  ],
-  "goldDeck": [
-    {
-      "id": 80,
-      "specificSeedType": 2,
-      "value": 5,
-      "TopLeftCorner": " EMPTY",
-      "TopRightCorner": " EMPTY",
-      "BottomLeftCorner": " NOTTOBEPLACEDON",
-      "BottomRightCorner": " NOTTOBEPLACEDON",
-      "requirements": "[INSECT, INSECT, INSECT, INSECT, INSECT]",
-      "multiplier": 10
-    },
-    {
-      "id": 42,
-      "specificSeedType": 3,
-      "value": 1,
-      "TopLeftCorner": " EMPTY",
-      "TopRightCorner": " INKWELL",
-      "BottomLeftCorner": " NOTTOBEPLACEDON",
-      "BottomRightCorner": " EMPTY",
-      "requirements": "[MUSHROOM, MUSHROOM, PLANT]",
-      "multiplier": 4
+      },
+      "requirementsForPlacing": [
+        "PLANT",
+        "PLANT",
+        "PLANT"
+      ],
+      "multiplier": "MISSINGMULTIPLIER"
     },
-    {
-      "id": 44,
-      "specificSeedType": 3,
-      "value": 2,
-      "TopLeftCorner": " EMPTY",
-      "TopRightCorner": " EMPTY",
-      "BottomLeftCorner": " NOTTOBEPLACEDON",
-      "BottomRightCorner": " EMPTY",
-      "requirements": "[MUSHROOM, MUSHROOM, MUSHROOM, ANIMAL]",
-      "multiplier": 9
-    },
-    {
-      "id": 54,
-      "specificSeedType": 0,
-      "value": 2,
-      "TopLeftCorner": " NOTTOBEPLACEDON",
-      "TopRightCorner": " EMPTY",
-      "BottomLeftCorner": " EMPTY",
-      "BottomRightCorner": " EMPTY",
-      "requirements": "[PLANT, PLANT, PLANT, INSECT]",
-      "multiplier": 9
-    },
-    {
-      "id": 59,
-      "specificSeedType": 0,
-      "value": 3,
-      "TopLeftCorner": " NOTTOBEPLACEDON",
-      "TopRightCorner": " INKWELL",
-      "BottomLeftCorner": " NOTTOBEPLACEDON",
-      "BottomRightCorner": " EMPTY",
-      "requirements": "[PLANT, PLANT, PLANT]",
-      "multiplier": 10
-    },
-    {
-      "id": 51,
-      "specificSeedType": 0,
-      "value": 1,
-      "TopLeftCorner": " FEATHER",
-      "TopRightCorner": " EMPTY",
-      "BottomLeftCorner": " EMPTY",
-      "BottomRightCorner": " NOTTOBEPLACEDON",
-      "requirements": "[PLANT, PLANT, INSECT]",
-      "multiplier": 6
-    },
-    {
-      "id": 78,
-      "specificSeedType": 2,
-      "value": 3,
-      "TopLeftCorner": " EMPTY",
-      "TopRightCorner": " PARCHMENT",
-      "BottomLeftCorner": " NOTTOBEPLACEDON",
-      "BottomRightCorner": " NOTTOBEPLACEDON",
-      "requirements": "[INSECT, INSECT, INSECT]",
-      "multiplier": 10
-    },
     {
       "id": 68,
-      "specificSeedType": 1,
+      "type": "ANIMAL",
       "value": 3,
-      "TopLeftCorner": " EMPTY",
-      "TopRightCorner": " INKWELL",
-      "BottomLeftCorner": " NOTTOBEPLACEDON",
-      "BottomRightCorner": " NOTTOBEPLACEDON",
-      "requirements": "[ANIMAL, ANIMAL, ANIMAL]",
-      "multiplier": 10
-    },
-    {
-      "id": 53,
-      "specificSeedType": 0,
-      "value": 1,
-      "TopLeftCorner": " EMPTY",
-      "TopRightCorner": " NOTTOBEPLACEDON",
-      "BottomLeftCorner": " INKWELL",
-      "BottomRightCorner": " EMPTY",
-      "requirements": "[PLANT, PLANT, ANIMAL]",
-      "multiplier": 4
-    },
-    {
-      "id": 76,
-      "specificSeedType": 2,
-      "value": 2,
-      "TopLeftCorner": " EMPTY",
-      "TopRightCorner": " NOTTOBEPLACEDON",
-      "BottomLeftCorner": " EMPTY",
-      "BottomRightCorner": " EMPTY",
-      "requirements": "[INSECT, INSECT, INSECT, MUSHROOM]",
-      "multiplier": 9
-    },
-    {
-      "id": 72,
-      "specificSeedType": 2,
-      "value": 1,
-      "TopLeftCorner": " EMPTY",
-      "TopRightCorner": " NOTTOBEPLACEDON",
-      "BottomLeftCorner": " PARCHMENT",
-      "BottomRightCorner": " EMPTY",
-      "requirements": "[INSECT, INSECT, ANIMAL]",
-      "multiplier": 5
-    },
-    {
-      "id": 58,
-      "specificSeedType": 0,
-      "value": 3,
-      "TopLeftCorner": " PARCHMENT",
-      "TopRightCorner": " EMPTY",
-      "BottomLeftCorner": " NOTTOBEPLACEDON",
-      "BottomRightCorner": " NOTTOBEPLACEDON",
-      "requirements": "[PLANT, PLANT, PLANT]",
-      "multiplier": 10
-    },
-    {
-      "id": 57,
-      "specificSeedType": 0,
-      "value": 3,
-      "TopLeftCorner": " EMPTY",
-      "TopRightCorner": " NOTTOBEPLACEDON",
-      "BottomLeftCorner": " FEATHER",
-      "BottomRightCorner": " NOTTOBEPLACEDON",
-      "requirements": "[PLANT, PLANT, PLANT]",
-      "multiplier": 10
-    },
-    {
-      "id": 65,
-      "specificSeedType": 1,
-      "value": 2,
-      "TopLeftCorner": " EMPTY",
-      "TopRightCorner": " NOTTOBEPLACEDON",
-      "BottomLeftCorner": " EMPTY",
-      "BottomRightCorner": " EMPTY",
-      "requirements": "[ANIMAL, ANIMAL, ANIMAL, MUSHROOM]",
-      "multiplier": 9
-    },
-    {
-      "id": 48,
-      "specificSeedType": 3,
-      "value": 3,
-      "TopLeftCorner": " FEATHER",
-      "TopRightCorner": " EMPTY",
-      "BottomLeftCorner": " NOTTOBEPLACEDON",
-      "BottomRightCorner": " NOTTOBEPLACEDON",
-      "requirements": "[MUSHROOM, MUSHROOM, MUSHROOM]",
-      "multiplier": 10
-    },
-    {
-      "id": 47,
-      "specificSeedType": 3,
-      "value": 3,
-      "TopLeftCorner": " EMPTY",
-      "TopRightCorner": " NOTTOBEPLACEDON",
-      "BottomLeftCorner": " INKWELL",
-      "BottomRightCorner": " NOTTOBEPLACEDON",
-      "requirements": "[MUSHROOM, MUSHROOM, MUSHROOM]",
-      "multiplier": 10
-    },
-    {
-      "id": 74,
-      "specificSeedType": 2,
-      "value": 2,
-      "TopLeftCorner": " EMPTY",
-      "TopRightCorner": " EMPTY",
-      "BottomLeftCorner": " NOTTOBEPLACEDON",
-      "BottomRightCorner": " EMPTY",
-      "requirements": "[INSECT, INSECT, INSECT, ANIMAL]",
-      "multiplier": 9
-    },
-    {
-      "id": 62,
-      "specificSeedType": 1,
-      "value": 1,
-      "TopLeftCorner": " NOTTOBEPLACEDON",
-      "TopRightCorner": " EMPTY",
-      "BottomLeftCorner": " EMPTY",
-      "BottomRightCorner": " PARCHMENT",
-      "requirements": "[ANIMAL, ANIMAL, PLANT]",
-      "multiplier": 5
-    },
-    {
-      "id": 52,
-      "specificSeedType": 0,
-      "value": 1,
-      "TopLeftCorner": " EMPTY",
-      "TopRightCorner": " PARCHMENT",
-      "BottomLeftCorner": " NOTTOBEPLACEDON",
-      "BottomRightCorner": " EMPTY",
-      "requirements": "[PLANT, PLANT, MUSHROOM]",
-      "multiplier": 5
-    },
-    {
-      "id": 77,
-      "specificSeedType": 2,
-      "value": 3,
-      "TopLeftCorner": " INKWELL",
-      "TopRightCorner": " NOTTOBEPLACEDON",
-      "BottomLeftCorner": " EMPTY",
-      "BottomRightCorner": " NOTTOBEPLACEDON",
-      "requirements": "[INSECT, INSECT, INSECT]",
-      "multiplier": 10
-    },
-    {
-      "id": 45,
-      "specificSeedType": 3,
-      "value": 2,
-      "TopLeftCorner": " EMPTY",
-      "TopRightCorner": " EMPTY",
-      "BottomLeftCorner": " EMPTY",
-      "BottomRightCorner": " NOTTOBEPLACEDON",
-      "requirements": "[MUSHROOM, MUSHROOM, MUSHROOM, PLANT]",
-      "multiplier": 9
-    },
-    {
-      "id": 56,
-      "specificSeedType": 0,
-      "value": 2,
-      "TopLeftCorner": " EMPTY",
-      "TopRightCorner": " NOTTOBEPLACEDON",
-      "BottomLeftCorner": " EMPTY",
-      "BottomRightCorner": " EMPTY",
-      "requirements": "[PLANT, PLANT, PLANT, MUSHROOM]",
-      "multiplier": 9
-    },
-    {
-      "id": 64,
-      "specificSeedType": 1,
-      "value": 2,
-      "TopLeftCorner": " EMPTY",
-      "TopRightCorner": " EMPTY",
-      "BottomLeftCorner": " NOTTOBEPLACEDON",
-      "BottomRightCorner": " EMPTY",
-      "requirements": "[ANIMAL, ANIMAL, ANIMAL, INSECT]",
-      "multiplier": 9
-    },
-    {
-      "id": 79,
-      "specificSeedType": 2,
-      "value": 3,
-      "TopLeftCorner": " NOTTOBEPLACEDON",
-      "TopRightCorner": " NOTTOBEPLACEDON",
-      "BottomLeftCorner": " FEATHER",
-      "BottomRightCorner": " EMPTY",
-      "requirements": "[INSECT, INSECT, INSECT]",
-      "multiplier": 10
-    },
-    {
-      "id": 66,
-      "specificSeedType": 1,
-      "value": 2,
-      "TopLeftCorner": " NOTTOBEPLACEDON",
-      "TopRightCorner": " EMPTY",
-      "BottomLeftCorner": " EMPTY",
-      "BottomRightCorner": " EMPTY",
-      "requirements": "[ANIMAL, ANIMAL, ANIMAL, PLANT]",
-      "multiplier": 9
-    },
-    {
-      "id": 70,
-      "specificSeedType": 1,
-      "value": 5,
-      "TopLeftCorner": " NOTTOBEPLACEDON",
-      "TopRightCorner": " EMPTY",
-      "BottomLeftCorner": " NOTTOBEPLACEDON",
-      "BottomRightCorner": " EMPTY",
-      "requirements": "[ANIMAL, ANIMAL, ANIMAL, ANIMAL, ANIMAL]",
-      "multiplier": 10
-    },
-    {
-      "id": 75,
-      "specificSeedType": 2,
-      "value": 2,
-      "TopLeftCorner": " EMPTY",
-      "TopRightCorner": " EMPTY",
-      "BottomLeftCorner": " EMPTY",
-      "BottomRightCorner": " NOTTOBEPLACEDON",
-      "requirements": "[INSECT, INSECT, INSECT, PLANT]",
-      "multiplier": 9
-    },
-    {
-      "id": 55,
-      "specificSeedType": 0,
-      "value": 2,
-      "TopLeftCorner": " EMPTY",
-      "TopRightCorner": " EMPTY",
-      "BottomLeftCorner": " EMPTY",
-      "BottomRightCorner": " NOTTOBEPLACEDON",
-      "requirements": "[PLANT, PLANT, PLANT, ANIMAL]",
-      "multiplier": 9
-    },
-    {
-      "id": 60,
-      "specificSeedType": 0,
-      "value": 5,
-      "TopLeftCorner": " EMPTY",
-      "TopRightCorner": " EMPTY",
-      "BottomLeftCorner": " NOTTOBEPLACEDON",
-      "BottomRightCorner": " NOTTOBEPLACEDON",
-      "requirements": "[PLANT, PLANT, PLANT, PLANT, PLANT]",
-      "multiplier": 10
-    },
-    {
-      "id": 43,
-      "specificSeedType": 3,
-      "value": 1,
-      "TopLeftCorner": " PARCHMENT",
-      "TopRightCorner": " EMPTY",
-      "BottomLeftCorner": " EMPTY",
-      "BottomRightCorner": " NOTTOBEPLACEDON",
-      "requirements": "[MUSHROOM, MUSHROOM, INSECT]",
-      "multiplier": 5
-    },
-    {
-      "id": 73,
-      "specificSeedType": 2,
-      "value": 1,
-      "TopLeftCorner": " NOTTOBEPLACEDON",
-      "TopRightCorner": " EMPTY",
-      "BottomLeftCorner": " EMPTY",
-      "BottomRightCorner": " INKWELL",
-      "requirements": "[INSECT, INSECT, MUSHROOM]",
-      "multiplier": 4
-    },
-    {
-      "id": 63,
-      "specificSeedType": 1,
-      "value": 1,
-      "TopLeftCorner": " EMPTY",
-      "TopRightCorner": " NOTTOBEPLACEDON",
-      "BottomLeftCorner": " FEATHER",
-      "BottomRightCorner": " EMPTY",
-      "requirements": "[ANIMAL, ANIMAL, MUSHROOM]",
-      "multiplier": 6
-    },
-    {
-      "id": 69,
-      "specificSeedType": 1,
-      "value": 3,
-      "TopLeftCorner": " NOTTOBEPLACEDON",
-      "TopRightCorner": " EMPTY",
-      "BottomLeftCorner": " NOTTOBEPLACEDON",
-      "BottomRightCorner": " FEATHER",
-      "requirements": "[ANIMAL, ANIMAL, ANIMAL]",
-      "multiplier": 10
-    },
-    {
-      "id": 71,
-      "specificSeedType": 2,
-      "value": 1,
-      "TopLeftCorner": " EMPTY",
-      "TopRightCorner": " FEATHER",
-      "BottomLeftCorner": " NOTTOBEPLACEDON",
-      "BottomRightCorner": " EMPTY",
-      "requirements": "[INSECT, INSECT, PLANT]",
-      "multiplier": 6
-    },
-    {
-      "id": 41,
-      "specificSeedType": 3,
-      "value": 1,
-      "TopLeftCorner": " NOTTOBEPLACEDON",
-      "TopRightCorner": " EMPTY",
-      "BottomLeftCorner": " EMPTY",
-      "BottomRightCorner": " FEATHER",
-      "requirements": "[MUSHROOM, MUSHROOM, ANIMAL]",
-      "multiplier": 6
-    },
-    {
-      "id": 46,
-      "specificSeedType": 3,
-      "value": 2,
-      "TopLeftCorner": " EMPTY",
-      "TopRightCorner": " NOTTOBEPLACEDON",
-      "BottomLeftCorner": " EMPTY",
-      "BottomRightCorner": " EMPTY",
-      "requirements": "[MUSHROOM, MUSHROOM, MUSHROOM, INSECT]",
-      "multiplier": 9
+      "TL": {
+        "specificCornerSeed": "EMPTY",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "ANIMAL",
+        "isThisCornerFree": true
+      },
+      "TR": {
+        "specificCornerSeed": "INKWELL",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "ANIMAL",
+        "isThisCornerFree": true
+      },
+      "BL": {
+        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "ANIMAL",
+        "isThisCornerFree": true
+      },
+      "BR": {
+        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "ANIMAL",
+        "isThisCornerFree": true
+      },
+      "TLBack": {
+        "specificCornerSeed": "EMPTY",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "ANIMAL",
+        "isThisCornerFree": true
+      },
+      "TRBack": {
+        "specificCornerSeed": "INKWELL",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "ANIMAL",
+        "isThisCornerFree": true
+      },
+      "BLBack": {
+        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "ANIMAL",
+        "isThisCornerFree": true
+      },
+      "BRBack": {
+        "specificCornerSeed": "NOTTOBEPLACEDON",
+        "x": 0,
+        "y": 0,
+        "cardSeed": "ANIMAL",
+        "isThisCornerFree": true
+      },
+      "requirementsForPlacing": [
+        "ANIMAL",
+        "ANIMAL",
+        "ANIMAL"
+      ],
+      "multiplier": "MISSINGMULTIPLIER"
     }
   ]
 }
