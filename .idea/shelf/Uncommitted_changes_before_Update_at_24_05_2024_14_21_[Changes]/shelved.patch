Index: src/main/java/network/client/gui/GameSceneController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package network.client.gui;\r\n\r\nimport com.google.gson.*;\r\nimport javafx.application.Platform;\r\nimport javafx.geometry.Insets;\r\nimport javafx.geometry.Pos;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Alert;\r\nimport javafx.scene.control.Button;\r\nimport javafx.scene.control.Label;\r\nimport javafx.scene.control.ScrollPane;\r\nimport javafx.scene.image.Image;\r\nimport javafx.scene.image.ImageView;\r\nimport javafx.scene.image.WritableImage;\r\nimport javafx.scene.layout.*;\r\nimport javafx.stage.Stage;\r\nimport view.ClientView;\r\n\r\nimport java.io.*;\r\nimport java.nio.file.Path;\r\nimport java.nio.file.Paths;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport java.net.Socket;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Objects;\r\n\r\npublic class GameSceneController {\r\n    private StackPane root = new StackPane();\r\n    private static final Object syncObject = new Object();\r\n    private Stage primaryStage;\r\n    private PrintWriter out;\r\n    private Socket socket;\r\n    private BufferedReader in;\r\n    private String typeHandCard1 = null;\r\n    private String typeHandCard2 = null;\r\n    private String typeHandCard3 = null;\r\n    private String idHandCard1 = null;\r\n    private String idHandCard2 = null;\r\n    private String idHandCard3 = null;\r\n    private String idTopCardResourceDeck;\r\n    private String idTopCardGoldDeck;\r\n    private Button playCard = new Button(\"Play Card\");\r\n    private Button flipCardToBack = new Button(\"Flip Card to back\");\r\n    private Button flipCardToFront = new Button(\"Flip Card to front\");\r\n    private Button drawCard = new Button(\"Draw card\");\r\n    private Button seeYourSpecificSeeds = new Button(\"See your seeds\");\r\n    private Button seeOtherPlayersBoards = new Button(\"See other players boards\");\r\n    private Button seeYourPoints = new Button(\"See your points\");\r\n    Button showObjective = new Button(\"Show Objective\");\r\n    private Button endTurn = new Button(\"End turn\");\r\n    private Button quit = new Button(\"Quit\");\r\n    private Boolean haveToDraw = false;\r\n    private Boolean haveToPlay = true;\r\n    private String chosenDeckForDrawingNewCard = null;\r\n    private String wellOrDeck = \"notSelected\";\r\n    private double heightWellCards = 80;\r\n    private double widthWellCards = 110;\r\n    private Integer indexCardToPlace = 100;\r\n    private Integer indexCardToBePlacedOn = 100;\r\n    private Integer indexCardPlayedFromHand = 9999999;\r\n    private Integer indexCardFromWellSelected = 89989898;\r\n    private String cornerSelected = \"notSelected\";\r\n    private Image wellCardSelected = null;\r\n    private String idWellCardSelected = null;\r\n    private Controller controller = null;\r\n    private String currentPlayerNickname;\r\n    private ClientView clientView;\r\n    private BoardPointsScene boardPointsScene;\r\n    private boolean isCurrentPlayerTurn = false;\r\n    private ScrollPane cardsOntheBoardScrollPane;\r\n    private GridPane gameBoard;\r\n    GridPane buttonContainer = new GridPane();\r\n    Label chosenCardToPlace = new Label();\r\n    Label chosenCardToBePlacedOn = new Label();\r\n    Label chosenCorner = new Label();\r\n    Label chosenDeckOrWell = new Label();\r\n    private List<CardView> allCardViews = new ArrayList<>();\r\n    private static CardView clickedCardView;\r\n    private Map<CardView, Integer> cardIndices = new HashMap<>();\r\n    private int nextCardIndex = 0; //\r\n    private String pathHandCard1;\r\n    private String pathHandCard2;\r\n    private String pathHandCard3;\r\n    private String pathChosen;\r\n    private GridPane gridPaneForWellCards;\r\n    String firstCommonId;\r\n    String secondCommonId;\r\n    ShowObjectiveScene objectiveScene;\r\n    private boolean cardOnHerBack=false;\r\n    private String pathFlipped;\r\n    private Image initCardImage;\r\n    private ImageView handCard1View;\r\n    private ImageView handCard2View;\r\n    private ImageView handCard3View;\r\n    private Image handCard1;\r\n    private Image handCard2;\r\n    private Image handCard3;\r\n    private String indexForGold=null;\r\n\r\n    public void initData(Stage primaryStage, PrintWriter out, Socket socket, BufferedReader in, ClientView clientView, String currentPlayerNickname) throws IOException {\r\n        this.primaryStage = primaryStage;\r\n        this.out = new PrintWriter(socket.getOutputStream(), true);\r\n        this.socket = socket;\r\n        this.in = in;\r\n        this.currentPlayerNickname = currentPlayerNickname;\r\n        System.out.println(\"Current player in initData is:\" + currentPlayerNickname);\r\n        this.clientView = clientView;\r\n        controller = new Controller(in, out);\r\n        isCurrentPlayerTurn = clientView.getUserName().equals(currentPlayerNickname);\r\n\r\n    }\r\n\r\n    public synchronized void updateFirst() throws IOException {\r\n        synchronized (syncObject) {\r\n            initializeWell();\r\n            updatingResourceAndGoldDeck();\r\n            creatingPathForGameMethod();\r\n            SharedObjectsInGui.setTopCardResourceDeck(createNewPathForImages(SharedObjectsInGui.getPathResourceDeck()));\r\n            SharedObjectsInGui.setTopCardGoldDeck(createNewPathForImages(SharedObjectsInGui.getPathGoldDeck()));\r\n            out.println(\"firstCardResourceGui\");\r\n            idTopCardResourceDeck = in.readLine();\r\n            out.println(\"firstCardGoldGui\");\r\n            idTopCardGoldDeck = in.readLine();\r\n            creatingDeckAndGoldDeckView();\r\n            creatingWell();\r\n            creatingImagesForTheWell();\r\n            creatingImagesViewForTheWell();\r\n            settingWellOnMouseClickedEvent();\r\n            settingDecksOnMouseClickedEvent();\r\n            playerDeck();\r\n            checkTypePlayerDeck();\r\n        }\r\n    }\r\n\r\n    public void startGame(String initCardId, int isFront) throws IOException {\r\n        Image backGroundImage = new Image(Objects.requireNonNull(getClass().getResourceAsStream(\"/ImmaginiCodex/sfondoGame.jpg\")));\r\n        BackgroundImage backgroundImage = new BackgroundImage(backGroundImage, BackgroundRepeat.NO_REPEAT, BackgroundRepeat.NO_REPEAT, BackgroundPosition.CENTER, BackgroundSize.DEFAULT);\r\n        Background background = new Background(backgroundImage);\r\n\r\n        pathHandCard1 = \"/ImmaginiCodex/CarteFront/\" + typeHandCard1 + \"/\" + idHandCard1 + \".png\";\r\n        pathHandCard2 = \"/ImmaginiCodex/CarteFront/\" + typeHandCard2 + \"/\" + idHandCard2 + \".png\";\r\n        pathHandCard3 = \"/ImmaginiCodex/CarteFront/\" + typeHandCard3 + \"/\" + idHandCard3 + \".png\";\r\n\r\n        handCard1 = new Image(Objects.requireNonNull(getClass().getResourceAsStream(pathHandCard1)));\r\n        handCard2 = new Image(Objects.requireNonNull(getClass().getResourceAsStream(pathHandCard2)));\r\n        handCard3 = new Image(Objects.requireNonNull(getClass().getResourceAsStream(pathHandCard3)));\r\n\r\n        handCard1View = new ImageView(handCard1);\r\n        setWidthAndHeight(handCard1View);\r\n\r\n        handCard2View = new ImageView(handCard2);\r\n        handCard2View.setFitWidth(widthWellCards);\r\n        handCard2View.setFitHeight(heightWellCards);\r\n\r\n        handCard3View = new ImageView(handCard3);\r\n        handCard3View.setFitWidth(widthWellCards);\r\n        handCard3View.setFitHeight(heightWellCards);\r\n\r\n        cardsOntheBoardScrollPane = new ScrollPane();\r\n        cardsOntheBoardScrollPane.setPrefSize(400.00, 400.00);\r\n        int boardDimension = 500;\r\n\r\n        gameBoard = new GridPane(boardDimension, boardDimension);\r\n        gameBoard.setBackground(background);\r\n        gameBoard.setHgap(0);\r\n        gameBoard.setVgap(0);\r\n        gameBoard.setAlignment(Pos.CENTER);\r\n\r\n        double windowedLength = root.getWidth();\r\n        double windowHeight = root.getHeight();\r\n\r\n        gameBoard.setPrefSize(windowedLength * 0.8, windowHeight * 0.8);\r\n        if(isFront==1)\r\n        {\r\n          initCardImage = new Image(Objects.requireNonNull(getClass().getResourceAsStream(\"/ImmaginiCodex/CarteFront/Init/\" + initCardId + \".png\")));\r\n        }\r\n        else {\r\n            initCardImage = new Image(Objects.requireNonNull(getClass().getResourceAsStream(\"/ImmaginiCodex/CarteBack/Init/\" + initCardId + \".png\")));\r\n        }\r\n\r\n        GridPane initCardDividedInNineRegions = subnettingEachImage(initCardImage, initCardId);\r\n\r\n        ImageView tlImageView = (ImageView) initCardDividedInNineRegions.getChildren().get(0);\r\n        ImageView tcImageView = (ImageView) initCardDividedInNineRegions.getChildren().get(1);\r\n        ImageView trImageView = (ImageView) initCardDividedInNineRegions.getChildren().get(2);\r\n        ImageView lcImageView = (ImageView) initCardDividedInNineRegions.getChildren().get(3);\r\n        ImageView ccImageView = (ImageView) initCardDividedInNineRegions.getChildren().get(4);\r\n        ImageView rcImageView = (ImageView) initCardDividedInNineRegions.getChildren().get(5);\r\n        ImageView blImageView = (ImageView) initCardDividedInNineRegions.getChildren().get(6);\r\n        ImageView bcImageView = (ImageView) initCardDividedInNineRegions.getChildren().get(7);\r\n        ImageView brImageView = (ImageView) initCardDividedInNineRegions.getChildren().get(8);\r\n\r\n        CardView tlCardView = new CardView(tlImageView, initCardId, \"TL\");\r\n        CardView tcCardView = new CardView(tcImageView, initCardId, \"TC\");\r\n        CardView trCardView = new CardView(trImageView, initCardId, \"TR\");\r\n        CardView lcCardView = new CardView(lcImageView, initCardId, \"LC\");\r\n        CardView ccCardView = new CardView(ccImageView, initCardId, \"CC\");\r\n        CardView rcCardView = new CardView(rcImageView, initCardId, \"RC\");\r\n        CardView blCardView = new CardView(blImageView, initCardId, \"BL\");\r\n        CardView bcCardView = new CardView(bcImageView, initCardId, \"BC\");\r\n        CardView brCardView = new CardView(brImageView, initCardId, \"BR\");\r\n\r\n        nextCardIndex++; //1 for initial card\r\n        //All the index of the same card has the same value\r\n        cardIndices.put(tlCardView, nextCardIndex);\r\n        System.out.println(\"Added TL CardView with index: \" + nextCardIndex);\r\n        cardIndices.put(tcCardView, nextCardIndex);\r\n        System.out.println(\"Added TC CardView with index: \" + nextCardIndex);\r\n        cardIndices.put(trCardView, nextCardIndex);\r\n        System.out.println(\"Added TR CardView with index: \" + nextCardIndex);\r\n        cardIndices.put(lcCardView, nextCardIndex);\r\n        System.out.println(\"Added LC CardView with index: \" + nextCardIndex);\r\n        cardIndices.put(ccCardView, nextCardIndex);\r\n        System.out.println(\"Added CC CardView with index: \" + nextCardIndex);\r\n        cardIndices.put(rcCardView, nextCardIndex);\r\n        System.out.println(\"Added RC CardView with index: \" + nextCardIndex);\r\n        cardIndices.put(blCardView, nextCardIndex);\r\n        System.out.println(\"Added BL CardView with index: \" + nextCardIndex);\r\n        cardIndices.put(bcCardView, nextCardIndex);\r\n        System.out.println(\"Added BC CardView with index: \" + nextCardIndex);\r\n        cardIndices.put(brCardView, nextCardIndex);\r\n        System.out.println(\"Added BR CardView with index: \" + nextCardIndex);\r\n\r\n\r\n        tlImageView.setPickOnBounds(true);\r\n        trImageView.setPickOnBounds(true);\r\n        blImageView.setPickOnBounds(true);\r\n        brImageView.setPickOnBounds(true);\r\n\r\n        gameBoard.add(tlImageView, boardDimension / 3, boardDimension / 3);\r\n        gameBoard.add(tcImageView, boardDimension / 3+1, boardDimension / 3);\r\n        gameBoard.add(trImageView, boardDimension / 3+2, boardDimension / 3);\r\n        gameBoard.add(lcImageView, boardDimension / 3, boardDimension / 3+1);\r\n        gameBoard.add(ccImageView, boardDimension / 3+1, boardDimension / 3+1);\r\n        gameBoard.add(rcImageView, boardDimension / 3+2, boardDimension / 3+1);\r\n        gameBoard.add(blImageView, boardDimension / 3, boardDimension / 3+2);\r\n        gameBoard.add(bcImageView, boardDimension / 3+1, boardDimension / 3+2);\r\n        gameBoard.add(brImageView, boardDimension / 3+2, boardDimension / 3+2);\r\n\r\n        cardsOntheBoardScrollPane.setContent(gameBoard);\r\n        BorderPane layout = new BorderPane();\r\n        layout.setCenter(cardsOntheBoardScrollPane);\r\n        layout.setStyle(\"-fx-background-color: #212121;\");\r\n\r\n\r\n        VBox vboxGame = new VBox();\r\n        vboxGame.setFillWidth(true);\r\n\r\n        Insets padding = new Insets(10, 10, 10, 10);\r\n        Insets paddingDecks = new Insets(100, 10, 10, 10);\r\n\r\n        HBox secondRow = new HBox();\r\n        HBox firstColumnOfSecondRow = new HBox();\r\n        firstColumnOfSecondRow.setPadding(padding);\r\n        firstColumnOfSecondRow.setSpacing(4);\r\n\r\n        Label wellText = new Label(\"                    WELL\");\r\n        Label wellText2 = new Label(\"CARDS\");\r\n        wellText.setStyle(\"-fx-font-weight: bold; -fx-text-fill: white; -fx-font-size: 14\");\r\n        wellText2.setStyle(\"-fx-font-weight: bold; -fx-text-fill: white; -fx-font-size: 14\");\r\n\r\n        //Initializing well cards\r\n\r\n        gridPaneForWellCards = new GridPane();\r\n        gridPaneForWellCards.setVgap(4.0);\r\n        gridPaneForWellCards.setHgap(4.0);\r\n        gridPaneForWellCards.setPadding(padding);\r\n        gridPaneForWellCards.add(SharedObjectsInGui.getWellCard1View(), 0, 0);\r\n        gridPaneForWellCards.add(SharedObjectsInGui.getWellCard2View(), 0, 1);\r\n        gridPaneForWellCards.add(SharedObjectsInGui.getWellCard3View(), 1, 0);\r\n        gridPaneForWellCards.add(SharedObjectsInGui.getWellCard4View(), 1, 1);\r\n        gridPaneForWellCards.add(wellText, 0, 2);\r\n        gridPaneForWellCards.add(wellText2, 1, 2);\r\n\r\n        HBox decks = new HBox();\r\n        Label decksText = new Label(\"      Resource Deck               Gold Deck\");\r\n        decksText.setStyle(\"-fx-font-weight: bold; -fx-text-fill: white\");\r\n\r\n        decks.setSpacing(4.0);\r\n        decks.setPadding(paddingDecks);\r\n        decks.getChildren().addAll(SharedObjectsInGui.getTopCardResourceDeckView(), SharedObjectsInGui.getTopCardGoldDeckView());\r\n\r\n        buttonContainer.setHgap(2);\r\n        buttonContainer.setVgap(2);\r\n        creatingButtons();\r\n        vboxGame.getChildren().addAll(gridPaneForWellCards, decks, decksText, buttonContainer);\r\n        buttonContainer.setDisable(true);\r\n\r\n        VBox secondColumnOfSecondRow = new VBox();\r\n\r\n        chosenCardToPlace.setStyle(\"-fx-text-fill: white;\");\r\n        chosenCardToBePlacedOn.setStyle(\"-fx-text-fill: white;\");\r\n        chosenCorner.setStyle(\"-fx-text-fill: white;\");\r\n        chosenDeckOrWell.setStyle(\"-fx-text-fill: white;\");\r\n\r\n        secondColumnOfSecondRow.getChildren().addAll(chosenCardToPlace, chosenCardToBePlacedOn, chosenCorner, chosenDeckOrWell);\r\n        chosenDeckOrWell.setText(\"Drawing from: \" + wellOrDeck);\r\n\r\n        layout.setRight(vboxGame);\r\n        firstColumnOfSecondRow.getChildren().addAll(handCard1View, handCard2View, handCard3View);\r\n        secondRow.getChildren().addAll(firstColumnOfSecondRow, secondColumnOfSecondRow);\r\n        layout.setBottom(secondRow);\r\n        root.getChildren().add(layout);\r\n        Scene gameScene = new Scene(root, 430, 625);\r\n\r\n        Platform.runLater(() -> primaryStage.setScene(gameScene));\r\n\r\n        if (currentPlayerNickname.equals(clientView.getUserName())) {\r\n            isCurrentPlayerTurn = true;\r\n            waitUntilLastMessage();\r\n            setupGameActions();\r\n            buttonContainer.setDisable(false);\r\n        } else {\r\n            isCurrentPlayerTurn = false;\r\n            waitForTurn(handCard1View, handCard2View, handCard3View);\r\n        }\r\n\r\n    }\r\n\r\n    private void handleCardClick(CardView cardView) {\r\n        if (isCurrentPlayerTurn) {\r\n            setClickedCardView(cardView);\r\n            cornerSelected = cardView.getPosition();\r\n            Integer cardIndex = cardIndices.get(cardView);\r\n            System.out.println(\"Clicked CardView: \" + cardView);\r\n            System.out.println(\"Current cardIndices map:\");\r\n            for (Map.Entry<CardView, Integer> entry : cardIndices.entrySet()) {\r\n                System.out.println(\"Key: \" + entry.getKey() + \", Value: \" + entry.getValue());\r\n            }\r\n\r\n            if (cardIndex != null) {\r\n                indexCardToBePlacedOn = cardIndex;\r\n                System.out.println(\"Card Clicked: indexCardToBePlacedOn = \" + indexCardToBePlacedOn + \", cornerSelected = \" + cornerSelected);\r\n            } else {\r\n                System.out.println(\"Card Clicked: cardIndex not found, cornerSelected = \" + cornerSelected);\r\n            }\r\n            chosenCorner.setText(\"Corner: \" + cornerSelected);\r\n            chosenCardToBePlacedOn.setText(\"Place your card on: \" + indexCardToBePlacedOn);\r\n        } else {\r\n            showAlert(\"Not your turn\", \"It's not your turn yet.\");\r\n        }\r\n    }\r\n\r\n    private void setupGameActions() throws IOException {\r\n        playCard.setOnAction(e -> {\r\n            if (isCurrentPlayerTurn) {\r\n                if (haveToPlay) {\r\n                    if(cornerSelected==null)\r\n                    {\r\n                        showAlert(\"Corner Missing\",\"Please select a corner beforing playing a card\");\r\n                    }\r\n                    if(Integer.parseInt(indexForGold)>41)\r\n                    {\r\n                        System.out.println(\"You chose to play a gold card\");\r\n                        out.println(\"goldGui\");\r\n                    }\r\n                    if (cornerSelected!=null && indexCardToPlace < 4) {\r\n                        try {\r\n                            String isTheCardFlipped=null;\r\n                            String actualId=null;\r\n                            switch (indexCardToPlace) {\r\n                                case 0:\r\n                                    handCard1View.setImage(null);\r\n                                    actualId=idHandCard1;\r\n                                    isTheCardFlipped=handCard1View.getId();\r\n                                    break;\r\n                                case 1:\r\n\r\n                                    handCard2View.setImage(null);\r\n                                    actualId=idHandCard2;\r\n                                    isTheCardFlipped=handCard2View.getId();\r\n                                    break;\r\n                                case 2:\r\n\r\n                                    handCard3View.setImage(null);\r\n                                    actualId=idHandCard3;\r\n                                    isTheCardFlipped=handCard3View.getId();\r\n                                    break;\r\n                                default:\r\n                                    System.out.println(\"sono nullo\");\r\n                                    break;\r\n                            }\r\n                            System.out.println(\"Indice della carta che voglio piazzare è: \" +indexCardToPlace);\r\n                            controller.playCardClick(indexCardToBePlacedOn, indexCardToPlace, cornerSelected,isTheCardFlipped);\r\n                            indexCardPlayedFromHand = indexCardToPlace;\r\n                            switch (cornerSelected) {\r\n                                case \"TL\":\r\n                                    placingTopLeftCard(getClickedImageView().getImageView(), gameBoard, indexCardPlayedFromHand);\r\n                                    break;\r\n                                case \"TR\":\r\n                                    placingTopRightCard(getClickedImageView().getImageView(), gameBoard, indexCardPlayedFromHand);\r\n                                    break;\r\n                                case \"BL\":\r\n                                    placingBottomLeftCard(getClickedImageView().getImageView(), gameBoard, indexCardPlayedFromHand);\r\n                                    break;\r\n                                case \"BR\":\r\n                                    placingBottomRightCard(getClickedImageView().getImageView(), gameBoard, indexCardPlayedFromHand);\r\n                                    break;\r\n                                default:\r\n                                    break;\r\n                            }\r\n                            haveToDraw = true;\r\n                            handCard1View.setId(\"Front\");\r\n                            handCard2View.setId(\"Front\");\r\n                            handCard3View.setId(\"Front\");\r\n                            cornerSelected=null;\r\n                            indexCardToPlace=100;\r\n                        } catch (IOException exception) {\r\n                            throw new RuntimeException(exception);\r\n                        }\r\n                        haveToPlay = false;\r\n                    } else {\r\n                        showAlert(\"Action not allowed\", \"Choose the right cards.\");\r\n                    }\r\n                } else {\r\n                    showAlert(\"Action not allowed\", \"You have already played a card.\");\r\n                }\r\n            } else {\r\n                showAlert(\"Not your turn\", \"It's not your turn yet.\");\r\n            }\r\n        });\r\n\r\n        endTurn.setOnMouseClicked(e -> {\r\n            if (isCurrentPlayerTurn) {\r\n                if(!haveToDraw && !haveToPlay){\r\n                    try {\r\n                        savePath();\r\n                        String nextPlayerNickname = controller.endTurn();\r\n                        updateTurnState(nextPlayerNickname.equals(clientView.getUserName()));\r\n                        haveToPlay = true;\r\n                        waitForTurn(handCard1View, handCard2View, handCard3View);\r\n                    } catch (IOException ex) {\r\n                        throw new RuntimeException(ex);\r\n                    }\r\n                }\r\n                else if(haveToDraw){\r\n                    showAlert(\"HavetoDraw\", \"You have to draw a card first\");\r\n                }\r\n                else{\r\n                    showAlert(\"HavetoPlay\", \"You have to place a card first\");\r\n                }\r\n            } else {\r\n                showAlert(\"Not your turn\", \"It's not your turn yet.\");\r\n            }\r\n        });\r\n\r\n        drawCard.setOnAction(e -> {\r\n            if (isCurrentPlayerTurn) {\r\n                if (haveToDraw) {\r\n                    try {\r\n                        controller.drawCard(wellOrDeck, chosenDeckForDrawingNewCard, indexCardFromWellSelected);\r\n                        Image drawnCardImage = null;\r\n                        String idTopCard = null;\r\n\r\n                        if (wellOrDeck.equals(\"deck\")) {\r\n                            System.out.println(wellOrDeck);\r\n                            if (chosenDeckForDrawingNewCard.equals(\"resource\")) {\r\n                                drawnCardImage = createNewPathForImages(pathForResourceCardFront(idTopCardResourceDeck));\r\n                                idTopCard = idTopCardResourceDeck;\r\n                            } else if (chosenDeckForDrawingNewCard.equals(\"gold\")) {\r\n                                drawnCardImage = createNewPathForImages(pathForGoldCardFront(idTopCardGoldDeck));\r\n                                idTopCard = idTopCardGoldDeck;\r\n                            }\r\n                        } else if (wellOrDeck.equals(\"well\")) {\r\n                            System.out.println(wellOrDeck);\r\n                            drawnCardImage = wellCardSelected;\r\n                            idTopCard = idWellCardSelected;\r\n                        }\r\n                        System.out.println(idTopCard);\r\n                        if (drawnCardImage != null && idTopCard != null) {\r\n                            switch (indexCardPlayedFromHand) {\r\n                                case 0:\r\n                                    handCard1View.setImage(drawnCardImage);\r\n                                    pathHandCard1 = \"/ImmaginiCodex/CarteFront/\" + checkType(idTopCard) + \"/\" + idTopCard + \".png\";\r\n                                    idHandCard1 = idTopCard;\r\n                                    break;\r\n                                case 1:\r\n                                    handCard2View.setImage(drawnCardImage);\r\n                                    pathHandCard2 = \"/ImmaginiCodex/CarteFront/\" + checkType(idTopCard) + \"/\" + idTopCard + \".png\";\r\n                                    idHandCard2 = idTopCard;\r\n                                    break;\r\n                                case 2:\r\n                                    handCard3View.setImage(drawnCardImage);\r\n                                    pathHandCard3 = \"/ImmaginiCodex/CarteFront/\" + checkType(idTopCard) + \"/\" + idTopCard + \".png\";\r\n                                    idHandCard3 = idTopCard;\r\n                                    break;\r\n                            }\r\n                            System.out.println(\"idHandCard\" + (indexCardPlayedFromHand + 1) + \" = \" + idTopCard);\r\n\r\n                            initializeWell(); //firtwellid,secondwellid,....\r\n                            String newPath1= \"/ImmaginiCodex/CarteFront/Resource/\"+ SharedObjectsInGui.getIdCard1()+\".png\";\r\n                            Image newImage1= new Image(Objects.requireNonNull(getClass().getResourceAsStream(newPath1)));\r\n                            SharedObjectsInGui.getWellCard1View().setImage(newImage1);\r\n                            String newPath2= \"/ImmaginiCodex/CarteFront/Resource/\"+ SharedObjectsInGui.getIdCard2()+\".png\";\r\n                            Image newImage2= new Image(Objects.requireNonNull(getClass().getResourceAsStream(newPath2)));\r\n                            SharedObjectsInGui.getWellCard2View().setImage(newImage2);\r\n                            String newPath3= \"/ImmaginiCodex/CarteFront/Gold/\"+ SharedObjectsInGui.getIdCard3()+\".png\";\r\n                            Image newImage3= new Image(Objects.requireNonNull(getClass().getResourceAsStream(newPath3)));\r\n                            SharedObjectsInGui.getWellCard3View().setImage(newImage3);\r\n                            String newPath4= \"/ImmaginiCodex/CarteFront/Gold/\"+ SharedObjectsInGui.getIdCard4()+\".png\";\r\n                            Image newImage4= new Image(Objects.requireNonNull(getClass().getResourceAsStream(newPath4)));\r\n                            SharedObjectsInGui.getWellCard4View().setImage(newImage4);\r\n                            updateResourceDeckTopCard();\r\n                            updatedGoldDeckTopCard();\r\n                            haveToDraw = false;\r\n                        } else {\r\n                            showAlert(\"Action not allowed\", \"Yoh have to choose a card to draw\");\r\n                        }\r\n                    } catch (IOException ex) {\r\n                        throw new RuntimeException(ex);\r\n                    }\r\n                } else {\r\n                    showAlert(\"Action not allowed\", \"You can't draw any card now.\");\r\n                }\r\n            } else {\r\n                showAlert(\"Not your turn\", \"It's not your turn yet.\");\r\n            }\r\n        });\r\n\r\n        flipCardToBack.setOnAction(e -> {\r\n            if (isCurrentPlayerTurn) {\r\n                switch (indexCardToPlace) {\r\n                    case 0:\r\n                        handCard1View.setImage(flipToBackCard(idHandCard1));\r\n                        handCard1View.setId(\"Back\");\r\n                        break;\r\n                    case 1:\r\n                        handCard2View.setImage(flipToBackCard(idHandCard2));\r\n                        handCard2View.setId(\"Back\");\r\n                        break;\r\n                    case 2:\r\n                        handCard3View.setImage(flipToBackCard(idHandCard3));\r\n                        handCard3View.setId(\"Back\");\r\n                        break;\r\n                    default:\r\n                        showAlert(\"Invalid action\", \"You chose an unflippable card.\");\r\n                        break;\r\n                }\r\n            } else {\r\n                showAlert(\"Not your turn\", \"It's not your turn yet.\");\r\n            }\r\n        });\r\n\r\n        flipCardToFront.setOnAction(e -> {\r\n            if (isCurrentPlayerTurn) {\r\n                switch (indexCardToPlace) {\r\n                    case 0:\r\n                        handCard1View.setImage(flipCardToFront(idHandCard1));\r\n                        handCard1View.setId(\"Front\");\r\n                        break;\r\n                    case 1:\r\n                        handCard2View.setImage(flipCardToFront(idHandCard2));\r\n                        handCard2View.setId(\"Front\");\r\n                        break;\r\n                    case 2:\r\n                        handCard3View.setImage(flipCardToFront(idHandCard3));\r\n                        handCard3View.setId(\"Front\");\r\n                        break;\r\n                    default:\r\n                        showAlert(\"Invalid action\", \"You chose an unflippable card.\");\r\n                        break;\r\n                }\r\n            } else {\r\n                showAlert(\"Not your turn\", \"It's not your turn yet.\");\r\n            }\r\n        });\r\n\r\n        handCard1View.setOnMouseClicked(event -> {\r\n            if (isCurrentPlayerTurn) {\r\n                indexCardToPlace = 0;\r\n                chosenCardToPlace.setText(\"First card of your hand\");\r\n\r\n                if(handCard1View.getId()==null|| handCard1View.getId().equals(\"Front\"))\r\n                {\r\n                    pathChosen = pathHandCard1;\r\n                    System.out.println(\"Front\");\r\n                }\r\n                else{\r\n                    pathChosen=pathFlipped;\r\n                    System.out.println(pathChosen);\r\n                    System.out.println(\"Back\");\r\n                }\r\n                if(Integer.parseInt(idHandCard1)<41)\r\n                {\r\n                    System.out.println(\"ResourceCard\");\r\n                }\r\n                else {System.out.println(\"GoldCard\");\r\n                    indexForGold=idHandCard1;\r\n                }\r\n\r\n\r\n            } else {\r\n                showAlert(\"Not your turn\", \"It's not your turn yet.\");\r\n            }\r\n        });\r\n\r\n        handCard2View.setOnMouseClicked(event -> {\r\n            if (isCurrentPlayerTurn) {\r\n                indexCardToPlace = 1;\r\n                chosenCardToPlace.setText(\"Second card of your hand\");\r\n                pathChosen = pathHandCard2;\r\n                if(handCard2View.getId()==null|| handCard2View.getId().equals(\"Front\"))\r\n                {\r\n                    pathChosen = pathHandCard2;\r\n                    System.out.println(\"Front\");\r\n                }\r\n                else{\r\n                    pathChosen=pathFlipped;\r\n                    System.out.println(pathChosen);\r\n                    System.out.println(\"Back\");\r\n                }\r\n                if(Integer.parseInt(idHandCard2)<41)\r\n                {\r\n                    System.out.println(\"ResourceCard\");\r\n                }\r\n                else {System.out.println(\"GOldCard\");\r\n                    indexForGold=idHandCard2;\r\n                }\r\n            } else {\r\n                showAlert(\"Not your turn\", \"It's not your turn yet.\");\r\n            }\r\n        });\r\n\r\n        handCard3View.setOnMouseClicked(event -> {\r\n            if (isCurrentPlayerTurn) {\r\n                indexCardToPlace = 2;\r\n                chosenCardToPlace.setText(\"Third card of your hand\");\r\n                pathChosen = pathHandCard3;\r\n                if(handCard3View.getId()==null|| handCard3View.getId().equals(\"Front\"))\r\n                {\r\n                    pathChosen = pathHandCard3;\r\n                    System.out.println(\"Front\");\r\n                }\r\n                else{\r\n                    pathChosen=pathFlipped;\r\n                    System.out.println(pathChosen);\r\n                    System.out.println(\"Back\");\r\n                }\r\n                if(Integer.parseInt(idHandCard3)<41)\r\n                {\r\n                    System.out.println(\"ResourceCard\");\r\n                }\r\n                else {System.out.println(\"GoldCard\");\r\n                indexForGold=idHandCard3;\r\n                }\r\n            } else {\r\n                showAlert(\"Not your turn\", \"It's not your turn yet.\");\r\n            }\r\n        });\r\n\r\n        seeYourSpecificSeeds.setOnMouseClicked(e -> {\r\n            if (isCurrentPlayerTurn) {\r\n                try {\r\n                    String yourSeeds = controller.showSpecificSeed();\r\n                    showAlert(\"Your seeds at the moment\", yourSeeds);\r\n                } catch (IOException ex) {\r\n                    throw new RuntimeException(ex);\r\n                }\r\n            } else {\r\n                showAlert(\"Not your turn\", \"It's not your turn yet.\");\r\n            }\r\n        });\r\n\r\n        seeYourPoints.setOnMouseClicked(e -> {\r\n            if (isCurrentPlayerTurn) {\r\n                try {\r\n                    boardPointsScene = new BoardPointsScene(primaryStage, out, socket, in, clientView);\r\n                    boardPointsScene.popupBoardPoints();\r\n                } catch (IOException ex) {\r\n                    throw new RuntimeException(ex);\r\n                }\r\n            } else {\r\n                showAlert(\"Not your turn\", \"It's not your turn yet.\");\r\n            }\r\n        });\r\n\r\n        seeOtherPlayersBoards.setOnMouseClicked(e -> {\r\n            if (isCurrentPlayerTurn) {\r\n                showAlert(\"Action unavailable\", \"This action is currently not implemented.\");\r\n            } else {\r\n                showAlert(\"Not your turn\", \"It's not your turn yet.\");\r\n            }\r\n        });\r\n\r\n        showObjective.setOnMouseClicked(e -> {\r\n            if (isCurrentPlayerTurn) {\r\n                try {\r\n                    objectiveScene = new ShowObjectiveScene(primaryStage, out, socket, in);\r\n                    firstCommonId = controller.firstCommon();\r\n                    secondCommonId = controller.secondCommon();\r\n                    objectiveScene.popupObjectiveScene(firstCommonId, secondCommonId);\r\n\r\n                } catch (IOException ex) {\r\n                    throw new RuntimeException(ex);\r\n                }\r\n            } else {\r\n                showAlert(\"Not your turn\", \"It's not your turn yet.\");\r\n            }\r\n        });\r\n\r\n        quit.setOnMouseClicked(e -> {\r\n            if (isCurrentPlayerTurn) {\r\n                if (haveToDraw) {\r\n                    showAlert(\"Quit\", \"You can't quit right now, draw any card.\");\r\n                } else {\r\n                    String nextPlayerNickname;\r\n                    try {\r\n                        nextPlayerNickname = controller.endTurn();\r\n                    } catch (IOException ex) {\r\n                        throw new RuntimeException(ex);\r\n                    }\r\n                    updateTurnState(nextPlayerNickname.equals(clientView.getUserName()));\r\n                    haveToPlay = true;\r\n                    controller.quit(primaryStage);\r\n                }\r\n            } else {\r\n                controller.quit(primaryStage);\r\n            }\r\n        });\r\n\r\n        enableOrDisableGameActions();\r\n    }\r\n\r\n    private void waitForTurn(ImageView handCard1View, ImageView handCard2View, ImageView handCard3View) {\r\n        new Thread(() -> {\r\n            try {\r\n                controller.waitForTurn(clientView.getUserName());\r\n                Platform.runLater(() -> {\r\n                    updateTurnState(true);\r\n                    try {\r\n                        System.out.println(\"In Gamescenecontroller\");\r\n                        System.out.println(in.readLine()); //Fine turno\r\n                        updateGUI();\r\n                        setupGameActions();\r\n\r\n\r\n                    } catch (IOException e) {\r\n                        e.printStackTrace();\r\n                    }\r\n                });\r\n            } catch (IOException e) {\r\n                e.printStackTrace();\r\n            }\r\n        }).start();\r\n    }\r\n\r\n    private void showAlert(String title, String message) {\r\n        Alert alert = new Alert(Alert.AlertType.INFORMATION);\r\n        alert.setTitle(title);\r\n        alert.setHeaderText(null);\r\n        alert.setContentText(message);\r\n        alert.showAndWait();\r\n    }\r\n\r\n    private void enableOrDisableGameActions() {\r\n        playCard.setDisable(!isCurrentPlayerTurn);\r\n        drawCard.setDisable(!isCurrentPlayerTurn);\r\n        seeYourSpecificSeeds.setDisable(!isCurrentPlayerTurn);\r\n        seeOtherPlayersBoards.setDisable(!isCurrentPlayerTurn);\r\n        seeYourPoints.setDisable(!isCurrentPlayerTurn);\r\n        endTurn.setDisable(!isCurrentPlayerTurn);\r\n        buttonContainer.setDisable(false);\r\n\r\n    }\r\n\r\n    private void updateTurnState(boolean isCurrentPlayerTurn) {\r\n        this.isCurrentPlayerTurn = isCurrentPlayerTurn;\r\n        enableOrDisableGameActions();\r\n    }\r\n\r\n    private Image flipToBackCard(String stringId) {\r\n        int id = Integer.parseInt(stringId);\r\n        if (id >= 1 && id <= 40) {\r\n            pathFlipped = \"/ImmaginiCodex/CarteBack/Resource/\" + id + \".png\";\r\n            return new Image(Objects.requireNonNull(getClass().getResourceAsStream(pathFlipped)));\r\n        } else if (id > 40 && id <= 80) {\r\n            pathFlipped = \"/ImmaginiCodex/CarteBack/Gold/\" + id + \".png\";\r\n            return new Image(Objects.requireNonNull(getClass().getResourceAsStream(pathFlipped)));\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private Image flipCardToFront(String stringId) {\r\n        int id = Integer.parseInt(stringId);\r\n        if (id >= 1 && id <= 40) {\r\n            pathFlipped = \"/ImmaginiCodex/CarteFront/Resource/\" + id + \".png\";\r\n            return new Image(Objects.requireNonNull(getClass().getResourceAsStream(pathFlipped)));\r\n        } else if (id > 40 && id <= 80) {\r\n             pathFlipped = \"/ImmaginiCodex/CarteFront/Gold/\" + id + \".png\";\r\n            return new Image(Objects.requireNonNull(getClass().getResourceAsStream(pathFlipped)));\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public GridPane subnettingEachImage(Image image, String cardId) {\r\n        double width = image.getWidth() / 3;\r\n        double height = image.getHeight() / 3;\r\n        int heightInt = (int) height;\r\n        int widthInt = (int) width;\r\n        Image imageTL = new WritableImage(image.getPixelReader(), 0, 0, widthInt, heightInt);\r\n        Image imageTC = new WritableImage(image.getPixelReader(), widthInt, 0, widthInt, heightInt);\r\n        Image imageTR = new WritableImage(image.getPixelReader(), 2 * widthInt, 0, widthInt, heightInt);\r\n        Image imageLC = new WritableImage(image.getPixelReader(), 0, heightInt, widthInt, heightInt);\r\n        Image imageCC = new WritableImage(image.getPixelReader(), widthInt, heightInt, widthInt, heightInt);\r\n        Image imageRC = new WritableImage(image.getPixelReader(), 2 * widthInt, heightInt, widthInt, heightInt);\r\n        Image imageBL = new WritableImage(image.getPixelReader(), 0, 2 * heightInt, widthInt, heightInt);\r\n        Image imageBC = new WritableImage(image.getPixelReader(), widthInt, 2 * heightInt, widthInt, heightInt);\r\n        Image imageBR = new WritableImage(image.getPixelReader(), 2 * widthInt, 2 * heightInt, widthInt, heightInt);\r\n\r\n        ImageView imageViewTL = new ImageView(imageTL);\r\n        ImageView imageViewTC = new ImageView(imageTC);\r\n        ImageView imageViewTR = new ImageView(imageTR);\r\n        ImageView imageViewLC = new ImageView(imageLC);\r\n        ImageView imageViewCC = new ImageView(imageCC);\r\n        ImageView imageViewRC = new ImageView(imageRC);\r\n        ImageView imageViewBL = new ImageView(imageBL);\r\n        ImageView imageViewBC = new ImageView(imageBC);\r\n        ImageView imageViewBR = new ImageView(imageBR);\r\n\r\n        imageViewTL.setFitWidth(50);\r\n        imageViewTL.setPreserveRatio(true);\r\n        imageViewTC.setFitWidth(50);\r\n        imageViewTC.setPreserveRatio(true);\r\n        imageViewTR.setFitWidth(50);\r\n        imageViewTR.setPreserveRatio(true);\r\n        imageViewLC.setFitWidth(50);\r\n        imageViewLC.setPreserveRatio(true);\r\n        imageViewCC.setFitWidth(50);\r\n        imageViewCC.setPreserveRatio(true);\r\n        imageViewRC.setFitWidth(50);\r\n        imageViewRC.setPreserveRatio(true);\r\n        imageViewBL.setFitWidth(50);\r\n        imageViewBL.setPreserveRatio(true);\r\n        imageViewBC.setFitWidth(50);\r\n        imageViewBC.setPreserveRatio(true);\r\n        imageViewBR.setFitWidth(50);\r\n        imageViewBR.setPreserveRatio(true);\r\n\r\n        CardView tlCardView = new CardView(imageViewTL, cardId, \"TL\");\r\n        CardView tcCardView = new CardView(imageViewTC, cardId, \"TC\");\r\n        CardView trCardView = new CardView(imageViewTR, cardId, \"TR\");\r\n        CardView lcCardView = new CardView(imageViewLC, cardId, \"LC\");\r\n        CardView ccCardView = new CardView(imageViewCC, cardId, \"CC\");\r\n        CardView rcCardView = new CardView(imageViewRC, cardId, \"RC\");\r\n        CardView blCardView = new CardView(imageViewBL, cardId, \"BL\");\r\n        CardView bcCardView = new CardView(imageViewBC, cardId, \"BC\");\r\n        CardView brCardView = new CardView(imageViewBR, cardId, \"BR\");\r\n\r\n        allCardViews.add(tlCardView);\r\n        allCardViews.add(tcCardView);\r\n        allCardViews.add(trCardView);\r\n        allCardViews.add(lcCardView);\r\n        allCardViews.add(ccCardView);\r\n        allCardViews.add(rcCardView);\r\n        allCardViews.add(blCardView);\r\n        allCardViews.add(bcCardView);\r\n        allCardViews.add(brCardView);\r\n\r\n        imageViewTL.setOnMouseClicked(event -> handleCardClick(tlCardView));\r\n        imageViewTR.setOnMouseClicked(event -> handleCardClick(trCardView));\r\n        imageViewBL.setOnMouseClicked(event -> handleCardClick(blCardView));\r\n        imageViewBR.setOnMouseClicked(event -> handleCardClick(brCardView));\r\n\r\n        GridPane gridPane = new GridPane();\r\n        gridPane.setPadding(new Insets(0));\r\n        gridPane.setHgap(0);\r\n        gridPane.setVgap(0);\r\n\r\n        ColumnConstraints col1 = new ColumnConstraints();\r\n        col1.setPrefWidth(100); // Imposta la larghezza preferita della prima colonna\r\n        ColumnConstraints col2 = new ColumnConstraints();\r\n        col2.setPrefWidth(150); // Imposta la larghezza preferita della seconda colonna\r\n        ColumnConstraints col3 = new ColumnConstraints();\r\n        col3.setPrefWidth(200); // Imposta la larghezza preferita della terza colonna\r\n\r\n        // Aggiungere i constraints delle colonne alla GridPane\r\n        gridPane.getColumnConstraints().addAll(col1, col2, col3);\r\n\r\n        // Definire le dimensioni delle righe\r\n        RowConstraints row1 = new RowConstraints();\r\n        row1.setPrefHeight(100); // Imposta l'altezza preferita della prima riga\r\n        RowConstraints row2 = new RowConstraints();\r\n        row2.setPrefHeight(150); // Imposta l'altezza preferita della seconda riga\r\n        RowConstraints row3 = new RowConstraints();\r\n        row3.setPrefHeight(200); // Imposta l'altezza preferita della terza riga\r\n\r\n        // Aggiungere i constraints delle righe alla GridPane\r\n        gridPane.getRowConstraints().addAll(row1, row2, row3);\r\n\r\n\r\n\r\n        gridPane.add(imageViewTL, 0, 0);\r\n        gridPane.add(imageViewTC, 1, 0);\r\n        gridPane.add(imageViewTR, 2, 0);\r\n        gridPane.add(imageViewLC, 0,1);\r\n        gridPane.add(imageViewCC, 1,1);\r\n        gridPane.add(imageViewRC, 2, 1);\r\n        gridPane.add(imageViewBL, 0, 2);\r\n        gridPane.add(imageViewBC, 1, 2);\r\n        gridPane.add(imageViewBR, 2, 2);\r\n\r\n        return gridPane;\r\n    }\r\n\r\n    public void placingBottomRightCard(ImageView cardOnTheBoard, GridPane board, int id) {\r\n        int lastIndex=nextCardIndex;\r\n        nextCardIndex++;\r\n        Image newImage = new Image(Objects.requireNonNull(getClass().getResourceAsStream(pathChosen)));\r\n        System.out.println(pathChosen);\r\n        int x = getX(cardOnTheBoard);\r\n        int y = getY(cardOnTheBoard);\r\n        GridPane gridPanePlacingOn = subnettingEachImage(newImage, String.valueOf(id));\r\n\r\n        ImageView TL = (ImageView) gridPanePlacingOn.getChildren().get(0);\r\n        ImageView TC = (ImageView) gridPanePlacingOn.getChildren().get(1);\r\n        ImageView TR = (ImageView) gridPanePlacingOn.getChildren().get(2);\r\n        ImageView LC = (ImageView) gridPanePlacingOn.getChildren().get(3);\r\n        ImageView CC = (ImageView) gridPanePlacingOn.getChildren().get(4);\r\n        ImageView RC = (ImageView) gridPanePlacingOn.getChildren().get(5);\r\n        ImageView BL = (ImageView) gridPanePlacingOn.getChildren().get(6);\r\n        ImageView BC = (ImageView) gridPanePlacingOn.getChildren().get(7);\r\n        ImageView BR = (ImageView) gridPanePlacingOn.getChildren().get(8);\r\n\r\n        TL.setPickOnBounds(true);\r\n        TR.setPickOnBounds(true);\r\n        BL.setPickOnBounds(true);\r\n        BR.setPickOnBounds(true);\r\n\r\n        board.add(TL, y, x);\r\n        board.add(TC, (y + 1), x);\r\n        board.add(TR, (y + 2), x);\r\n\r\n        board.add(LC, y, (x + 1));\r\n        board.add(CC, (y + 1), (x + 1));\r\n        board.add(RC, (y + 2), (x + 1));\r\n\r\n        board.add(BL, y, (x + 2));\r\n        board.add(BC, (y + 1), (x + 2));\r\n        board.add(BR, (y + 2), (x + 2));\r\n\r\n        allCardViews.add(new CardView(TL, String.valueOf(id), \"TL\"));\r\n        allCardViews.add(new CardView(TC, String.valueOf(id), \"TC\"));\r\n        allCardViews.add(new CardView(TR, String.valueOf(id), \"TR\"));\r\n        allCardViews.add(new CardView(LC, String.valueOf(id), \"LC\"));\r\n        allCardViews.add(new CardView(CC, String.valueOf(id), \"CC\"));\r\n        allCardViews.add(new CardView(RC, String.valueOf(id), \"RC\"));\r\n        allCardViews.add(new CardView(BL, String.valueOf(id), \"BL\"));\r\n        allCardViews.add(new CardView(BC, String.valueOf(id), \"BC\"));\r\n        allCardViews.add(new CardView(BR, String.valueOf(id), \"BR\"));\r\n\r\n        cardIndices.put(new CardView(TL, String.valueOf(id), \"TL\"), nextCardIndex);\r\n        cardIndices.put(new CardView(TC, String.valueOf(id), \"TC\"), nextCardIndex);\r\n        cardIndices.put(new CardView(TR, String.valueOf(id), \"TR\"), nextCardIndex);\r\n        cardIndices.put(new CardView(LC, String.valueOf(id), \"LC\"), nextCardIndex);\r\n        cardIndices.put(new CardView(CC, String.valueOf(id), \"CC\"), nextCardIndex);\r\n        cardIndices.put(new CardView(RC, String.valueOf(id), \"RC\"), nextCardIndex);\r\n        cardIndices.put(new CardView(BL, String.valueOf(id), \"BL\"), nextCardIndex);\r\n        cardIndices.put(new CardView(BC, String.valueOf(id), \"BC\"), nextCardIndex);\r\n        cardIndices.put(new CardView(BR, String.valueOf(id), \"BR\"), nextCardIndex);\r\n        TL.setDisable(true);\r\n        for (CardView cardView : allCardViews) {\r\n            if (cardIndices.get(cardView) == lastIndex && cardView.getPosition().equals(\"BR\")) {\r\n                cardView.getImageView().setDisable(true);\r\n                break;\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    public void placingBottomLeftCard(ImageView cardOnTheBoard, GridPane board, int id) {\r\n        int lastIndex=nextCardIndex;\r\n        nextCardIndex++;\r\n        Image newImage = new Image(Objects.requireNonNull(getClass().getResourceAsStream(pathChosen)));\r\n        int x = getX(cardOnTheBoard);\r\n        int y = getY(cardOnTheBoard);\r\n        GridPane gridPanePlacingOn = subnettingEachImage(newImage, String.valueOf(id));\r\n\r\n        ImageView TL = (ImageView) gridPanePlacingOn.getChildren().get(0);\r\n        ImageView TC = (ImageView) gridPanePlacingOn.getChildren().get(1);\r\n        ImageView TR = (ImageView) gridPanePlacingOn.getChildren().get(2);\r\n        ImageView LC = (ImageView) gridPanePlacingOn.getChildren().get(3);\r\n        ImageView CC = (ImageView) gridPanePlacingOn.getChildren().get(4);\r\n        ImageView RC = (ImageView) gridPanePlacingOn.getChildren().get(5);\r\n        ImageView BL = (ImageView) gridPanePlacingOn.getChildren().get(6);\r\n        ImageView BC = (ImageView) gridPanePlacingOn.getChildren().get(7);\r\n        ImageView BR = (ImageView) gridPanePlacingOn.getChildren().get(8);\r\n\r\n        TL.setPickOnBounds(true);\r\n        TR.setPickOnBounds(true);\r\n        BL.setPickOnBounds(true);\r\n        BR.setPickOnBounds(true);\r\n\r\n        board.add(TL, (y - 2), x);\r\n        board.add(TC, (y - 1), x);\r\n        board.add(TR, y, x);\r\n\r\n        board.add(LC, (y - 2), (x + 1));\r\n        board.add(CC, (y - 1), (x + 1));\r\n        board.add(RC, y, (x + 1));\r\n\r\n        board.add(BL, (y - 2), (x + 2));\r\n        board.add(BC, (y - 1), (x + 2));\r\n        board.add(BR, y, (x + 2));\r\n\r\n        allCardViews.add(new CardView(TL, String.valueOf(id), \"TL\"));\r\n        allCardViews.add(new CardView(TC, String.valueOf(id), \"TC\"));\r\n        allCardViews.add(new CardView(TR, String.valueOf(id), \"TR\"));\r\n        allCardViews.add(new CardView(LC, String.valueOf(id), \"LC\"));\r\n        allCardViews.add(new CardView(CC, String.valueOf(id), \"CC\"));\r\n        allCardViews.add(new CardView(RC, String.valueOf(id), \"RC\"));\r\n        allCardViews.add(new CardView(BL, String.valueOf(id), \"BL\"));\r\n        allCardViews.add(new CardView(BC, String.valueOf(id), \"BC\"));\r\n        allCardViews.add(new CardView(BR, String.valueOf(id), \"BR\"));\r\n\r\n        cardIndices.put(new CardView(TL, String.valueOf(id), \"TL\"), nextCardIndex);\r\n        cardIndices.put(new CardView(TC, String.valueOf(id), \"TC\"), nextCardIndex);\r\n        cardIndices.put(new CardView(TR, String.valueOf(id), \"TR\"), nextCardIndex);\r\n        cardIndices.put(new CardView(LC, String.valueOf(id), \"LC\"), nextCardIndex);\r\n        cardIndices.put(new CardView(CC, String.valueOf(id), \"CC\"), nextCardIndex);\r\n        cardIndices.put(new CardView(RC, String.valueOf(id), \"RC\"), nextCardIndex);\r\n        cardIndices.put(new CardView(BL, String.valueOf(id), \"BL\"), nextCardIndex);\r\n        cardIndices.put(new CardView(BC, String.valueOf(id), \"BC\"), nextCardIndex);\r\n        cardIndices.put(new CardView(BR, String.valueOf(id), \"BR\"), nextCardIndex);\r\n        TR.setDisable(true);\r\n        for (CardView cardView : allCardViews) {\r\n            if (cardIndices.get(cardView) == lastIndex && cardView.getPosition().equals(\"BL\")) {\r\n                cardView.getImageView().setDisable(true);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    public void placingTopLeftCard(ImageView cardOnTheBoard, GridPane board, int id) {\r\n        int lastIndex=nextCardIndex;\r\n        nextCardIndex++;\r\n        Image newImage = new Image(Objects.requireNonNull(getClass().getResourceAsStream(pathChosen)));\r\n        int x = getX(cardOnTheBoard);\r\n        int y = getY(cardOnTheBoard);\r\n        GridPane gridPanePlacingOn = subnettingEachImage(newImage, String.valueOf(id));\r\n\r\n        ImageView TL = (ImageView) gridPanePlacingOn.getChildren().get(0);\r\n        ImageView TC = (ImageView) gridPanePlacingOn.getChildren().get(1);\r\n        ImageView TR = (ImageView) gridPanePlacingOn.getChildren().get(2);\r\n        ImageView LC = (ImageView) gridPanePlacingOn.getChildren().get(3);\r\n        ImageView CC = (ImageView) gridPanePlacingOn.getChildren().get(4);\r\n        ImageView RC = (ImageView) gridPanePlacingOn.getChildren().get(5);\r\n        ImageView BL = (ImageView) gridPanePlacingOn.getChildren().get(6);\r\n        ImageView BC = (ImageView) gridPanePlacingOn.getChildren().get(7);\r\n        ImageView BR = (ImageView) gridPanePlacingOn.getChildren().get(8);\r\n\r\n        TL.setPickOnBounds(true);\r\n        TR.setPickOnBounds(true);\r\n        BL.setPickOnBounds(true);\r\n        BR.setPickOnBounds(true);\r\n\r\n        board.add(TL, (y - 2), (x - 2));\r\n        board.add(TC, (y - 1), (x - 2));\r\n        board.add(TR, y, (x - 2));\r\n\r\n        board.add(LC, (y - 2), (x - 1));\r\n        board.add(CC, (y - 1), (x - 1));\r\n        board.add(RC, y, (x - 1));\r\n\r\n        board.add(BL, (y - 2), x);\r\n        board.add(BC, (y - 1), x);\r\n        board.add(BR, y, x);\r\n\r\n        allCardViews.add(new CardView(TL, String.valueOf(id), \"TL\"));\r\n        allCardViews.add(new CardView(TC, String.valueOf(id), \"TC\"));\r\n        allCardViews.add(new CardView(TR, String.valueOf(id), \"TR\"));\r\n        allCardViews.add(new CardView(LC, String.valueOf(id), \"LC\"));\r\n        allCardViews.add(new CardView(CC, String.valueOf(id), \"CC\"));\r\n        allCardViews.add(new CardView(RC, String.valueOf(id), \"RC\"));\r\n        allCardViews.add(new CardView(BL, String.valueOf(id), \"BL\"));\r\n        allCardViews.add(new CardView(BC, String.valueOf(id), \"BC\"));\r\n        allCardViews.add(new CardView(BR, String.valueOf(id), \"BR\"));\r\n\r\n        cardIndices.put(new CardView(TL, String.valueOf(id), \"TL\"), nextCardIndex);\r\n        cardIndices.put(new CardView(TC, String.valueOf(id), \"TC\"), nextCardIndex);\r\n        cardIndices.put(new CardView(TR, String.valueOf(id), \"TR\"), nextCardIndex);\r\n        cardIndices.put(new CardView(LC, String.valueOf(id), \"LC\"), nextCardIndex);\r\n        cardIndices.put(new CardView(CC, String.valueOf(id), \"CC\"), nextCardIndex);\r\n        cardIndices.put(new CardView(RC, String.valueOf(id), \"RC\"), nextCardIndex);\r\n        cardIndices.put(new CardView(BL, String.valueOf(id), \"BL\"), nextCardIndex);\r\n        cardIndices.put(new CardView(BC, String.valueOf(id), \"BC\"), nextCardIndex);\r\n        cardIndices.put(new CardView(BR, String.valueOf(id), \"BR\"), nextCardIndex);\r\n        BR.setDisable(true);\r\n        for (CardView cardView : allCardViews) {\r\n            if (cardIndices.get(cardView) == lastIndex && cardView.getPosition().equals(\"TL\")) {\r\n                cardView.getImageView().setDisable(true);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    public void placingTopRightCard(ImageView cardOnTheBoard, GridPane board, int id) {\r\n        int lastIndex=nextCardIndex;\r\n        nextCardIndex++;\r\n        Image newImage = new Image(Objects.requireNonNull(getClass().getResourceAsStream(pathChosen)));\r\n        int x = getX(cardOnTheBoard);\r\n        int y = getY(cardOnTheBoard);\r\n        GridPane gridPanePlacingOn = subnettingEachImage(newImage, String.valueOf(id));\r\n        ImageView TL = (ImageView) gridPanePlacingOn.getChildren().get(0);\r\n        ImageView TC = (ImageView) gridPanePlacingOn.getChildren().get(1);\r\n        ImageView TR = (ImageView) gridPanePlacingOn.getChildren().get(2);\r\n        ImageView LC = (ImageView) gridPanePlacingOn.getChildren().get(3);\r\n        ImageView CC = (ImageView) gridPanePlacingOn.getChildren().get(4);\r\n        ImageView RC = (ImageView) gridPanePlacingOn.getChildren().get(5);\r\n        ImageView BL = (ImageView) gridPanePlacingOn.getChildren().get(6);\r\n        ImageView BC = (ImageView) gridPanePlacingOn.getChildren().get(7);\r\n        ImageView BR = (ImageView) gridPanePlacingOn.getChildren().get(8);\r\n\r\n        TL.setPickOnBounds(true);\r\n        TR.setPickOnBounds(true);\r\n        BL.setPickOnBounds(true);\r\n        BR.setPickOnBounds(true);\r\n\r\n        board.add(TL, y, (x - 2));\r\n        board.add(TC, (y + 1), (x - 2));\r\n        board.add(TR, (y + 2), (x - 2));\r\n\r\n        board.add(LC, y, (x - 1));\r\n        board.add(CC, (y + 1), (x - 1));\r\n        board.add(RC, (y + 2), (x - 1));\r\n\r\n        board.add(BL, y, x);\r\n        board.add(BC, (y + 1), x);\r\n        board.add(BR, (y + 2), x);\r\n\r\n        allCardViews.add(new CardView(TL, String.valueOf(id), \"TL\"));\r\n        allCardViews.add(new CardView(TC, String.valueOf(id), \"TC\"));\r\n        allCardViews.add(new CardView(TR, String.valueOf(id), \"TR\"));\r\n        allCardViews.add(new CardView(LC, String.valueOf(id), \"LC\"));\r\n        allCardViews.add(new CardView(CC, String.valueOf(id), \"CC\"));\r\n        allCardViews.add(new CardView(RC, String.valueOf(id), \"RC\"));\r\n        allCardViews.add(new CardView(BL, String.valueOf(id), \"BL\"));\r\n        allCardViews.add(new CardView(BC, String.valueOf(id), \"BC\"));\r\n        allCardViews.add(new CardView(BR, String.valueOf(id), \"BR\"));\r\n\r\n        cardIndices.put(new CardView(TL, String.valueOf(id), \"TL\"), nextCardIndex);\r\n        cardIndices.put(new CardView(TC, String.valueOf(id), \"TC\"), nextCardIndex);\r\n        cardIndices.put(new CardView(TR, String.valueOf(id), \"TR\"), nextCardIndex);\r\n        cardIndices.put(new CardView(LC, String.valueOf(id), \"LC\"), nextCardIndex);\r\n        cardIndices.put(new CardView(CC, String.valueOf(id), \"CC\"), nextCardIndex);\r\n        cardIndices.put(new CardView(RC, String.valueOf(id), \"RC\"), nextCardIndex);\r\n        cardIndices.put(new CardView(BL, String.valueOf(id), \"BL\"), nextCardIndex);\r\n        cardIndices.put(new CardView(BC, String.valueOf(id), \"BC\"), nextCardIndex);\r\n        cardIndices.put(new CardView(BR, String.valueOf(id), \"BR\"), nextCardIndex);\r\n        BL.setDisable(true);\r\n        for (CardView cardView : allCardViews) {\r\n            if (cardIndices.get(cardView) == lastIndex && cardView.getPosition().equals(\"TR\")) {\r\n                cardView.getImageView().setDisable(true);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    public CardView getClickedImageView() {\r\n        return clickedCardView;\r\n    }\r\n\r\n    private synchronized void firstWellCard() throws IOException {\r\n        out.println(\"firstWellId\");\r\n        SharedObjectsInGui.setIdCard1(in.readLine());\r\n    }\r\n\r\n    private synchronized void secondWellCard() throws IOException {\r\n        out.println(\"secondWellId\");\r\n        SharedObjectsInGui.setIdCard2(in.readLine());\r\n    }\r\n\r\n    private synchronized void thirdWellCard() throws IOException {\r\n        out.println(\"thirdWellId\");\r\n        SharedObjectsInGui.setIdCard3(in.readLine());\r\n    }\r\n\r\n    private synchronized void fourthWellCard() throws IOException {\r\n        out.println(\"fourthWellId\");\r\n        SharedObjectsInGui.setIdCard4(in.readLine());\r\n    }\r\n\r\n    private synchronized void updatingResourceAndGoldDeck() throws IOException {\r\n        out.println(\"firstCardResourceGui\");\r\n        SharedObjectsInGui.setPathResourceDeck(in.readLine());\r\n        out.println(\"firstCardGoldGui\");\r\n        SharedObjectsInGui.setPathGoldDeck(in.readLine());\r\n    }\r\n\r\n    private void checkTypeWellCards() {\r\n        SharedObjectsInGui.setWellPathOne(createPathForFrontCards(SharedObjectsInGui.getIdCard1()));\r\n        SharedObjectsInGui.setWellPathSecond(createPathForFrontCards(SharedObjectsInGui.getIdCard2()));\r\n        SharedObjectsInGui.setWellPathThird(createPathForFrontCards(SharedObjectsInGui.getIdCard3()));\r\n        SharedObjectsInGui.setWellPathForth(createPathForFrontCards(SharedObjectsInGui.getIdCard4()));\r\n    }\r\n\r\n    private synchronized void playerDeck() throws IOException {\r\n        out.println(\"deckId\");\r\n        idHandCard1 = in.readLine();\r\n        System.out.println(\"first card of deck:\" + idHandCard1);\r\n        idHandCard2 = in.readLine();\r\n        System.out.println(\"Second card of deck:\" + idHandCard2);\r\n        idHandCard3 = in.readLine();\r\n        System.out.println(\"Third card of deck:\" + idHandCard3);\r\n    }\r\n\r\n    private synchronized void checkTypePlayerDeck() throws IOException {\r\n        typeHandCard1 = checkType(idHandCard1);\r\n        typeHandCard2 = checkType(idHandCard2);\r\n        typeHandCard3 = checkType(idHandCard3);\r\n        in.readLine();\r\n    }\r\n\r\n    private String checkType(String id) {\r\n        int intId = Integer.parseInt(id);\r\n        return intId > 0 && intId <= 40 ? \"Resource\" : \"Gold\";\r\n    }\r\n\r\n    private void creatingPathForGameMethod() {\r\n        SharedObjectsInGui.setPathResourceDeck(createPathForBackCards(SharedObjectsInGui.getPathResourceDeck()));\r\n        SharedObjectsInGui.setPathGoldDeck(createPathForBackCards(SharedObjectsInGui.getPathGoldDeck()));\r\n    }\r\n\r\n    private Image createNewPathForImages(String path) {\r\n        try {\r\n            return new Image(Objects.requireNonNull(getClass().getResourceAsStream(path)));\r\n        } catch (NullPointerException e) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    private void setWidthAndHeight(ImageView imageView) {\r\n        imageView.setFitWidth(widthWellCards);\r\n        imageView.setFitHeight(heightWellCards);\r\n    }\r\n\r\n    private void creatingDeckAndGoldDeckView() {\r\n        SharedObjectsInGui.setTopCardResourceDeckView(new ImageView(SharedObjectsInGui.getTopCardResourceDeck()));\r\n        SharedObjectsInGui.setTopCardGoldDeckView(new ImageView(SharedObjectsInGui.getTopCardGoldDeck()));\r\n        setWidthAndHeight(SharedObjectsInGui.getTopCardResourceDeckView());\r\n        setWidthAndHeight(SharedObjectsInGui.getTopCardGoldDeckView());\r\n    }\r\n\r\n    private void settingDecksOnMouseClickedEvent() {\r\n        SharedObjectsInGui.getTopCardResourceDeckView().setOnMouseClicked(e -> {\r\n            if (isCurrentPlayerTurn) {\r\n                chosenDeckForDrawingNewCard = \"resource\";\r\n                wellOrDeck = \"deck\";\r\n            } else {\r\n                showAlert(\"Not your turn\", \"It's not your turn yet.\");\r\n            }\r\n        });\r\n        SharedObjectsInGui.getTopCardGoldDeckView().setOnMouseClicked(e -> {\r\n            if (isCurrentPlayerTurn) {\r\n                chosenDeckForDrawingNewCard = \"gold\";\r\n                wellOrDeck = \"deck\";\r\n            } else {\r\n                showAlert(\"Not your turn\", \"It's not your turn yet.\");\r\n            }\r\n        });\r\n    }\r\n\r\n    private void creatingImagesForTheWell() {\r\n        SharedObjectsInGui.setWellCard1(createNewPathForImages(SharedObjectsInGui.getWellPathOne()));\r\n        SharedObjectsInGui.setWellCard2(createNewPathForImages(SharedObjectsInGui.getWellPathSecond()));\r\n        SharedObjectsInGui.setWellCard3(createNewPathForImages(SharedObjectsInGui.getWellPathThird()));\r\n        SharedObjectsInGui.setWellCard4(createNewPathForImages(SharedObjectsInGui.getWellPathForth()));\r\n    }\r\n\r\n    private void creatingImagesViewForTheWell() {\r\n        ImageView wellCard1View = new ImageView(SharedObjectsInGui.getWellCard1());\r\n        ImageView wellCard2View = new ImageView(SharedObjectsInGui.getWellCard2());\r\n        ImageView wellCard3View = new ImageView(SharedObjectsInGui.getWellCard3());\r\n        ImageView wellCard4View = new ImageView(SharedObjectsInGui.getWellCard4());\r\n        setWidthAndHeight(wellCard1View);\r\n        setWidthAndHeight(wellCard2View);\r\n        setWidthAndHeight(wellCard3View);\r\n        setWidthAndHeight(wellCard4View);\r\n        SharedObjectsInGui.setWellCard1View(wellCard1View);\r\n        SharedObjectsInGui.setWellCard2View(wellCard2View);\r\n        SharedObjectsInGui.setWellCard3View(wellCard3View);\r\n        SharedObjectsInGui.setWellCard4View(wellCard4View);\r\n    }\r\n\r\n\r\n    private void settingWellOnMouseClickedEvent() {\r\n        SharedObjectsInGui.getWellCard1View().setOnMouseClicked(event -> {\r\n            if (isCurrentPlayerTurn) {\r\n                wellOrDeck = \"well\";\r\n                wellCardSelected = SharedObjectsInGui.getWellCard1();\r\n                idWellCardSelected = SharedObjectsInGui.getIdCard1();\r\n                indexCardFromWellSelected = 0;\r\n            } else {\r\n                showAlert(\"Not your turn\", \"It's not your turn yet.\");\r\n            }\r\n        });\r\n        SharedObjectsInGui.getWellCard2View().setOnMouseClicked(event -> {\r\n            if (isCurrentPlayerTurn) {\r\n                wellOrDeck = \"well\";\r\n                wellCardSelected = SharedObjectsInGui.getWellCard2();\r\n                idWellCardSelected = SharedObjectsInGui.getIdCard2();\r\n                indexCardFromWellSelected = 1;\r\n            } else {\r\n                showAlert(\"Not your turn\", \"It's not your turn yet.\");\r\n            }\r\n        });\r\n        SharedObjectsInGui.getWellCard3View().setOnMouseClicked(event -> {\r\n            if (isCurrentPlayerTurn) {\r\n                wellOrDeck = \"well\";\r\n                wellCardSelected = SharedObjectsInGui.getWellCard3();\r\n                idWellCardSelected = SharedObjectsInGui.getIdCard3();\r\n                indexCardFromWellSelected = 2;\r\n            } else {\r\n                showAlert(\"Not your turn\", \"It's not your turn yet.\");\r\n            }\r\n        });\r\n        SharedObjectsInGui.getWellCard4View().setOnMouseClicked(event -> {\r\n            if (isCurrentPlayerTurn) {\r\n                wellOrDeck = \"well\";\r\n                wellCardSelected = SharedObjectsInGui.getWellCard4();\r\n                idWellCardSelected = SharedObjectsInGui.getIdCard4();\r\n                indexCardFromWellSelected = 3;\r\n            } else {\r\n                showAlert(\"Not your turn\", \"It's not your turn yet.\");\r\n            }\r\n        });\r\n    }\r\n\r\n    private String createPathForBackCards(String cardId) {\r\n        return Integer.parseInt(cardId) < 41 ? pathForResourceCardsBack(cardId) : pathForGoldCardBack(cardId);\r\n    }\r\n\r\n    private String createPathForFrontCards(String cardId) {\r\n        return Integer.parseInt(cardId) < 41 ? pathForResourceCardFront(cardId) : pathForGoldCardFront(cardId);\r\n    }\r\n\r\n    private String pathForResourceCardFront(String cardId) {\r\n        return \"/ImmaginiCodex/CarteFront/Resource/\" + cardId + \".png\";\r\n    }\r\n\r\n    private String pathForGoldCardFront(String cardId) {\r\n        return \"/ImmaginiCodex/CarteFront/Gold/\" + cardId + \".png\";\r\n    }\r\n\r\n    private String pathForResourceCardsBack(String cardId) {\r\n        return \"/ImmaginiCodex/CarteBack/Resource/\" + cardId + \".png\";\r\n    }\r\n\r\n    private String pathForGoldCardBack(String cardId) {\r\n        return \"/ImmaginiCodex/CarteBack/Gold/\" + cardId + \".png\";\r\n    }\r\n\r\n    private void creatingWell() {\r\n        SharedObjectsInGui.setWellPathOne(createPathForFrontCards(SharedObjectsInGui.getIdCard1()));\r\n        SharedObjectsInGui.setWellPathSecond(createPathForFrontCards(SharedObjectsInGui.getIdCard2()));\r\n        SharedObjectsInGui.setWellPathThird(createPathForFrontCards(SharedObjectsInGui.getIdCard3()));\r\n        SharedObjectsInGui.setWellPathForth(createPathForFrontCards(SharedObjectsInGui.getIdCard4()));\r\n\r\n    }\r\n\r\n    private synchronized void initializeWell() throws IOException {\r\n        firstWellCard();\r\n        secondWellCard();\r\n        thirdWellCard();\r\n        fourthWellCard();\r\n        checkTypeWellCards();\r\n    }\r\n\r\n    private void updateResourceDeckTopCard() throws IOException {\r\n        out.println(\"firstCardResourceGui\");\r\n        String newTopCardResourceDeckId = in.readLine();\r\n        idTopCardResourceDeck=newTopCardResourceDeckId;\r\n        System.out.println(newTopCardResourceDeckId);\r\n        String newPathResource = \"/ImmaginiCodex/CarteBack/Resource/\" + newTopCardResourceDeckId + \".png\";\r\n        System.out.println(newPathResource);\r\n        Image newTopCardResourceDeckImage = new Image(Objects.requireNonNull(getClass().getResourceAsStream(newPathResource)));\r\n        SharedObjectsInGui.getTopCardResourceDeckView().setImage(newTopCardResourceDeckImage);\r\n        SharedObjectsInGui.setPathResourceDeck(newPathResource);\r\n        SharedObjectsInGui.setTopCardResourceDeck(newTopCardResourceDeckImage);\r\n    }\r\n\r\n    private void updatedGoldDeckTopCard() throws IOException {\r\n        out.println(\"firstCardGoldGui\");\r\n        String newTopCardGoldDeckId = in.readLine();\r\n        idTopCardGoldDeck=newTopCardGoldDeckId;\r\n        System.out.println(newTopCardGoldDeckId);\r\n        String newPathGold = \"/ImmaginiCodex/CarteBack/Gold/\" + newTopCardGoldDeckId + \".png\";\r\n        Image newTopCardGoldImage = new Image(Objects.requireNonNull(getClass().getResourceAsStream(newPathGold)));\r\n        SharedObjectsInGui.getTopCardGoldDeckView().setImage(newTopCardGoldImage);\r\n        SharedObjectsInGui.setPathGoldDeck(newPathGold);\r\n        SharedObjectsInGui.setTopCardGoldDeck(newTopCardGoldImage);\r\n    }\r\n\r\n\r\n    public int getX(ImageView img) {\r\n        return GridPane.getRowIndex(img);\r\n    }\r\n\r\n    public int getY(ImageView img) {\r\n        return GridPane.getColumnIndex(img);\r\n    }\r\n\r\n    private void creatingButtons() {\r\n        buttonContainer.add(playCard, 0, 0);\r\n        buttonContainer.add(drawCard, 1, 0);\r\n        buttonContainer.add(flipCardToFront, 0, 1);\r\n        buttonContainer.add(flipCardToBack, 1, 1);\r\n        buttonContainer.add(seeYourPoints, 0, 2);\r\n        buttonContainer.add(seeYourSpecificSeeds, 1, 2);\r\n        buttonContainer.add(showObjective, 0, 3);\r\n        buttonContainer.add(endTurn, 1, 3);\r\n        buttonContainer.add(quit, 0, 4);\r\n        double buttonsWidth = 120.00;\r\n        for (var node : buttonContainer.getChildren()) {\r\n            if (node instanceof Button) {\r\n                node.setStyle(\"-fx-background-color: #333333; -fx-text-fill: white; -fx-font-weight: bold;\");\r\n                ((Button) node).setPrefWidth(buttonsWidth);\r\n            }\r\n        }\r\n    }\r\n\r\n    public void setClickedCardView(CardView cardView) {\r\n        GameSceneController.clickedCardView = cardView;\r\n    }\r\n\r\n\r\n    private void updateGUI() throws IOException {\r\n        load();\r\n        System.out.println(SharedObjectsInGui.getIdCard1());\r\n        System.out.println(SharedObjectsInGui.getIdCard2());\r\n        System.out.println(SharedObjectsInGui.getIdCard3());\r\n        System.out.println(SharedObjectsInGui.getIdCard4());\r\n        System.out.println(\"Carta 1 del deck\" + idHandCard1);\r\n        System.out.println(\"Carta 2 del deck\" + idHandCard2);\r\n        System.out.println(\"Carta 3 del deck\" + idHandCard3);\r\n        newPathAfterUpdate();\r\n        updateResourceDeckTopCard();\r\n        updatedGoldDeckTopCard();\r\n        haveToDraw = true;\r\n        handCard1View.setId(\"Front\");\r\n        handCard2View.setId(\"Front\");\r\n        handCard3View.setId(\"Front\");\r\n        cornerSelected=null;\r\n        indexCardToPlace=100;\r\n        playerDeck();\r\n        checkTypePlayerDeck();\r\n        pathHandCard1 = \"/ImmaginiCodex/CarteFront/\" + typeHandCard1 + \"/\" + idHandCard1 + \".png\";\r\n        System.out.println(pathHandCard1);\r\n        pathHandCard2 = \"/ImmaginiCodex/CarteFront/\" + typeHandCard2 + \"/\" + idHandCard2 + \".png\";\r\n        System.out.println(pathHandCard2);\r\n        pathHandCard3 = \"/ImmaginiCodex/CarteFront/\" + typeHandCard3 + \"/\" + idHandCard3 + \".png\";\r\n        System.out.println(pathHandCard3);\r\n        handCard1 = new Image(Objects.requireNonNull(getClass().getResourceAsStream(pathHandCard1)));\r\n        handCard2 = new Image(Objects.requireNonNull(getClass().getResourceAsStream(pathHandCard2)));\r\n        handCard3 = new Image(Objects.requireNonNull(getClass().getResourceAsStream(pathHandCard3)));\r\n        handCard1View.setImage(handCard1);\r\n        handCard2View.setImage(handCard2);\r\n        handCard3View.setImage(handCard3);\r\n    }\r\n\r\n    private void newPathAfterUpdate(){\r\n        String Path1= \"/ImmaginiCodex/CarteFront/Resource/\" + SharedObjectsInGui.getIdCard1() +\".png\";\r\n        SharedObjectsInGui.setWellCard1(new Image(Objects.requireNonNull(getClass().getResourceAsStream(Path1))));\r\n        SharedObjectsInGui.getWellCard1View().setImage(SharedObjectsInGui.getWellCard1());\r\n        System.out.println(Path1);\r\n\r\n        String Path2= \"/ImmaginiCodex/CarteFront/Resource/\" + SharedObjectsInGui.getIdCard2() +\".png\";\r\n        SharedObjectsInGui.setWellCard2(new Image(Objects.requireNonNull(getClass().getResourceAsStream(Path2))));\r\n        SharedObjectsInGui.getWellCard2View().setImage(SharedObjectsInGui.getWellCard2());\r\n        System.out.println(Path2);\r\n\r\n        String Path3= \"/ImmaginiCodex/CarteFront/Gold/\" + SharedObjectsInGui.getIdCard3() +\".png\";\r\n        SharedObjectsInGui.setWellCard3(new Image(Objects.requireNonNull(getClass().getResourceAsStream(Path3))));\r\n        SharedObjectsInGui.getWellCard3View().setImage(SharedObjectsInGui.getWellCard3());\r\n\r\n        String Path4= \"/ImmaginiCodex/CarteFront/Gold/\" + SharedObjectsInGui.getIdCard4() +\".png\";\r\n        SharedObjectsInGui.setWellCard4(new Image(Objects.requireNonNull(getClass().getResourceAsStream(Path4))));\r\n        SharedObjectsInGui.getWellCard4View().setImage(SharedObjectsInGui.getWellCard4());\r\n    }\r\n\r\n    private void waitUntilLastMessage() throws IOException {\r\n        String messageFromServer = in.readLine();\r\n        while (!messageFromServer.equals(\"STARTGUI\")) {\r\n            System.out.println(\"Server says \" + messageFromServer);\r\n            messageFromServer = in.readLine();\r\n        }\r\n        System.out.println(\"Game finally starting!\");\r\n    }\r\n\r\n    public void saveElementsInGui(Path path) {\r\n        JsonObject sharedElementsObject = new JsonObject();\r\n        sharedElementsObject.add(\"idTopResourceCardDeck\", new JsonPrimitive(idTopCardResourceDeck));\r\n        sharedElementsObject.add(\"idTopGoldCardDeck\", new JsonPrimitive(idTopCardGoldDeck));\r\n        sharedElementsObject.add(\"idCard1\", new JsonPrimitive(SharedObjectsInGui.getIdCard1()));\r\n        sharedElementsObject.add(\"idCard2\", new JsonPrimitive(SharedObjectsInGui.getIdCard2()));\r\n        sharedElementsObject.add(\"idCard3\", new JsonPrimitive(SharedObjectsInGui.getIdCard3()));\r\n        sharedElementsObject.add(\"idCard4\", new JsonPrimitive(SharedObjectsInGui.getIdCard4()));\r\n        try (FileWriter file = new FileWriter(path.toFile())) {\r\n            Gson gson = new Gson();\r\n            gson.toJson(sharedElementsObject, file);\r\n            System.out.println(\"File saved successfully.\");\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    /*\r\n    * Method to load SharedObjectVariables from json file in order to correctly update attributes\r\n    * */\r\n\r\n    public void loadElementsFromGui(Path path) {\r\n        try (FileReader reader = new FileReader(path.toFile())) {\r\n            JsonObject jsonObject = JsonParser.parseReader(reader).getAsJsonObject();\r\n            idTopCardResourceDeck = jsonObject.get(\"idTopResourceCardDeck\").getAsString();\r\n            idTopCardGoldDeck = jsonObject.get(\"idTopGoldCardDeck\").getAsString();\r\n            SharedObjectsInGui.setIdCard1(jsonObject.get(\"idCard1\").getAsString());\r\n            SharedObjectsInGui.setIdCard2(jsonObject.get(\"idCard2\").getAsString());\r\n            SharedObjectsInGui.setIdCard3(jsonObject.get(\"idCard3\").getAsString());\r\n            SharedObjectsInGui.setIdCard4(jsonObject.get(\"idCard4\").getAsString());\r\n            System.out.println(\"File loaded successfully.\");\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public void load(){\r\n        loadElementsFromGui(getDefaultGuiPath());\r\n    }\r\n    public void savePath(){\r\n        saveElementsInGui(getDefaultGuiPath());\r\n    }\r\n    private Path getDefaultGuiPath() {\r\n        String home = (\"src/main/resources/sharedElementsInGui.json\");\r\n        return Paths.get(home);\r\n    }\r\n    private boolean checkGoldCardRequirements(String goldCardId) throws IOException {\r\n        // Retrieve the requirements for the specific gold card\r\n        out.println(\"getGoldCardRequirements\");\r\n        //out.println(goldCardId);\r\n        String requirements = in.readLine(); // Assuming the server sends requirements as a JSON string\r\n\r\n        JsonObject requirementsJson = JsonParser.parseString(requirements).getAsJsonObject();\r\n\r\n        // Retrieve the current attributes from the board\r\n        out.println(\"getCurrentAttributes\");\r\n        String currentAttributes = in.readLine(); // Assuming the server sends current attributes as a JSON string\r\n\r\n        JsonObject currentAttributesJson = JsonParser.parseString(currentAttributes).getAsJsonObject();\r\n\r\n        // Check if all required attributes are met\r\n        for (Map.Entry<String, JsonElement> entry : requirementsJson.entrySet()) {\r\n            String attribute = entry.getKey();\r\n            int requiredValue = entry.getValue().getAsInt();\r\n            int currentValue = currentAttributesJson.has(attribute) ? currentAttributesJson.get(attribute).getAsInt() : 0;\r\n\r\n            if (currentValue < requiredValue) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/network/client/gui/GameSceneController.java b/src/main/java/network/client/gui/GameSceneController.java
--- a/src/main/java/network/client/gui/GameSceneController.java	(revision 6eaf586abe0003fb672550792bfa295de5f46265)
+++ b/src/main/java/network/client/gui/GameSceneController.java	(date 1716481151289)
@@ -356,7 +356,7 @@
                         System.out.println("You chose to play a gold card");
                         out.println("goldGui");
                     }
-                    if (cornerSelected!=null && indexCardToPlace < 4) {
+                    if (cornerSelected!=null && indexCardToPlace < 4 ) {
                         try {
                             String isTheCardFlipped=null;
                             String actualId=null;
@@ -928,6 +928,7 @@
         BL.setPickOnBounds(true);
         BR.setPickOnBounds(true);
 
+
         board.add(TL, y, x);
         board.add(TC, (y + 1), x);
         board.add(TR, (y + 2), x);
Index: src/main/java/network/client/gui/GUI.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package network.client.gui;\r\n\r\nimport javafx.application.Application;\r\nimport javafx.fxml.FXML;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.scene.Parent;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.*;\r\nimport javafx.scene.image.ImageView;\r\nimport javafx.stage.Stage;\r\nimport view.ClientView;\r\n\r\nimport java.io.*;\r\nimport java.net.Socket;\r\n\r\npublic class GUI extends Application {\r\n    private static BufferedReader in;\r\n    private static Socket socket;\r\n    private static PrintWriter out;\r\n    private ClientView clientview = new ClientView();\r\n\r\n    @FXML\r\n    public Button closeButton;\r\n    @FXML\r\n    public ScrollPane gameBoard;\r\n    @FXML\r\n    public ImageView card;\r\n    @FXML\r\n    public ImageView initCard;\r\n\r\n    public static void main(String[] args) throws IOException {\r\n        ConnectionWithServer connectionWithServer = new ConnectionWithServer(); //creazione classe\r\n        socket = connectionWithServer.connectToServer();\r\n        out = new PrintWriter(socket.getOutputStream(), true); //to write\r\n        in = new BufferedReader(new InputStreamReader(socket.getInputStream()));\r\n        launch(args);\r\n    }\r\n\r\n    @Override\r\n    public void start(Stage primaryStage) throws Exception {\r\n        FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/model/mainMenu.fxml\"));\r\n        Parent root = loader.load();\r\n        MainMenuController controller = loader.getController();\r\n        controller.initData(primaryStage, out, socket, in, clientview);\r\n        Scene scene = new Scene(root, 919, 743);\r\n        primaryStage.setScene(scene);\r\n        primaryStage.setTitle(\"Codex\");\r\n        primaryStage.show();\r\n        controller.startMenuScene(primaryStage);\r\n    }\r\n}\r\n\r\n//GOLD CARD\r\n//NOTTOBEPLACEDON\r\n//SPECIFICSEEDS\r\n//DRAWCARD->ENDTURN\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/network/client/gui/GUI.java b/src/main/java/network/client/gui/GUI.java
--- a/src/main/java/network/client/gui/GUI.java	(revision 6eaf586abe0003fb672550792bfa295de5f46265)
+++ b/src/main/java/network/client/gui/GUI.java	(date 1716479455149)
@@ -52,5 +52,5 @@
 
 //GOLD CARD
 //NOTTOBEPLACEDON
-//SPECIFICSEEDS
-//DRAWCARD->ENDTURN
+//SPECIFICSEEDS done!
+//DRAWCARD->ENDTURN done!
Index: src/main/java/network/client/gui/LoginController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package network.client.gui;\r\nimport javafx.application.Platform;\r\nimport javafx.fxml.FXML;\r\nimport javafx.scene.control.*;\r\nimport javafx.event.ActionEvent;\r\nimport javafx.scene.image.Image;\r\nimport javafx.scene.image.ImageView;\r\nimport javafx.stage.Stage;\r\nimport model.game.Dot;\r\nimport view.ClientView;\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.PrintWriter;\r\nimport java.net.Socket;\r\n\r\npublic class LoginController {\r\n\r\n    private Stage primaryStage;\r\n    private PrintWriter out;\r\n    private Socket socket;\r\n    private BufferedReader in;\r\n\r\n    @FXML\r\n    public TextField usernameField;\r\n    @FXML\r\n    public Button loginButton;\r\n    @FXML\r\n    public Label test;\r\n    @FXML\r\n    public Label loginLabel;\r\n    @FXML\r\n    public ToggleGroup toggleGroup;\r\n    private ClientView clientView= new ClientView();\r\n\r\n    public void initData(Stage primaryStage, PrintWriter out, Socket socket, BufferedReader in, ClientView cl) {\r\n        this.primaryStage = primaryStage;\r\n        this.out = out;\r\n        this.socket = socket;\r\n        this.in=in;\r\n        this.clientView=cl;\r\n\r\n    }\r\n\r\n    @FXML\r\n    public void initialize() {\r\n        loginButton.setDisable(true); //disabling login button unless client has insert his username\r\n        usernameField.textProperty().addListener((observable, oldValue, newValue) -> checkFields());        //Listener to see if the field has been completed\r\n        toggleGroup.selectedToggleProperty().addListener((observable, oldValue, newValue) -> checkFields());\r\n    }\r\n\r\n    private void checkFields() {\r\n        // Checking both fields\r\n        String username = usernameField.getText();\r\n        Toggle dot = toggleGroup.getSelectedToggle();\r\n        loginButton.setDisable(username.isEmpty() || dot == null);\r\n    }\r\n\r\n    @FXML\r\n    public void loginButtonClicked(ActionEvent event) throws IOException {\r\n        new Thread(() -> {\r\n            try {\r\n\r\n                String username = usernameField.getText();\r\n                Toggle dot = toggleGroup.getSelectedToggle();\r\n\r\n                if (username.isEmpty() || dot == null) {\r\n                    Platform.runLater(() -> {\r\n                        if (username.isEmpty()) {\r\n                            System.out.println(\"Username necessary\");\r\n                            loginLabel.setText(\"Write your username\");\r\n                        }\r\n\r\n                        if (dot == null) {\r\n                            loginLabel.setText(\"Choose a dot color\");\r\n                            loginLabel.setStyle(\"-fx-font-size: 20px;\" + // Dimensione del font\r\n                                    \"-fx-font-family: Arial;\" + // Famiglia del font\r\n                                    \"-fx-text-fill: #EF8156;\" + // Colore del testo\r\n                                    \"-fx-padding: 10px;\" + // Spaziatura interna\r\n                                    \"-fx-border-color: #EF8156;\" + // Colore del bordo\r\n                                    \"-fx-border-width: 1px;\" + // Spessore del bordo\r\n                                    \"-fx-border-radius: 5px;\"); // Arrotondamento del bordo\r\n                            System.out.println(\"Choose your dot color please\");\r\n                        }\r\n                    });\r\n                    return;\r\n                }\r\n\r\n                String chosenName= usernameField.getText();\r\n\r\n                out.println(chosenName); // Sending username to the server\r\n                String whatServerSays= in.readLine();\r\n                System.out.println(whatServerSays);\r\n                if (whatServerSays.equals(\"Username already taken. Please choose another username:\")) {\r\n                    Platform.runLater(() -> {\r\n                        loginLabel.setText(\"Username already taken. Please choose another username:\");\r\n                        loginLabel.setStyle(\"-fx-font-size: 20px;\" + // Dimensione del font\r\n                                \"-fx-font-family: Arial;\" + // Famiglia del font\r\n                                \"-fx-text-fill: #EF8156;\" + // Colore del testo\r\n                                \"-fx-padding: 10px;\" + // Spaziatura interna\r\n                                \"-fx-border-color: #EF8156;\" + // Colore del bordo\r\n                                \"-fx-border-width: 1px;\" + // Spessore del bordo\r\n                                \"-fx-border-radius: 5px;\"); // Arrotondamento del bordo\r\n                        //out.println(usernameField.getText());\r\n                        usernameField.clear();\r\n                       //usernameField.requestFocus();\r\n                        //loginButton.setDisable(true);\r\n                    });\r\n\r\n                    return;\r\n                }\r\n\r\n                clientView.setUserName(username);\r\n                System.out.println(\"This clientview username is: \" + clientView.getUserName());\r\n                System.out.println(in.readLine()); //Choose the color of\r\n                String realChosenDot = ((RadioButton) dot).getText();\r\n                clientView.setDot(Dot.valueOf(realChosenDot));\r\n                out.println(realChosenDot);\r\n\r\n                if (in.readLine().equals(\"Chosen color not available!\")) {\r\n                    Platform.runLater(() -> {\r\n                        loginLabel.setText(\"Chosen color not available! Choose another color:\");\r\n                        loginLabel.setStyle(\"-fx-font-size: 20px;\" +\r\n                                \"-fx-font-family: Arial;\" +\r\n                                \"-fx-text-fill: #EF8156;\" +\r\n                                \"-fx-padding: 10px;\" +\r\n                                \"-fx-border-color: #EF8156;\" +\r\n                                \"-fx-border-width: 1px;\" +\r\n                                \"-fx-border-radius: 5px;\");\r\n                    });\r\n                    return;\r\n                }\r\n\r\n                String mexFromS= in.readLine();\r\n                System.out.println(mexFromS);\r\n                if(mexFromS.equals(\"Choose the number of players!\")) {\r\n                    Platform.runLater(() -> {\r\n                        ChooseNumOfPlayersScene chooseNumOfPlayersScene = new ChooseNumOfPlayersScene();\r\n                        try {\r\n                            chooseNumOfPlayersScene.createChooseNumOfPlayersScene(primaryStage, out, socket, in, clientView);\r\n                        } catch (IOException e) {\r\n                            throw new RuntimeException(e);\r\n                        }\r\n                    });\r\n                }\r\n                else {\r\n\r\n                    System.out.println(in.readLine());\r\n                    LobbyScene lobbySceneHandler = new LobbyScene();\r\n                    lobbySceneHandler.createLobbyScene(primaryStage, out, socket, in, clientView, null, 0);\r\n                }\r\n\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n        }).start();\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/network/client/gui/LoginController.java b/src/main/java/network/client/gui/LoginController.java
--- a/src/main/java/network/client/gui/LoginController.java	(revision 6eaf586abe0003fb672550792bfa295de5f46265)
+++ b/src/main/java/network/client/gui/LoginController.java	(date 1716479455161)
@@ -91,8 +91,8 @@
                 out.println(chosenName); // Sending username to the server
                 String whatServerSays= in.readLine();
                 System.out.println(whatServerSays);
-                if (whatServerSays.equals("Username already taken. Please choose another username:")) {
-                    Platform.runLater(() -> {
+                while (whatServerSays.equals("Username already taken. Please choose another username:")) {
+                    Platform.runLater( () -> {
                         loginLabel.setText("Username already taken. Please choose another username:");
                         loginLabel.setStyle("-fx-font-size: 20px;" + // Dimensione del font
                                 "-fx-font-family: Arial;" + // Famiglia del font
@@ -103,11 +103,14 @@
                                 "-fx-border-radius: 5px;"); // Arrotondamento del bordo
                         //out.println(usernameField.getText());
                         usernameField.clear();
-                       //usernameField.requestFocus();
-                        //loginButton.setDisable(true);
-                    });
-
-                    return;
+                        return;
+                        } );
+                    chosenName = usernameField.getText();
+                    if(chosenName.isEmpty()) {
+                        return;
+                    }
+                    out.println(chosenName);
+                    whatServerSays = in.readLine();
                 }
 
                 clientView.setUserName(username);
Index: src/main/resources/sharedElementsInGui.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\"idTopResourceCardDeck\":\"35\",\"idTopGoldCardDeck\":\"78\",\"idCard1\":\"14\",\"idCard2\":\"15\",\"idCard3\":\"62\",\"idCard4\":\"77\"}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/sharedElementsInGui.json b/src/main/resources/sharedElementsInGui.json
--- a/src/main/resources/sharedElementsInGui.json	(revision 6eaf586abe0003fb672550792bfa295de5f46265)
+++ b/src/main/resources/sharedElementsInGui.json	(date 1716479455468)
@@ -1,1 +1,1 @@
-{"idTopResourceCardDeck":"35","idTopGoldCardDeck":"78","idCard1":"14","idCard2":"15","idCard3":"62","idCard4":"77"}
\ No newline at end of file
+{"idTopResourceCardDeck":"2","idTopGoldCardDeck":"78","idCard1":"21","idCard2":"40","idCard3":"72","idCard4":"75"}
\ No newline at end of file
