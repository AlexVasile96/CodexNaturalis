@startuml
package network.client.gui {

class GameSceneController {
    - StackPane root
    - static final Object syncObject
    - Stage primaryStage
    - PrintWriter out
    - Socket socket
    - BufferedReader in
    - String typeHandCard1
    - String typeHandCard2
    - String typeHandCard3
    - String idHandCard1
    - String idHandCard2
    - String idHandCard3
    - String idTopCardResourceDeck
    - String idTopCardGoldDeck
    - Button playCard
    - Button flipCardToBack
    - Button flipCardToFront
    - Button drawCard
    - Button seeYourSpecificSeeds
    - Button seeOtherPlayersBoards
    - Button seeYourPoints
    - Button showObjective
    - Button endTurn
    - Button quit
    - Boolean haveToDraw
    - Boolean haveToPlay
    - String chosenDeckForDrawingNewCard
    - String wellOrDeck
    - double heightWellCards
    - double widthWellCards
    - Integer indexCardToPlace
    - Integer indexCardToBePlacedOn
    - Integer indexCardPlayedFromHand
    - Integer indexCardFromWellSelected
    - String cornerSelected
    - Image wellCardSelected
    - String idWellCardSelected
    - Controller controller
    - String currentPlayerNickname
    - ClientView clientView
    - BoardPointsScene boardPointsScene
    - boolean isCurrentPlayerTurn
    - ScrollPane cardsOntheBoardScrollPane
    - GridPane gameBoard
    - GridPane buttonContainer
    - Label chosenCardToPlace
    - Label chosenCardToBePlacedOn
    - Label chosenCorner
    - Label chosenDeckOrWell
    - List<CardView> allCardViews
    - static CardView clickedCardView
    - Map<CardView, Integer> cardIndices
    - int nextCardIndex
    - String pathHandCard1
    - String pathHandCard2
    - String pathHandCard3
    - String pathChosen
    - GridPane gridPaneForWellCards
    - String firstCommonId
    - String secondCommonId
    - String secretId
    - ShowObjectiveScene objectiveScene
    - boolean cardOnHerBack
    - String pathFlipped
    - Image initCardImage
    - ImageView handCard1View
    - ImageView handCard2View
    - ImageView handCard3View
    - Image handCard1
    - Image handCard2
    - Image handCard3
    - String indexForGold
    - Color targetColor
    - boolean isInit
    - String isTheCardFlipped
    - boolean isFlipped
    + initData(Stage primaryStage, PrintWriter out, Socket socket, BufferedReader in, ClientView clientView, String currentPlayerNickname)
    + updateFirst()
    + startGame(String initCardId, int isFront)
    - handleCardClick(CardView cardView)
    - setupGameActions()
    - waitForTurn(ImageView handCard1View, ImageView handCard2View, ImageView handCard3View)
    - handleDisconnection()
    - showAlert(String title, String message)
    - enableOrDisableGameActions()
    - updateTurnState(boolean isCurrentPlayerTurn)
    - flipToBackCard(String stringId)
    - flipCardToFront(String stringId)
    - containsColor(Image cornerImage, Color targetColor)
    + subnettingEachImage(Image image, String cardId) : GridPane
    + placingBottomRightCard(ImageView cardOnTheBoard, GridPane board, int id)
    + placingBottomLeftCard(ImageView cardOnTheBoard, GridPane board, int id)
    + placingTopLeftCard(ImageView cardOnTheBoard, GridPane board, int id)
    + placingTopRightCard(ImageView cardOnTheBoard, GridPane board, int id)
    + getClickedImageView() : CardView
    - firstWellCard()
    - secondWellCard()
    - thirdWellCard()
    - fourthWellCard()
    - updatingResourceAndGoldDeck()
    - checkTypeWellCards()
    - playerDeck()
    - checkTypePlayerDeck()
    - checkType(String id) : String
    - creatingPathForGameMethod()
    - createNewPathForImages(String path) : Image
    - setWidthAndHeight(ImageView imageView)
    - creatingDeckAndGoldDeckView()
    - settingDecksOnMouseClickedEvent()
    - creatingImagesForTheWell()
    - creatingImagesViewForTheWell()
    - settingWellOnMouseClickedEvent()
    - createPathForBackCards(String cardId) : String
    - createPathForFrontCards(String cardId) : String
    - pathForResourceCardFront(String cardId) : String
    - pathForGoldCardFront(String cardId) : String
    - pathForResourceCardsBack(String cardId) : String
    - pathForGoldCardBack(String cardId) : String
    - creatingWell()
    - initializeWell()
    - updateResourceDeckTopCard()
    - updatedGoldDeckTopCard()
    - getX(ImageView img) : int
    - getY(ImageView img) : int
    - creatingButtons()
    + setClickedCardView(CardView cardView)
    - updateGUI()
    - newPathAfterUpdate()
    - waitUntilLastMessage()
    + saveElementsInGui(Path path)
    + loadElementsFromGui(Path path)
    + load()
    + savePath()
    - getDefaultGuiPath() : Path
    - checkGoldCardRequirements(String goldCardId) : boolean
}

interface ClientView {
    + String getUserName()
}

interface BoardPointsScene {
    + popupBoardPoints()
}

interface Controller {
    + playCardClick(Integer indexCardToBePlacedOn, Integer indexCardToPlace, String cornerSelected, String isTheCardFlipped) throws IOException
    + endTurn() : String
    + drawCard(String wellOrDeck, String chosenDeckForDrawingNewCard, Integer indexCardFromWellSelected) throws IOException
    + showSpecificSeed() : String
    + firstCommon() : String
    + secondCommon() : String
    + secretCard() : String
    + waitForTurn(String userName, Stage primaryStage) throws IOException
    + quit(Stage primaryStage) throws IOException
}

interface ShowObjectiveScene {
    + popupObjectiveScene(String firstCommonId, String secondCommonId, String secretId)
}

class CardView {
    - ImageView imageView
    - String cardId
    - String position
    + CardView(ImageView imageView, String cardId, String position)
    + getImageView() : ImageView
    + getCardId() : String
    + getPosition() : String
}

}

package view {
    interface ClientView
}

network.client.gui.GameSceneController -down-> view.ClientView
network.client.gui.GameSceneController -down-> network.client.gui.BoardPointsScene
network.client.gui.GameSceneController -down-> network.client.gui.Controller
network.client.gui.GameSceneController -down-> network.client.gui.ShowObjectiveScene

}
@enduml